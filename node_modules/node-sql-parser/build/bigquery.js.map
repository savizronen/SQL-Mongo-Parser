{"version":3,"sources":["/Users/taozhi/learning/node-sql-parser/webpack/bootstrap","/Users/taozhi/learning/node-sql-parser/pegjs/bigquery.pegjs","/Users/taozhi/learning/node-sql-parser/external \"big-integer\"","/Users/taozhi/learning/node-sql-parser/src/parser.single.js","/Users/taozhi/learning/node-sql-parser/src/util.js","/Users/taozhi/learning/node-sql-parser/src/window.js","/Users/taozhi/learning/node-sql-parser/src/over.js","/Users/taozhi/learning/node-sql-parser/src/func.js","/Users/taozhi/learning/node-sql-parser/src/limit.js","/Users/taozhi/learning/node-sql-parser/src/with.js","/Users/taozhi/learning/node-sql-parser/src/update.js","/Users/taozhi/learning/node-sql-parser/src/insert.js","/Users/taozhi/learning/node-sql-parser/src/tables.js","/Users/taozhi/learning/node-sql-parser/src/select.js","/Users/taozhi/learning/node-sql-parser/src/show.js","/Users/taozhi/learning/node-sql-parser/src/array-struct.js","/Users/taozhi/learning/node-sql-parser/src/expr.js","/Users/taozhi/learning/node-sql-parser/src/aggregation.js","/Users/taozhi/learning/node-sql-parser/src/assign.js","/Users/taozhi/learning/node-sql-parser/src/binary.js","/Users/taozhi/learning/node-sql-parser/src/case.js","/Users/taozhi/learning/node-sql-parser/src/interval.js","/Users/taozhi/learning/node-sql-parser/src/index-definition.js","/Users/taozhi/learning/node-sql-parser/src/constrain.js","/Users/taozhi/learning/node-sql-parser/src/column.js","/Users/taozhi/learning/node-sql-parser/src/create.js","/Users/taozhi/learning/node-sql-parser/src/alter.js","/Users/taozhi/learning/node-sql-parser/src/command.js","/Users/taozhi/learning/node-sql-parser/src/union.js","/Users/taozhi/learning/node-sql-parser/src/sqlite.js","/Users/taozhi/learning/node-sql-parser/src/delete.js","/Users/taozhi/learning/node-sql-parser/src/sql.js","/Users/taozhi/learning/node-sql-parser/src/parser.js","/Users/taozhi/learning/node-sql-parser/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","BigInt","peg$SyntaxError","message","expected","found","location","this","Error","captureStackTrace","child","parent","ctor","constructor","peg$subclass","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","text","escapedParts","parts","length","Array","classEscape","inverted","any","end","other","description","hex","ch","charCodeAt","toString","toUpperCase","replace","j","descriptions","type","sort","slice","join","describeExpected","describeFound","SyntaxError","parse","input","options","peg$result","peg$FAILED","peg$startRuleFunctions","start","peg$parsestart","peg$startRuleFunction","peg$c3","peg$literalExpectation","peg$c5","peg$c10","peg$c12","peg$c17","head","tail","createList","peg$c21","peg$c23","peg$c25","peg$c27","peg$c32","peg$c41","peg$c46","unshift","forEach","tableInfo","table","as","tableAlias","columnList","columns","columnListTableAlias","clear","col","add","refreshColumnList","peg$c68","peg$c70","peg$c72","peg$c74","peg$c76","peg$c79","peg$c81","peg$c95","createBinaryExprChain","peg$c97","peg$c99","peg$c103","nk","peg$c106","peg$c108","peg$c110","peg$c112","peg$c114","peg$c116","peg$c124","peg$c126","peg$c129","peg$c131","peg$c133","peg$c142","reservedMap","peg$c146","peg$c147","peg$c148","peg$classExpectation","peg$c149","chars","peg$c151","peg$c152","peg$c153","peg$c155","peg$c156","peg$c157","peg$c161","peg$c162","peg$c163","peg$c164","peg$c165","peg$c166","peg$c167","peg$c169","peg$c173","peg$c188","peg$c190","peg$c192","peg$c194","peg$c196","peg$c198","peg$c200","peg$c202","peg$c204","peg$c206","peg$c208","peg$c210","peg$c212","peg$c214","peg$c216","peg$c218","peg$c220","peg$c222","peg$c224","peg$c226","peg$c228","peg$c240","peg$c243","ca","toLowerCase","peg$c244","peg$c245","peg$c246","peg$c247","peg$c249","peg$c252","peg$c255","peg$c258","peg$c261","peg$c264","peg$c267","peg$c270","peg$c273","peg$c276","peg$c279","peg$c281","peg$c282","peg$c291","peg$c295","peg$c296","peg$c297","peg$c298","peg$c299","peg$c300","peg$c301","peg$c302","peg$c305","peg$c311","peg$c315","peg$c322","peg$c332","peg$c337","peg$c354","peg$c356","peg$c358","peg$c360","peg$c362","peg$c364","peg$c366","peg$c368","peg$c370","peg$c372","peg$c374","peg$c379","peg$c381","peg$c383","peg$c385","peg$c387","peg$c389","peg$c391","peg$c393","peg$c395","peg$c398","peg$c400","peg$c403","peg$c406","peg$c409","peg$c412","peg$c415","peg$c418","peg$c421","peg$c424","peg$c427","peg$c430","peg$c433","peg$c436","peg$c439","peg$c442","peg$c445","peg$c448","peg$c451","peg$c454","peg$c460","peg$c462","peg$c464","peg$c466","peg$c468","peg$c470","peg$c472","peg$c475","peg$c478","peg$c484","peg$c490","peg$c493","peg$c496","peg$c499","peg$c502","peg$c508","peg$c517","peg$c520","peg$c541","peg$c547","peg$c550","peg$c553","peg$c556","peg$c565","peg$c571","peg$c580","peg$c583","peg$c628","peg$c630","peg$c632","peg$c634","peg$c636","peg$c638","peg$c640","peg$c642","peg$c644","peg$c646","peg$c647","peg$c648","peg$c649","peg$c653","dataType","peg$c655","a","definition","anglebracket","peg$currPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","ignoreCase","peg$computePosDetails","pos","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","offset","peg$fail","push","peg$buildStructuredError","s0","s2","peg$parse__","s1","s3","s4","s5","s6","s7","peg$parsequery_statement","peg$parseSEMICOLON","cur","ast","tableList","from","peg$c1","peg$parsemultiple_stmt","s9","peg$parsewith_clause","peg$parseunion_stmt","peg$parseorder_by_clause","peg$parselimit_clause","cte","with","select","orderby","limit","parentheses","peg$parsequery_expr","peg$parseselect_stmt","peg$parseset_op","substr","peg$parseident_start","peg$parseKW_UNION","peg$parseKW_ALL","peg$parseKW_DISTINCT","u","peg$c13","peg$parseunion_stmt_nake","_next","union","peg$c15","s8","s10","s12","s14","s16","s18","s20","s22","s24","s26","peg$parseKW_SELECT","peg$parse___","peg$parseKW_AS","peg$parseKW_STRUCT","peg$parseKW_VALUE","k","peg$parsestruct_value","peg$parsecolumn_clause","peg$parseKW_FROM","peg$parsetable_base","peg$parsetable_ref","peg$parsetable_ref_list","peg$parsefrom_clause","peg$parseexpr","keyword","expr","peg$parsefor_sys_time_as_of","peg$parseKW_WHERE","peg$parseor_and_where_expr","peg$parsewhere_clause","peg$parseKW_GROUP","peg$parseKW_BY","peg$parseexpr_list","peg$parsegroup_by_clause","peg$parseKW_HAVING","peg$parsehaving_clause","peg$parseKW_WINDOW","peg$parsenamed_window_expr","peg$parseCOMMA","peg$parsenamed_window_expr_list","peg$parsewindow_clause","sv","f","fs","w","g","h","win","isArray","info","db","as_struct_val","distinct","for_sys_time_as_of","where","groupby","having","window","peg$c19","peg$parseselect_stmt_nake","parentheses_symbol","peg$parseKW_WITH","peg$parsecte_definition","peg$parseliteral_string","peg$parseident_name","peg$parseLPAREN","peg$parseRPAREN","stmt","peg$parseSTAR","peg$parsecolumns_list","expr_list","star","peg$parsecolumn_list_item","peg$parsecolumn_offset_expr","peg$parseLBRAKE","peg$parseKW_OFFSET","peg$parseKW_ORDINAL","peg$parseliteral_numeric","peg$parseRBRAKE","peg$parseident","peg$parseDOT","tbl","pro","mid","suffix","peg$c37","peg$parsealias_clause","peg$parseexpr_alias","JSON","stringify","peg$c144","peg$parsequoted_ident","peg$parsealias_ident","peg$parsefrom_unnest_item","s11","peg$parsewith_offset","with_offset","s13","s15","peg$parsejoin_op","peg$parseKW_USING","op","using","peg$parseon_clause","on","peg$c49","alias","peg$c50","peg$parsetable_join","peg$parsetable_name","peg$c52","peg$parseKW_LEFT","peg$parseKW_OUTER","peg$parseKW_JOIN","peg$parseKW_RIGHT","peg$parseKW_FULL","peg$parseKW_CROSS","peg$parseKW_INNER","peg$c57","project","dt","obj","peg$c58","peg$c59","peg$parseKW_ON","peg$parseas_window_specification","as_window_specification","peg$parsepartition_by_clause","peg$parseKW_BETWEEN","peg$parseKW_AND","e","peg$parsewindow_frame_clause","partitionby","window_frame_clause","peg$parsewindow_specification","window_specification","peg$parseKW_PARTITION","peg$parseKW_ORDER","peg$parseorder_by_element","peg$parseorder_by_list","peg$parseKW_DESC","peg$parseKW_ASC","peg$c85","peg$parsenumber_or_param","peg$parseparam","peg$parseKW_LIMIT","i1","res","seperator","peg$c86","el","peg$c87","peg$parsestruct_type","peg$parsestruct_expr","peg$parseprimary","peg$parseLOGIC_OPERATOR","peg$parselogic_operator_expr","peg$parseand_expr","peg$parseKW_OR","peg$parseor_expr","peg$parseadditive_operator","createUnaryExpr","peg$parseunary_expr","array_path","peg$parsearray_type","peg$parseKW_ARRAY","peg$parseliteral","peg$parseliteral_list","map","peg$c89","peg$parseparentheses_expr","peg$parseparentheses_list_expr","peg$c90","peg$parsearray_expr","result","createBinaryExpr","peg$c94","peg$parsenot_expr","peg$parsecomparison_expr","peg$parseKW_NOT","peg$parseKW_EXISTS","peg$parseexists_op","peg$parseexists_expr","left","rh","peg$parseadditive_expr","peg$parsearithmetic_comparison_operator","peg$parsearithmetic_op_right","peg$parsein_op","right","peg$c122","peg$parsein_op_right","peg$parsebetween_or_not_between_op","peg$parsebetween_op_right","peg$parseKW_IS","peg$c118","peg$parseis_op_right","peg$parseKW_LIKE","peg$parselike_op","peg$parselike_op_right","peg$parsecomparison_op_right","peg$parsecolumn_ref","peg$parseKW_IN","peg$parsemultiplicative_expr","peg$parsemultiplicative_operator","list","s17","peg$parseKW_CAST","peg$parsedata_type","symbol","target","peg$parseKW_DECIMAL","peg$parseint","precision","peg$c232","scale","peg$c233","peg$parseKW_SIGNED","peg$parseKW_UNSIGNED","peg$parsesignedness","peg$parseKW_INTEGER","peg$c234","peg$parsecast_expr","peg$parseKW_COUNT","peg$parsestar_expr","or","peg$c181","peg$parsecount_arg","peg$parseover_partition","args","over","peg$parseaggr_fun_count","peg$parseKW_SUM","peg$parseKW_MAX","peg$parseKW_MIN","peg$parseKW_AVG","peg$parseKW_SUM_MAX_MIN_AVG","peg$parseaggr_fun_smma","peg$parseaggr_func","peg$parseKW_EXTRACT","peg$parseextract_filed","peg$parseKW_TIMESTAMP","peg$parseKW_INTERVAL","peg$parseKW_TIME","peg$parseKW_DATE","kw","field","cast_type","source","peg$c230","peg$parseextract_func","peg$c186","peg$parseproc_func_name","bc","peg$parseKW_CURRENT_DATE","peg$parseKW_CURRENT_TIME","peg$parseKW_CURRENT_TIMESTAMP","peg$parsescalar_func","peg$c184","peg$parseon_update_current_timestamp","up","peg$c185","peg$parsefunc_call","peg$parseKW_CASE","peg$parsecase_when_then","peg$parsecase_else","peg$parseKW_END","condition_list","otherwise","peg$c137","peg$parsecase_expr","peg$parseKW_UNIT_YEAR","peg$parseKW_UNIT_MONTH","peg$parseKW_UNIT_DAY","peg$parseKW_UNIT_HOUR","peg$parseKW_UNIT_MINUTE","peg$parseKW_UNIT_SECOND","peg$parseinterval_unit","unit","peg$parseinterval_expr","peg$parseKW_WHEN","peg$parseKW_THEN","cond","peg$parseKW_ELSE","peg$parsecolumn_name","peg$parsecolumn_without_kw","peg$parsecolumn","peg$c141","test","charAt","peg$parsedouble_quoted_ident","peg$parsesingle_quoted_ident","peg$parsebackticks_quoted_ident","peg$parsecolumn_part","peg$parseident_part","peg$c175","peg$parseKW_OVER","peg$parseKW_TRUE","peg$parseKW_FALSE","peg$parseliteral_bool","peg$parseKW_NULL","peg$parseliteral_null","peg$parseKW_DATETIME","peg$parsesingle_char","peg$parsesingle_quote_char","peg$parseliteral_datetime","peg$c242","peg$parseescape_char","h1","h2","h3","h4","peg$parsehexDigit","String","fromCharCode","parseInt","peg$parsefrac","peg$parseexp","int_","frac","numStr","isBigInt","parseFloat","peg$c285","exp","peg$c286","peg$c287","peg$parsenumber","peg$parsedigits","peg$parsedigit","sign","peg$parsee","peg$parseLANGLE","peg$parseRANGLE","peg$parseOPERATOR_CONCATENATION","peg$parseOPERATOR_AND","peg$parsewhitespace","peg$parsecomment","peg$parsechar","peg$parseblock_comment","peg$parseEOL","peg$parseline_comment","peg$parsepound_sign_comment","peg$parseEOF","peg$parsedata_type_list","peg$parsedata_type_alias","DATA_TYPES","field_name","field_type","peg$c652","peg$parseKW_STRING","peg$parsecharacter_string_type","peg$parseKW_NUMERIC","peg$parseKW_INT_64","peg$parseKW_FLOAT_64","peg$parsenumeric_type","peg$parsedatetime_type","peg$parseKW_BYTES","peg$parseKW_BOOL","peg$parseKW_GEOGRAPHY","peg$parsebool_byte_geography_type","operator","numberStr","previousMaxSafe","Number","MAX_SAFE_INTEGER","po","queryTableAlias","tableName","newColumnsList","Set","keys","columnInfo","split","require","PARSER_NAME","DEFAULT_OPT","database","parserOpt","commonOptionConnector","action","opt","connector","str","createValueExpr","escape","getParserOpt","setParserOpt","topToSQL","percent","prefix","columnIdentifierToSql","ident","identifierToSql","isDual","commonTypeValue","toUpper","val","hasVal","literalToSQL","collate","replaceParams","params","replaceParamsInner","filter","onPartitionsToSQL","partitions","partition","arrayStructTypeToSQL","dataTypeUpper","commentToSQL","comment","triggerEventToSQL","events","event","kwArgs","columnRefToSQL","returningToSQL","returning","commonKeywordArgsToSQL","autoIncreatementToSQL","autoIncreatement","seed","increment","columnOrderListToSQL","columnOrderList","columnOrderToSQL","asWindowSpecToSQL","asWindowSpec","windowSpec","windowFrame","orderOrPartitionByToSQL","windowSpecificationToSQL","namedWindowExprToSQL","namedWindowExpr","constructArgsList","consider_nulls","argsList","exprToSQL","isConsidernulls","fnName","isConsiderNullsInArgs","overToSQL","upperType","onUpdate","castToSQL","expression","symbolChar","arrayDimension","array","arrayDimensionToSymbol","funcToSQL","collateStr","overStr","composePrefixValSuffix","limitToSQL","fetch","limitOffsetToSQL","withToSQL","withExpr","isRecursive","recursive","withExprStr","setToSQL","sets","clauses","set","setItem","valuesToSQL","values","selectToSQL","partitionToSQL","partitionArr","insertToSQL","onDuplicateUpdate","on_duplicate_update","duplicateSet","tablesToSQL","tableToSQL","unnestExpr","withOffset","unnestToSQL","schema","tablesample","schemaStr","valueSQL","tableSampleSQL","repeatable","tables","baseTable","joinExpr","tableOptionToSQL","tableOption","sql","asStructVal","forSystem","forUpdate","for_update","top","windowInfo","withInfo","distinctToSQL","columnsToSQL","getExprListSQL","showToSQL","showExpr","showEventExpr","inClause","showCharacterSetExpr","showLikeAndWhereToSQL","showGrantsForExpr","forExpr","user","host","role_list","userAndHost","role","showGrantsForUser","arrayStructValueToSQL","exprList","arrayPath","brackets","arrayExprListToSQL","arrayStructExprToSQL","exprToSQLConvertFn","alter","alterExprToSQL","aggr_func","within_group_orderby","separator","withinGroup","window_func","assign","leftVar","rightVal","binary_expr","rstr","isBetween","case","conditions","len","cast","column_ref","extract","castType","function","interval","intervalExpr","show","struct","namedWindowExprInfo","exprOrigin","Reflect","deleteProperty","expressions","upperPrefix","indexTypeToSQL","indexType","indexOptionToSQL","indexOpt","indexOptArray","shift","indexOptionListToSQL","indexOptList","indexTypeAndOptionToSQL","indexDefinition","constraintType","constraint_type","index_type","index_options","indexOptions","definitionSQL","constraintDefinitionToSQL","constraintDefinition","constraint","enforced","index","referenceDefinition","reference_definition","constraintSQL","columnReferenceDefinitionToSQL","array_index","arrow","columnOffsetToSQL","number","columnDataType","reference","match","onDelete","on_delete","on_update","columnOrder","nulls","opclass","order","columnDefinitionToSQL","columnDefinition","columnOpt","nullable","characterSet","character_set","check","storage","defaultOpt","default_val","autoIncrement","auto_increment","uniquePrimary","unique_or_primary","columnFormat","column_format","columnOption","getDual","columnsStr","has","columnToSQL","createDefinitionToSQL","indexSQL","resource","createDefinition","create_definitions","firstAfter","first_after","ifNotExists","if_not_exists","oldColumn","old_column","commonCmdToSQL","lockUnlockToSQL","tableStmt","lockType","lock_type","tableInfoTemp","lockMode","lock_mode","nowait","lockInfo","pgLock","members","varName","unionToSQL","unary_expr","unarExpr","space","typeToSQLFn","analyze","attach","like","temporary","tableOptions","table_options","ignoreReplace","ignore_replace","queryExpr","query_expr","likeType","likeTableName","createTableToSQL","constraintKw","constraint_kw","deferrable","execute","for_each","when","createTriggerToSQL","extension","withName","version","createExtensionToSQL","concurrently","fileStream","filestream_on","include","indexColumns","index_columns","indexUsing","index_using","algorithmOpt","algorithm_option","lockOpt","lock_option","onKw","on_kw","tablespace","withBeforeWhere","with_before_where","withIndexOpt","includeColumns","createIndexToSQL","sequence","createSequenceToSQL","createDatabaseToSQL","delete","addition","update","insert","drop","truncate","declare","dec","at","declareInfo","use","rename","renameInfo","storeProcessCall","desc","lock","unlock","fun","_orderby","_limit","unionKeyword","surportedTypes","checkSupported","includes","toSQL","astInfo","multipleToSQL","astToSQL","go","goToSQL","go_next","sqlItem","Parser","typeCase","parsers","trim","whiteList","checkFun","authorityList","hasAuthority","denyInfo","authority","hasCorrespondingAuthority","whiteAuthority","regex","RegExp","global","NodeSQLParser","util"],"mappings":"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","file":"bigquery.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nvar BigInt = require(\"big-integer\");\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { start: peg$parsestart },\n      peg$startRuleFunction  = peg$parsestart,\n\n      peg$c0 = function(n) {\n          return n\n        },\n      peg$c1 = function(head, tail) {\n            const cur = [head && head.ast || head];\n            for (let i = 0; i < tail.length; i++) {\n              if(!tail[i][3] || tail[i][3].length === 0) continue;\n              cur.push(tail[i][3] && tail[i][3].ast || tail[i][3]);\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: cur\n            }\n          },\n      peg$c2 = \"(\",\n      peg$c3 = peg$literalExpectation(\"(\", false),\n      peg$c4 = \")\",\n      peg$c5 = peg$literalExpectation(\")\", false),\n      peg$c6 = function(s) {\n            return {\n              ...s[2],\n              parentheses: true,\n            }\n          },\n      peg$c7 = function(cte, s, o, l, se) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'bigquery',\n              with: cte,\n              select: s && s.ast,\n              orderby: o,\n              limit: l,\n              parentheses: s && s.parentheses || false,\n            }\n          }\n        },\n      peg$c8 = function(u, s) {\n          return s ? `union ${s.toLowerCase()}` : 'union'\n        },\n      peg$c9 = \"intersect\",\n      peg$c10 = peg$literalExpectation(\"INTERSECT\", true),\n      peg$c11 = \"except\",\n      peg$c12 = peg$literalExpectation(\"EXCEPT\", true),\n      peg$c13 = function(u, s) {\n          return `${u.toLowerCase()} ${s.toLowerCase()}`\n        },\n      peg$c14 = function(s) {\n            return {\n              ...s[2],\n              parentheses: true\n            }\n          },\n      peg$c15 = function(head, tail) {\n            let cur = head\n            for (let i = 0; i < tail.length; i++) {\n              cur._next = tail[i][3]\n              cur.union = tail[i][1]\n              cur = cur._next\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: head\n            }\n          },\n      peg$c16 = function(s) {\n            return {\n              ...s[2],\n              parentheses_symbol: true\n            }\n          },\n      peg$c17 = function(head, tail) {\n            return createList(head, tail);\n          },\n      peg$c18 = function(name, stmt) {\n          if (typeof name === 'string') name = { type: 'default', value: name }\n          return { name, stmt };\n        },\n      peg$c19 = function(cte, sv, d, c, f, fs, w, g, h, o, l, win) {\n            if(Array.isArray(f)) f.forEach(info => info.table && tableList.add(`select::${info.db}::${info.table}`));\n            return {\n                type: 'select',\n                as_struct_val: sv,\n                distinct: d,\n                columns: c,\n                from: f,\n                for_sys_time_as_of: fs,\n                where: w,\n                with: cte,\n                groupby: g,\n                having: h,\n                orderby: o,\n                limit: l,\n                window:win,\n            };\n        },\n      peg$c20 = \"for\",\n      peg$c21 = peg$literalExpectation(\"FOR\", true),\n      peg$c22 = \"system_time\",\n      peg$c23 = peg$literalExpectation(\"SYSTEM_TIME\", true),\n      peg$c24 = \"as\",\n      peg$c25 = peg$literalExpectation(\"AS\", true),\n      peg$c26 = \"of\",\n      peg$c27 = peg$literalExpectation(\"OF\", true),\n      peg$c28 = function(e) {\n          return {\n            keyword: 'for system_time as of',\n            expr: e\n          }\n        },\n      peg$c29 = function(a, k) {\n          return `${a[0].toLowerCase()} ${k.toLowerCase()}`\n        },\n      peg$c30 = function(e, alias) {\n            return { expr: e, as:alias };\n          },\n      peg$c31 = \"replace\",\n      peg$c32 = peg$literalExpectation(\"REPLACE\", true),\n      peg$c33 = function(k, c) {\n          columnList.add('select::null::(.*)')\n          return {\n            expr_list: c,\n            parentheses: true,\n            star: '*',\n            type: k.toLowerCase(),\n          }\n        },\n      peg$c34 = function(head, tail) {\n            columnList.add('select::null::(.*)');\n            if (tail && tail.length > 0) {\n              head[0] = {\n                expr: {\n                  type: 'column_ref',\n                  table: null,\n                  column: '*'\n                },\n                as: null\n              };\n              return createList(head[0], tail);\n            }\n            return head[0];\n          },\n      peg$c35 = function(c) {\n          return c\n        },\n      peg$c36 = function(n, t, l) {\n          return {\n            expr: n,\n            offset: `[${t}(${l.value})]`\n          }\n        },\n      peg$c37 = function(tbl, pro) {\n            columnList.add(`select::${tbl}::(.*)`)\n            let column = '*'\n            const mid = pro && pro[0]\n            if (typeof mid === 'string') column = `${mid}.*`\n            if (mid && mid.expr && mid.offset) column = { ...mid, suffix: '.*' }\n            return {\n              expr: {\n                type: 'column_ref',\n                table: tbl,\n                column,\n              },\n              as: null\n            }\n          },\n      peg$c38 = function(c, as) {\n          return {\n              expr: {\n                type: 'column_ref',\n                table: null,\n                column: c\n              },\n              as: as\n            }\n        },\n      peg$c39 = function(i) { return i; },\n      peg$c40 = \"unnest\",\n      peg$c41 = peg$literalExpectation(\"UNNEST\", true),\n      peg$c42 = function(a, alias, wf) {\n          return {\n            type: 'unnest',\n            expr: a,\n            parentheses: true,\n            as:alias,\n            with_offset: wf,\n          }\n        },\n      peg$c43 = function(l) {\n          return l\n        },\n      peg$c44 = function(alias) {\n          return {\n            keyword: 'with offset as',\n            as: alias\n          }\n        },\n      peg$c45 = function(head, tail) {\n            return [head, tail]\n          },\n      peg$c46 = function(head, tail) {\n            tail.unshift(head);\n            tail.forEach(tableInfo => {\n              const { table, as } = tableInfo\n              tableAlias[table] = table\n              if (as) tableAlias[as] = table\n              refreshColumnList(columnList)\n            })\n            return tail;\n          },\n      peg$c47 = function(t) { return t; },\n      peg$c48 = function(op, t, head, tail) {\n            t.join = op;\n            t.using = createList(head, tail);\n            return t;\n          },\n      peg$c49 = function(op, t, expr) {\n            t.join = op;\n            t.on   = expr;\n            return t;\n          },\n      peg$c50 = function(op, stmt, alias, expr) {\n          stmt.parentheses = true;\n          return {\n            expr: stmt,\n            as: alias,\n            join: op,\n            on: expr\n          };\n        },\n      peg$c51 = function(t, alias) {\n            if (t.type === 'var') {\n              t.as = alias;\n              return t;\n            } else {\n              return {\n                db: t.db,\n                table: t.table,\n                as: alias\n              };\n            }\n          },\n      peg$c52 = function(stmt, alias) {\n            stmt.parentheses = true;\n            return {\n              expr: stmt,\n              as: alias\n            };\n          },\n      peg$c53 = function() { return 'LEFT JOIN'; },\n      peg$c54 = function() { return 'RIGHT JOIN'; },\n      peg$c55 = function() { return 'FULL JOIN'; },\n      peg$c56 = function(k) { return `${k[0].toUpperCase()} JOIN`; },\n      peg$c57 = function(k) { return k ? `${k[0].toUpperCase()} JOIN` : 'JOIN'; },\n      peg$c58 = function(project, dt, tail) {\n            const obj = { db: null, table: project };\n            if (tail !== null) {\n              obj.db = `${project}.${dt[3]}`;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c59 = function(dt, tail) {\n            const obj = { db: null, table: dt };\n            if (tail !== null) {\n              obj.db = dt;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c60 = function(e) { return e; },\n      peg$c61 = function(e) { return e.value; },\n      peg$c62 = function(l) {\n          return {\n            keyword: 'window',\n            type: 'window',\n            expr: l,\n          }\n        },\n      peg$c63 = function(nw, anw) {\n          return {\n            name: nw,\n            as_window_specification: anw,\n          }\n        },\n      peg$c64 = function(n) { return n },\n      peg$c65 = function(ws) {\n          return {\n            window_specification: ws,\n            parentheses: true\n          }\n        },\n      peg$c66 = function(n, bc, l, w) {\n          return {\n            name: n,\n            partitionby: bc,\n            orderby: l,\n            window_frame_clause: w\n          }\n        },\n      peg$c67 = \"range\",\n      peg$c68 = peg$literalExpectation(\"RANGE\", true),\n      peg$c69 = \"unbounded\",\n      peg$c70 = peg$literalExpectation(\"UNBOUNDED\", true),\n      peg$c71 = \"preceding\",\n      peg$c72 = peg$literalExpectation(\"PRECEDING\", true),\n      peg$c73 = \"current\",\n      peg$c74 = peg$literalExpectation(\"CURRENT\", true),\n      peg$c75 = \"ROW\",\n      peg$c76 = peg$literalExpectation(\"ROW\", false),\n      peg$c77 = function() {\n          return 'range between unbounded preceding and current row'\n        },\n      peg$c78 = \"rows\",\n      peg$c79 = peg$literalExpectation(\"ROWS\", true),\n      peg$c80 = \"following\",\n      peg$c81 = peg$literalExpectation(\"FOLLOWING\", true),\n      peg$c82 = function(s, e) {\n          return `rows between ${s.value} preceding and ${e.value} following`\n        },\n      peg$c83 = function(bc) { return bc; },\n      peg$c84 = function(l) { return l; },\n      peg$c85 = function(e, d) {\n          const obj = { expr: e, type: 'ASC' };\n          if (d === 'DESC') obj.type = 'DESC';\n          return obj;\n        },\n      peg$c86 = function(i1, tail) {\n            const res = [i1];\n            if (tail) res.push(tail[2]);\n            return {\n              seperator: tail && tail[0] && tail[0].toLowerCase() || '',\n              value: res\n            };\n          },\n      peg$c87 = function(head, tail) {\n            const el = { type: 'expr_list' };\n            el.value = createList(head, tail);\n            return el;\n          },\n      peg$c88 = function(c) {\n          return {\n            array_path: c,\n            type: 'array',\n            keyword: '',\n            parentheses: true\n          }\n        },\n      peg$c89 = function(s, c) {\n          return {\n            definition: s,\n            array_path: c.map(l => ({ expr: l, as: null })),\n            type: 'array',\n            keyword: s && 'array',\n            parentheses: true\n          }\n        },\n      peg$c90 = function(s, c) {\n          return {\n            definition: s,\n            expr_list: c,\n            type: 'array',\n            keyword: s && 'array',\n            parentheses: true\n          }\n        },\n      peg$c91 = function(s, c) {\n          return {\n            definition: s,\n            expr_list: c,\n            type: 'struct',\n            keyword: s && 'struct',\n            parentheses: true\n          }\n        },\n      peg$c92 = function(head, tail) {\n          return createBinaryExprChain(head, tail);\n        },\n      peg$c93 = function(op, tail) {\n          return createUnaryExpr(op, tail[0][1]);\n        },\n      peg$c94 = function(head, tail) {\n          let result = head;\n          let seperator = ''\n          for (let i = 0; i < tail.length; i++) {\n            if (tail[i][1] === ',') {\n              seperator = ','\n              if (!Array.isArray(result)) result = [result]\n              result.push(tail[i][3])\n            } else {\n              result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n            }\n          }\n          if (seperator === ',') {\n            const el = { type: 'expr_list' };\n            el.value = result\n            return el\n          }\n          return result;\n        },\n      peg$c95 = function(head, tail) {\n            return createBinaryExprChain(head, tail);\n          },\n      peg$c96 = \"!\",\n      peg$c97 = peg$literalExpectation(\"!\", false),\n      peg$c98 = \"=\",\n      peg$c99 = peg$literalExpectation(\"=\", false),\n      peg$c100 = function(expr) {\n            return createUnaryExpr('NOT', expr);\n          },\n      peg$c101 = function(left, rh) {\n            if (rh === null) return left;\n            else if (rh.type === 'arithmetic') return createBinaryExprChain(left, rh.tail);\n            else return createBinaryExpr(rh.op, left, rh.right);\n          },\n      peg$c102 = function(op, stmt) {\n          stmt.parentheses = true;\n          return createUnaryExpr(op, stmt);\n        },\n      peg$c103 = function(nk) { return nk[0] + ' ' + nk[2]; },\n      peg$c104 = function(l) {\n            return { type: 'arithmetic', tail: l };\n          },\n      peg$c105 = \">=\",\n      peg$c106 = peg$literalExpectation(\">=\", false),\n      peg$c107 = \">\",\n      peg$c108 = peg$literalExpectation(\">\", false),\n      peg$c109 = \"<=\",\n      peg$c110 = peg$literalExpectation(\"<=\", false),\n      peg$c111 = \"<>\",\n      peg$c112 = peg$literalExpectation(\"<>\", false),\n      peg$c113 = \"<\",\n      peg$c114 = peg$literalExpectation(\"<\", false),\n      peg$c115 = \"!=\",\n      peg$c116 = peg$literalExpectation(\"!=\", false),\n      peg$c117 = function(right) {\n            return { op: 'IS', right: right };\n          },\n      peg$c118 = function(right) {\n            return { op: 'IS NOT', right: right };\n        },\n      peg$c119 = function(op, begin, end) {\n            return {\n              op: op,\n              right: {\n                type: 'expr_list',\n                value: [begin, end]\n              }\n            };\n          },\n      peg$c120 = function(op, right) {\n            return { op: op, right: right };\n          },\n      peg$c121 = function(op, l) {\n            return { op: op, right: l };\n          },\n      peg$c122 = function(op, e) {\n            return { op: op, right: e };\n          },\n      peg$c123 = \"+\",\n      peg$c124 = peg$literalExpectation(\"+\", false),\n      peg$c125 = \"-\",\n      peg$c126 = peg$literalExpectation(\"-\", false),\n      peg$c127 = function(head, tail) {\n            return createBinaryExprChain(head, tail)\n          },\n      peg$c128 = \"*\",\n      peg$c129 = peg$literalExpectation(\"*\", false),\n      peg$c130 = \"/\",\n      peg$c131 = peg$literalExpectation(\"/\", false),\n      peg$c132 = \"%\",\n      peg$c133 = peg$literalExpectation(\"%\", false),\n      peg$c134 = function(list) {\n              list.parentheses = true;\n              return list;\n          },\n      peg$c135 = function(e, u) {\n            return {\n              type: 'interval',\n              expr: e,\n              unit: u.toLowerCase(),\n            }\n          },\n      peg$c136 = function(condition_list, otherwise) {\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: null,\n              args: condition_list\n            };\n          },\n      peg$c137 = function(expr, condition_list, otherwise) {\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: expr,\n              args: condition_list\n            };\n          },\n      peg$c138 = function(condition, result) {\n          return {\n            type: 'when',\n            cond: condition,\n            result: result\n          };\n        },\n      peg$c139 = function(result) {\n          return { type: 'else', result: result };\n        },\n      peg$c140 = function(tbl, col) {\n            columnList.add(`select::${tbl}::${col}`);\n            return {\n              type: 'column_ref',\n              table: tbl,\n              column: col\n            };\n          },\n      peg$c141 = function(col) {\n            columnList.add(`select::null::${col}`);\n            return {\n              type: 'column_ref',\n              table: null,\n              column: col\n            };\n          },\n      peg$c142 = function(name) { return reservedMap[name.toUpperCase()] === true; },\n      peg$c143 = function(name) {\n            return name;\n          },\n      peg$c144 = function(name) {\n            if (reservedMap[name.toUpperCase()] === true) throw new Error(\"Error: \"+ JSON.stringify(name)+\" is a reserved word, can not as alias clause\");\n            return false\n          },\n      peg$c145 = \"\\\"\",\n      peg$c146 = peg$literalExpectation(\"\\\"\", false),\n      peg$c147 = /^[^\"]/,\n      peg$c148 = peg$classExpectation([\"\\\"\"], true, false),\n      peg$c149 = function(chars) { return chars.join(''); },\n      peg$c150 = \"'\",\n      peg$c151 = peg$literalExpectation(\"'\", false),\n      peg$c152 = /^[^']/,\n      peg$c153 = peg$classExpectation([\"'\"], true, false),\n      peg$c154 = \"`\",\n      peg$c155 = peg$literalExpectation(\"`\", false),\n      peg$c156 = /^[^`]/,\n      peg$c157 = peg$classExpectation([\"`\"], true, false),\n      peg$c158 = function(chars) { return `\\`${chars.join('')}\\``; },\n      peg$c159 = function(name) {\n          return name;\n        },\n      peg$c160 = function(name) { return name; },\n      peg$c161 = function(start, parts) { return start + parts.join(''); },\n      peg$c162 = /^[A-Za-z_]/,\n      peg$c163 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], \"_\"], false, false),\n      peg$c164 = /^[A-Za-z0-9_]/,\n      peg$c165 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\"], false, false),\n      peg$c166 = /^[A-Za-z0-9_:]/,\n      peg$c167 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \":\"], false, false),\n      peg$c168 = \":\",\n      peg$c169 = peg$literalExpectation(\":\", false),\n      peg$c170 = function(l) {\n            return { type: 'param', value: l[1] };\n          },\n      peg$c171 = function(name, e) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: {\n                expr: e\n              }\n            };\n          },\n      peg$c172 = \"update\",\n      peg$c173 = peg$literalExpectation(\"UPDATE\", true),\n      peg$c174 = function(kw, l) {\n          return {\n            type: 'on update',\n            keyword: kw,\n            parentheses: true,\n            expr: l\n          }\n        },\n      peg$c175 = function(kw) {\n          return {\n            type: 'on update',\n            keyword: kw,\n          }\n        },\n      peg$c176 = function(aws) {\n          return {\n            type: 'window',\n            as_window_specification: aws,\n          }\n        },\n      peg$c177 = function(bc, l) {\n          return {\n            partitionby: bc,\n            orderby: l\n          }\n        },\n      peg$c178 = function(name, arg, bc) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: arg,\n              over: bc\n            };\n          },\n      peg$c179 = function(e) { return { expr: e }; },\n      peg$c180 = function(d, c) { return { distinct: d, expr: c }; },\n      peg$c181 = function(d, c, or) {  c.parentheses = true; return { distinct: d, expr: c, orderby: or }; },\n      peg$c182 = function() { return { type: 'star', value: '*' }; },\n      peg$c183 = function(name, l, bc) {\n          if (l && l.type !== 'expr_list') l = { type: 'expr_list', value: [l] }\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c184 = function(name, l, bc) {\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c185 = function(f, up) {\n          return {\n              type: 'function',\n              name: f,\n              over: up\n          }\n        },\n      peg$c186 = function(dt, tail) {\n            let name = dt\n            if (tail !== null) {\n              name = `${dt}.${tail[3]}`\n            }\n            return name;\n          },\n      peg$c187 = \"century\",\n      peg$c188 = peg$literalExpectation(\"CENTURY\", true),\n      peg$c189 = \"day\",\n      peg$c190 = peg$literalExpectation(\"DAY\", true),\n      peg$c191 = \"decade\",\n      peg$c192 = peg$literalExpectation(\"DECADE\", true),\n      peg$c193 = \"dow\",\n      peg$c194 = peg$literalExpectation(\"DOW\", true),\n      peg$c195 = \"doy\",\n      peg$c196 = peg$literalExpectation(\"DOY\", true),\n      peg$c197 = \"epoch\",\n      peg$c198 = peg$literalExpectation(\"EPOCH\", true),\n      peg$c199 = \"hour\",\n      peg$c200 = peg$literalExpectation(\"HOUR\", true),\n      peg$c201 = \"isodow\",\n      peg$c202 = peg$literalExpectation(\"ISODOW\", true),\n      peg$c203 = \"isoyear\",\n      peg$c204 = peg$literalExpectation(\"ISOYEAR\", true),\n      peg$c205 = \"microseconds\",\n      peg$c206 = peg$literalExpectation(\"MICROSECONDS\", true),\n      peg$c207 = \"millennium\",\n      peg$c208 = peg$literalExpectation(\"MILLENNIUM\", true),\n      peg$c209 = \"milliseconds\",\n      peg$c210 = peg$literalExpectation(\"MILLISECONDS\", true),\n      peg$c211 = \"minute\",\n      peg$c212 = peg$literalExpectation(\"MINUTE\", true),\n      peg$c213 = \"month\",\n      peg$c214 = peg$literalExpectation(\"MONTH\", true),\n      peg$c215 = \"quarter\",\n      peg$c216 = peg$literalExpectation(\"QUARTER\", true),\n      peg$c217 = \"second\",\n      peg$c218 = peg$literalExpectation(\"SECOND\", true),\n      peg$c219 = \"timezone\",\n      peg$c220 = peg$literalExpectation(\"TIMEZONE\", true),\n      peg$c221 = \"timezone_hour\",\n      peg$c222 = peg$literalExpectation(\"TIMEZONE_HOUR\", true),\n      peg$c223 = \"timezone_minute\",\n      peg$c224 = peg$literalExpectation(\"TIMEZONE_MINUTE\", true),\n      peg$c225 = \"week\",\n      peg$c226 = peg$literalExpectation(\"WEEK\", true),\n      peg$c227 = \"year\",\n      peg$c228 = peg$literalExpectation(\"YEAR\", true),\n      peg$c229 = function() {\n          return f\n        },\n      peg$c230 = function(kw, f, t, s) {\n          return {\n              type: kw.toLowerCase(),\n              args: {\n                field: f,\n                cast_type: t,\n                source: s,\n              }\n          }\n        },\n      peg$c231 = function(e, t) {\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: t\n          };\n        },\n      peg$c232 = function(e, precision) {\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: 'DECIMAL(' + precision + ')'\n            }\n          };\n        },\n      peg$c233 = function(e, precision, scale) {\n            return {\n              type: 'cast',\n              expr: e,\n              symbol: 'as',\n              target: {\n                dataType: 'DECIMAL(' + precision + ', ' + scale + ')'\n              }\n            };\n          },\n      peg$c234 = function(e, s, t) { /* MySQL cast to un-/signed integer */\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: s + (t ? ' ' + t: '')\n            }\n          };\n        },\n      peg$c235 = function() {\n            return { type: 'null', value: null };\n          },\n      peg$c236 = function() {\n          return {\n            type: 'not null',\n            value: 'not null',\n          }\n        },\n      peg$c237 = function() {\n            return { type: 'bool', value: true };\n          },\n      peg$c238 = function() {\n            return { type: 'bool', value: false };\n          },\n      peg$c239 = \"r\",\n      peg$c240 = peg$literalExpectation(\"R\", true),\n      peg$c241 = function(r, ca) {\n            return {\n              type: r ? 'regex_string' : 'single_quote_string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c242 = function(r, ca) {\n            return {\n              type: r ? 'regex_string' : 'string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c243 = function(type, ca) {\n            return {\n              type: type.toLowerCase(),\n              value: ca[1].join('')\n            };\n          },\n      peg$c244 = /^[^\"\\\\\\0-\\x1F\\x7F]/,\n      peg$c245 = peg$classExpectation([\"\\\"\", \"\\\\\", [\"\\0\", \"\\x1F\"], \"\\x7F\"], true, false),\n      peg$c246 = /^[^'\\\\]/,\n      peg$c247 = peg$classExpectation([\"'\", \"\\\\\"], true, false),\n      peg$c248 = \"\\\\'\",\n      peg$c249 = peg$literalExpectation(\"\\\\'\", false),\n      peg$c250 = function() { return \"\\\\'\";  },\n      peg$c251 = \"\\\\\\\"\",\n      peg$c252 = peg$literalExpectation(\"\\\\\\\"\", false),\n      peg$c253 = function() { return '\\\\\"';  },\n      peg$c254 = \"\\\\\\\\\",\n      peg$c255 = peg$literalExpectation(\"\\\\\\\\\", false),\n      peg$c256 = function() { return \"\\\\\\\\\"; },\n      peg$c257 = \"\\\\/\",\n      peg$c258 = peg$literalExpectation(\"\\\\/\", false),\n      peg$c259 = function() { return \"\\\\/\";  },\n      peg$c260 = \"\\\\b\",\n      peg$c261 = peg$literalExpectation(\"\\\\b\", false),\n      peg$c262 = function() { return \"\\b\"; },\n      peg$c263 = \"\\\\f\",\n      peg$c264 = peg$literalExpectation(\"\\\\f\", false),\n      peg$c265 = function() { return \"\\f\"; },\n      peg$c266 = \"\\\\n\",\n      peg$c267 = peg$literalExpectation(\"\\\\n\", false),\n      peg$c268 = function() { return \"\\n\"; },\n      peg$c269 = \"\\\\r\",\n      peg$c270 = peg$literalExpectation(\"\\\\r\", false),\n      peg$c271 = function() { return \"\\r\"; },\n      peg$c272 = \"\\\\t\",\n      peg$c273 = peg$literalExpectation(\"\\\\t\", false),\n      peg$c274 = function() { return \"\\t\"; },\n      peg$c275 = \"\\\\u\",\n      peg$c276 = peg$literalExpectation(\"\\\\u\", false),\n      peg$c277 = function(h1, h2, h3, h4) {\n            return String.fromCharCode(parseInt(\"0x\" + h1 + h2 + h3 + h4));\n          },\n      peg$c278 = \"\\\\\",\n      peg$c279 = peg$literalExpectation(\"\\\\\", false),\n      peg$c280 = function() { return \"\\\\\"; },\n      peg$c281 = /^[\\n\\r]/,\n      peg$c282 = peg$classExpectation([\"\\n\", \"\\r\"], false, false),\n      peg$c283 = function(n) {\n            if (n && n.type === 'bigint') return n\n            return { type: 'number', value: n };\n          },\n      peg$c284 = function(int_, frac, exp) {\n          const numStr = int_ + frac + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c285 = function(int_, frac) {\n          const numStr = int_ + frac\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: numStr\n          }\n          return parseFloat(numStr);\n        },\n      peg$c286 = function(int_, exp) {\n          const numStr = int_ + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c287 = function(int_) {\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: int_\n          }\n          return parseFloat(int_);\n        },\n      peg$c288 = function(op, digits) { return \"-\" + digits; },\n      peg$c289 = function(op, digit) { return \"-\" + digit; },\n      peg$c290 = \".\",\n      peg$c291 = peg$literalExpectation(\".\", false),\n      peg$c292 = function(digits) { return \".\" + digits; },\n      peg$c293 = function(e, digits) { return e + digits; },\n      peg$c294 = function(digits) { return digits.join(\"\"); },\n      peg$c295 = /^[0-9]/,\n      peg$c296 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c297 = /^[0-9a-fA-F]/,\n      peg$c298 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"], [\"A\", \"F\"]], false, false),\n      peg$c299 = /^[eE]/,\n      peg$c300 = peg$classExpectation([\"e\", \"E\"], false, false),\n      peg$c301 = /^[+\\-]/,\n      peg$c302 = peg$classExpectation([\"+\", \"-\"], false, false),\n      peg$c303 = function(e, sign) { return e + (sign !== null ? sign: ''); },\n      peg$c304 = \"null\",\n      peg$c305 = peg$literalExpectation(\"NULL\", true),\n      peg$c306 = \"default\",\n      peg$c307 = peg$literalExpectation(\"DEFAULT\", true),\n      peg$c308 = \"not null\",\n      peg$c309 = peg$literalExpectation(\"NOT NULL\", true),\n      peg$c310 = \"true\",\n      peg$c311 = peg$literalExpectation(\"TRUE\", true),\n      peg$c312 = \"to\",\n      peg$c313 = peg$literalExpectation(\"TO\", true),\n      peg$c314 = \"false\",\n      peg$c315 = peg$literalExpectation(\"FALSE\", true),\n      peg$c316 = \"drop\",\n      peg$c317 = peg$literalExpectation(\"DROP\", true),\n      peg$c318 = function() { return 'DROP'; },\n      peg$c319 = \"use\",\n      peg$c320 = peg$literalExpectation(\"USE\", true),\n      peg$c321 = \"select\",\n      peg$c322 = peg$literalExpectation(\"SELECT\", true),\n      peg$c323 = \"if not exists\",\n      peg$c324 = peg$literalExpectation(\"IF NOT EXISTS\", true),\n      peg$c325 = \"RECURSIVE\",\n      peg$c326 = peg$literalExpectation(\"RECURSIVE\", false),\n      peg$c327 = \"ignore\",\n      peg$c328 = peg$literalExpectation(\"IGNORE\", true),\n      peg$c329 = \"explain\",\n      peg$c330 = peg$literalExpectation(\"EXPLAIN\", true),\n      peg$c331 = \"partition\",\n      peg$c332 = peg$literalExpectation(\"PARTITION\", true),\n      peg$c333 = function() { return 'PARTITION' },\n      peg$c334 = \"into\",\n      peg$c335 = peg$literalExpectation(\"INTO\", true),\n      peg$c336 = \"from\",\n      peg$c337 = peg$literalExpectation(\"FROM\", true),\n      peg$c338 = \"set\",\n      peg$c339 = peg$literalExpectation(\"SET\", true),\n      peg$c340 = \"unlock\",\n      peg$c341 = peg$literalExpectation(\"UNLOCK\", true),\n      peg$c342 = \"lock\",\n      peg$c343 = peg$literalExpectation(\"LOCK\", true),\n      peg$c344 = \"table\",\n      peg$c345 = peg$literalExpectation(\"TABLE\", true),\n      peg$c346 = function() { return 'TABLE'; },\n      peg$c347 = \"tables\",\n      peg$c348 = peg$literalExpectation(\"TABLES\", true),\n      peg$c349 = function() { return 'TABLES'; },\n      peg$c350 = \"collate\",\n      peg$c351 = peg$literalExpectation(\"COLLATE\", true),\n      peg$c352 = function() { return 'COLLATE'; },\n      peg$c353 = \"on\",\n      peg$c354 = peg$literalExpectation(\"ON\", true),\n      peg$c355 = \"left\",\n      peg$c356 = peg$literalExpectation(\"LEFT\", true),\n      peg$c357 = \"right\",\n      peg$c358 = peg$literalExpectation(\"RIGHT\", true),\n      peg$c359 = \"full\",\n      peg$c360 = peg$literalExpectation(\"FULL\", true),\n      peg$c361 = \"inner\",\n      peg$c362 = peg$literalExpectation(\"INNER\", true),\n      peg$c363 = \"cross\",\n      peg$c364 = peg$literalExpectation(\"CROSS\", true),\n      peg$c365 = \"join\",\n      peg$c366 = peg$literalExpectation(\"JOIN\", true),\n      peg$c367 = \"outer\",\n      peg$c368 = peg$literalExpectation(\"OUTER\", true),\n      peg$c369 = \"over\",\n      peg$c370 = peg$literalExpectation(\"OVER\", true),\n      peg$c371 = \"union\",\n      peg$c372 = peg$literalExpectation(\"UNION\", true),\n      peg$c373 = \"value\",\n      peg$c374 = peg$literalExpectation(\"VALUE\", true),\n      peg$c375 = function() { return 'VALUE' },\n      peg$c376 = \"values\",\n      peg$c377 = peg$literalExpectation(\"VALUES\", true),\n      peg$c378 = \"using\",\n      peg$c379 = peg$literalExpectation(\"USING\", true),\n      peg$c380 = \"where\",\n      peg$c381 = peg$literalExpectation(\"WHERE\", true),\n      peg$c382 = \"with\",\n      peg$c383 = peg$literalExpectation(\"WITH\", true),\n      peg$c384 = \"group\",\n      peg$c385 = peg$literalExpectation(\"GROUP\", true),\n      peg$c386 = \"by\",\n      peg$c387 = peg$literalExpectation(\"BY\", true),\n      peg$c388 = \"order\",\n      peg$c389 = peg$literalExpectation(\"ORDER\", true),\n      peg$c390 = \"having\",\n      peg$c391 = peg$literalExpectation(\"HAVING\", true),\n      peg$c392 = \"window\",\n      peg$c393 = peg$literalExpectation(\"WINDOW\", true),\n      peg$c394 = \"ordinal\",\n      peg$c395 = peg$literalExpectation(\"ORDINAL\", true),\n      peg$c396 = function() { return 'ORDINAL' },\n      peg$c397 = \"limit\",\n      peg$c398 = peg$literalExpectation(\"LIMIT\", true),\n      peg$c399 = \"offset\",\n      peg$c400 = peg$literalExpectation(\"OFFSET\", true),\n      peg$c401 = function() { return 'OFFSET'; },\n      peg$c402 = \"asc\",\n      peg$c403 = peg$literalExpectation(\"ASC\", true),\n      peg$c404 = function() { return 'ASC'; },\n      peg$c405 = \"desc\",\n      peg$c406 = peg$literalExpectation(\"DESC\", true),\n      peg$c407 = function() { return 'DESC'; },\n      peg$c408 = \"all\",\n      peg$c409 = peg$literalExpectation(\"ALL\", true),\n      peg$c410 = function() { return 'ALL'; },\n      peg$c411 = \"distinct\",\n      peg$c412 = peg$literalExpectation(\"DISTINCT\", true),\n      peg$c413 = function() { return 'DISTINCT';},\n      peg$c414 = \"between\",\n      peg$c415 = peg$literalExpectation(\"BETWEEN\", true),\n      peg$c416 = function() { return 'BETWEEN'; },\n      peg$c417 = \"in\",\n      peg$c418 = peg$literalExpectation(\"IN\", true),\n      peg$c419 = function() { return 'IN'; },\n      peg$c420 = \"is\",\n      peg$c421 = peg$literalExpectation(\"IS\", true),\n      peg$c422 = function() { return 'IS'; },\n      peg$c423 = \"like\",\n      peg$c424 = peg$literalExpectation(\"LIKE\", true),\n      peg$c425 = function() { return 'LIKE'; },\n      peg$c426 = \"exists\",\n      peg$c427 = peg$literalExpectation(\"EXISTS\", true),\n      peg$c428 = function() { return 'EXISTS'; },\n      peg$c429 = \"not\",\n      peg$c430 = peg$literalExpectation(\"NOT\", true),\n      peg$c431 = function() { return 'NOT'; },\n      peg$c432 = \"and\",\n      peg$c433 = peg$literalExpectation(\"AND\", true),\n      peg$c434 = function() { return 'AND'; },\n      peg$c435 = \"or\",\n      peg$c436 = peg$literalExpectation(\"OR\", true),\n      peg$c437 = function() { return 'OR'; },\n      peg$c438 = \"count\",\n      peg$c439 = peg$literalExpectation(\"COUNT\", true),\n      peg$c440 = function() { return 'COUNT'; },\n      peg$c441 = \"max\",\n      peg$c442 = peg$literalExpectation(\"MAX\", true),\n      peg$c443 = function() { return 'MAX'; },\n      peg$c444 = \"min\",\n      peg$c445 = peg$literalExpectation(\"MIN\", true),\n      peg$c446 = function() { return 'MIN'; },\n      peg$c447 = \"sum\",\n      peg$c448 = peg$literalExpectation(\"SUM\", true),\n      peg$c449 = function() { return 'SUM'; },\n      peg$c450 = \"avg\",\n      peg$c451 = peg$literalExpectation(\"AVG\", true),\n      peg$c452 = function() { return 'AVG'; },\n      peg$c453 = \"extract\",\n      peg$c454 = peg$literalExpectation(\"EXTRACT\", true),\n      peg$c455 = function() { return 'EXTRACT'; },\n      peg$c456 = \"call\",\n      peg$c457 = peg$literalExpectation(\"CALL\", true),\n      peg$c458 = function() { return 'CALL'; },\n      peg$c459 = \"case\",\n      peg$c460 = peg$literalExpectation(\"CASE\", true),\n      peg$c461 = \"when\",\n      peg$c462 = peg$literalExpectation(\"WHEN\", true),\n      peg$c463 = \"then\",\n      peg$c464 = peg$literalExpectation(\"THEN\", true),\n      peg$c465 = \"else\",\n      peg$c466 = peg$literalExpectation(\"ELSE\", true),\n      peg$c467 = \"end\",\n      peg$c468 = peg$literalExpectation(\"END\", true),\n      peg$c469 = \"cast\",\n      peg$c470 = peg$literalExpectation(\"CAST\", true),\n      peg$c471 = \"array\",\n      peg$c472 = peg$literalExpectation(\"ARRAY\", true),\n      peg$c473 = function() { return 'ARRAY'; },\n      peg$c474 = \"bytes\",\n      peg$c475 = peg$literalExpectation(\"BYTES\", true),\n      peg$c476 = function() { return 'BYTES'; },\n      peg$c477 = \"bool\",\n      peg$c478 = peg$literalExpectation(\"BOOL\", true),\n      peg$c479 = function() { return 'BOOL'; },\n      peg$c480 = \"char\",\n      peg$c481 = peg$literalExpectation(\"CHAR\", true),\n      peg$c482 = function() { return 'CHAR'; },\n      peg$c483 = \"geography\",\n      peg$c484 = peg$literalExpectation(\"GEOGRAPHY\", true),\n      peg$c485 = function() { return 'GEOGRAPHY'; },\n      peg$c486 = \"varchar\",\n      peg$c487 = peg$literalExpectation(\"VARCHAR\", true),\n      peg$c488 = function() { return 'VARCHAR';},\n      peg$c489 = \"numeric\",\n      peg$c490 = peg$literalExpectation(\"NUMERIC\", true),\n      peg$c491 = function() { return 'NUMERIC'; },\n      peg$c492 = \"decimal\",\n      peg$c493 = peg$literalExpectation(\"DECIMAL\", true),\n      peg$c494 = function() { return 'DECIMAL'; },\n      peg$c495 = \"signed\",\n      peg$c496 = peg$literalExpectation(\"SIGNED\", true),\n      peg$c497 = function() { return 'SIGNED'; },\n      peg$c498 = \"unsigned\",\n      peg$c499 = peg$literalExpectation(\"UNSIGNED\", true),\n      peg$c500 = function() { return 'UNSIGNED'; },\n      peg$c501 = \"int64\",\n      peg$c502 = peg$literalExpectation(\"INT64\", true),\n      peg$c503 = function() { return 'INT64'; },\n      peg$c504 = \"zerofill\",\n      peg$c505 = peg$literalExpectation(\"ZEROFILL\", true),\n      peg$c506 = function() { return 'ZEROFILL'; },\n      peg$c507 = \"integer\",\n      peg$c508 = peg$literalExpectation(\"INTEGER\", true),\n      peg$c509 = function() { return 'INTEGER'; },\n      peg$c510 = \"json\",\n      peg$c511 = peg$literalExpectation(\"JSON\", true),\n      peg$c512 = function() { return 'JSON'; },\n      peg$c513 = \"smallint\",\n      peg$c514 = peg$literalExpectation(\"SMALLINT\", true),\n      peg$c515 = function() { return 'SMALLINT'; },\n      peg$c516 = \"string\",\n      peg$c517 = peg$literalExpectation(\"STRING\", true),\n      peg$c518 = function() { return 'STRING'; },\n      peg$c519 = \"struct\",\n      peg$c520 = peg$literalExpectation(\"STRUCT\", true),\n      peg$c521 = function() { return 'STRUCT'; },\n      peg$c522 = \"tinyint\",\n      peg$c523 = peg$literalExpectation(\"TINYINT\", true),\n      peg$c524 = function() { return 'TINYINT'; },\n      peg$c525 = \"tinytext\",\n      peg$c526 = peg$literalExpectation(\"TINYTEXT\", true),\n      peg$c527 = function() { return 'TINYTEXT'; },\n      peg$c528 = \"text\",\n      peg$c529 = peg$literalExpectation(\"TEXT\", true),\n      peg$c530 = function() { return 'TEXT'; },\n      peg$c531 = \"mediumtext\",\n      peg$c532 = peg$literalExpectation(\"MEDIUMTEXT\", true),\n      peg$c533 = function() { return 'MEDIUMTEXT'; },\n      peg$c534 = \"longtext\",\n      peg$c535 = peg$literalExpectation(\"LONGTEXT\", true),\n      peg$c536 = function() { return 'LONGTEXT'; },\n      peg$c537 = \"bigint\",\n      peg$c538 = peg$literalExpectation(\"BIGINT\", true),\n      peg$c539 = function() { return 'BIGINT'; },\n      peg$c540 = \"float64\",\n      peg$c541 = peg$literalExpectation(\"FLOAT64\", true),\n      peg$c542 = function() { return 'FLOAT64'; },\n      peg$c543 = \"double\",\n      peg$c544 = peg$literalExpectation(\"DOUBLE\", true),\n      peg$c545 = function() { return 'DOUBLE'; },\n      peg$c546 = \"date\",\n      peg$c547 = peg$literalExpectation(\"DATE\", true),\n      peg$c548 = function() { return 'DATE'; },\n      peg$c549 = \"datetime\",\n      peg$c550 = peg$literalExpectation(\"DATETIME\", true),\n      peg$c551 = function() { return 'DATETIME'; },\n      peg$c552 = \"time\",\n      peg$c553 = peg$literalExpectation(\"TIME\", true),\n      peg$c554 = function() { return 'TIME'; },\n      peg$c555 = \"timestamp\",\n      peg$c556 = peg$literalExpectation(\"TIMESTAMP\", true),\n      peg$c557 = function() { return 'TIMESTAMP'; },\n      peg$c558 = \"truncate\",\n      peg$c559 = peg$literalExpectation(\"TRUNCATE\", true),\n      peg$c560 = function() { return 'TRUNCATE'; },\n      peg$c561 = \"user\",\n      peg$c562 = peg$literalExpectation(\"USER\", true),\n      peg$c563 = function() { return 'USER'; },\n      peg$c564 = \"current_date\",\n      peg$c565 = peg$literalExpectation(\"CURRENT_DATE\", true),\n      peg$c566 = function() { return 'CURRENT_DATE'; },\n      peg$c567 = \"adddate\",\n      peg$c568 = peg$literalExpectation(\"ADDDATE\", true),\n      peg$c569 = function() { return 'ADDDATE'; },\n      peg$c570 = \"interval\",\n      peg$c571 = peg$literalExpectation(\"INTERVAL\", true),\n      peg$c572 = function() { return 'INTERVAL'; },\n      peg$c573 = function() { return 'YEAR'; },\n      peg$c574 = function() { return 'MONTH'; },\n      peg$c575 = function() { return 'DAY'; },\n      peg$c576 = function() { return 'HOUR'; },\n      peg$c577 = function() { return 'MINUTE'; },\n      peg$c578 = function() { return 'SECOND'; },\n      peg$c579 = \"current_time\",\n      peg$c580 = peg$literalExpectation(\"CURRENT_TIME\", true),\n      peg$c581 = function() { return 'CURRENT_TIME'; },\n      peg$c582 = \"current_timestamp\",\n      peg$c583 = peg$literalExpectation(\"CURRENT_TIMESTAMP\", true),\n      peg$c584 = function() { return 'CURRENT_TIMESTAMP'; },\n      peg$c585 = \"global\",\n      peg$c586 = peg$literalExpectation(\"GLOBAL\", true),\n      peg$c587 = function() { return 'GLOBAL'; },\n      peg$c588 = \"session\",\n      peg$c589 = peg$literalExpectation(\"SESSION\", true),\n      peg$c590 = function() { return 'SESSION'; },\n      peg$c591 = \"local\",\n      peg$c592 = peg$literalExpectation(\"LOCAL\", true),\n      peg$c593 = function() { return 'LOCAL'; },\n      peg$c594 = \"persist\",\n      peg$c595 = peg$literalExpectation(\"PERSIST\", true),\n      peg$c596 = function() { return 'PERSIST'; },\n      peg$c597 = \"persist_only\",\n      peg$c598 = peg$literalExpectation(\"PERSIST_ONLY\", true),\n      peg$c599 = function() { return 'PERSIST_ONLY'; },\n      peg$c600 = \"add\",\n      peg$c601 = peg$literalExpectation(\"ADD\", true),\n      peg$c602 = function() { return 'ADD'; },\n      peg$c603 = \"column\",\n      peg$c604 = peg$literalExpectation(\"COLUMN\", true),\n      peg$c605 = function() { return 'COLUMN'; },\n      peg$c606 = \"index\",\n      peg$c607 = peg$literalExpectation(\"INDEX\", true),\n      peg$c608 = function() { return 'INDEX'; },\n      peg$c609 = \"key\",\n      peg$c610 = peg$literalExpectation(\"KEY\", true),\n      peg$c611 = function() { return 'KEY'; },\n      peg$c612 = \"fulltext\",\n      peg$c613 = peg$literalExpectation(\"FULLTEXT\", true),\n      peg$c614 = function() { return 'FULLTEXT'; },\n      peg$c615 = \"unique\",\n      peg$c616 = peg$literalExpectation(\"UNIQUE\", true),\n      peg$c617 = function() { return 'UNIQUE'; },\n      peg$c618 = \"comment\",\n      peg$c619 = peg$literalExpectation(\"COMMENT\", true),\n      peg$c620 = function() { return 'COMMENT'; },\n      peg$c621 = \"constraint\",\n      peg$c622 = peg$literalExpectation(\"CONSTRAINT\", true),\n      peg$c623 = function() { return 'CONSTRAINT'; },\n      peg$c624 = \"references\",\n      peg$c625 = peg$literalExpectation(\"REFERENCES\", true),\n      peg$c626 = function() { return 'REFERENCES'; },\n      peg$c627 = \",\",\n      peg$c628 = peg$literalExpectation(\",\", false),\n      peg$c629 = \"[\",\n      peg$c630 = peg$literalExpectation(\"[\", false),\n      peg$c631 = \"]\",\n      peg$c632 = peg$literalExpectation(\"]\", false),\n      peg$c633 = \";\",\n      peg$c634 = peg$literalExpectation(\";\", false),\n      peg$c635 = \"||\",\n      peg$c636 = peg$literalExpectation(\"||\", false),\n      peg$c637 = \"&&\",\n      peg$c638 = peg$literalExpectation(\"&&\", false),\n      peg$c639 = \"/*\",\n      peg$c640 = peg$literalExpectation(\"/*\", false),\n      peg$c641 = \"*/\",\n      peg$c642 = peg$literalExpectation(\"*/\", false),\n      peg$c643 = \"--\",\n      peg$c644 = peg$literalExpectation(\"--\", false),\n      peg$c645 = \"#\",\n      peg$c646 = peg$literalExpectation(\"#\", false),\n      peg$c647 = peg$anyExpectation(),\n      peg$c648 = /^[ \\t\\n\\r]/,\n      peg$c649 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n      peg$c650 = function(n) { return DATA_TYPES[n.toUpperCase()] === true; },\n      peg$c651 = function(n) {\n            return n\n          },\n      peg$c652 = function(n, t) {\n          return {\n            field_name: n,\n            field_type: t,\n          }\n        },\n      peg$c653 = function(t) { return { dataType: t }; },\n      peg$c654 = function(t, l) { return { dataType: t, length: parseInt(l.join(''), 10) }; },\n      peg$c655 = function(t, a) {\n          return {\n            dataType: t,\n            definition: a,\n            anglebracket: true\n          }\n        },\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsestart() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemultiple_stmt();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parsequery_statement();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiple_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsequery_statement();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseSEMICOLON();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsequery_statement();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseSEMICOLON();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsequery_statement();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_statement() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parsequery_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewith_clause();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseunion_stmt();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parselimit_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseSEMICOLON();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c7(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_op() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UNION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ALL();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_DISTINCT();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c8(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c9) {\n        s1 = input.substr(peg$currPos, 9);\n        peg$currPos += 9;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c10); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c11) {\n          s1 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c12); }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_DISTINCT();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c13(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseunion_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseunion_stmt_nake();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c14(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseselect_stmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseset_op();\n        if (s5 === peg$FAILED) {\n          s5 = null;\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseselect_stmt();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseset_op();\n          if (s5 === peg$FAILED) {\n            s5 = null;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseselect_stmt();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c15(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseselect_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecte_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecte_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecte_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c17(s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral_string();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseident_name();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseunion_stmt();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c18(s1, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsewith_clause();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_SELECT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse___();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsestruct_value();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseKW_ALL();\n                  if (s8 === peg$FAILED) {\n                    s8 = peg$parseKW_DISTINCT();\n                  }\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parsecolumn_clause();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parsefrom_clause();\n                          if (s12 === peg$FAILED) {\n                            s12 = null;\n                          }\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parse__();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parsefor_sys_time_as_of();\n                              if (s14 === peg$FAILED) {\n                                s14 = null;\n                              }\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parse__();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parsewhere_clause();\n                                  if (s16 === peg$FAILED) {\n                                    s16 = null;\n                                  }\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parse__();\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parsegroup_by_clause();\n                                      if (s18 === peg$FAILED) {\n                                        s18 = null;\n                                      }\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parse__();\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parsehaving_clause();\n                                          if (s20 === peg$FAILED) {\n                                            s20 = null;\n                                          }\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parse__();\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parseorder_by_clause();\n                                              if (s22 === peg$FAILED) {\n                                                s22 = null;\n                                              }\n                                              if (s22 !== peg$FAILED) {\n                                                s23 = peg$parse__();\n                                                if (s23 !== peg$FAILED) {\n                                                  s24 = peg$parselimit_clause();\n                                                  if (s24 === peg$FAILED) {\n                                                    s24 = null;\n                                                  }\n                                                  if (s24 !== peg$FAILED) {\n                                                    s25 = peg$parse__();\n                                                    if (s25 !== peg$FAILED) {\n                                                      s26 = peg$parsewindow_clause();\n                                                      if (s26 === peg$FAILED) {\n                                                        s26 = null;\n                                                      }\n                                                      if (s26 !== peg$FAILED) {\n                                                        peg$savedPos = s0;\n                                                        s1 = peg$c19(s2, s6, s8, s10, s12, s14, s16, s18, s20, s22, s24, s26);\n                                                        s0 = s1;\n                                                      } else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s0;\n                                                      s0 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefor_sys_time_as_of() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c20) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c21); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c22) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c23); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c24) {\n              s5 = input.substr(peg$currPos, 2);\n              peg$currPos += 2;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c25); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c26) {\n                  s7 = input.substr(peg$currPos, 2);\n                  peg$currPos += 2;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c27); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c28(s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_value() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_STRUCT();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_VALUE();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c29(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_alias() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c30(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseSTAR();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c11) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c12); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c31) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c32); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumns_list();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c33(s3, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ALL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        s2 = peg$parseSTAR();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          peg$silentFails++;\n          s4 = peg$parseident_start();\n          peg$silentFails--;\n          if (s4 === peg$FAILED) {\n            s3 = void 0;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            s2 = [s2, s3];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseSTAR();\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseCOMMA();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_list_item();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseCOMMA();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c34(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecolumns_list();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseCOMMA();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c35(s1);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumns_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_list_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_list_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_offset_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLBRAKE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_OFFSET();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_ORDINAL();\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseliteral_numeric();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRBRAKE();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c36(s1, s5, s9);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = peg$parsecolumn_offset_expr();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseident();\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseDOT();\n              if (s7 !== peg$FAILED) {\n                s5 = [s5, s6, s7];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseSTAR();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c37(s1, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn_offset_expr();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsealias_clause();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c38(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseexpr_alias();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_ident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c39(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_AS();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseident();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c39(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrom_unnest_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c40) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c41); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsealias_clause();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsewith_offset();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c42(s5, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrom_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FROM();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c43(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_offset() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OFFSET();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsealias_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c44(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_to_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_to_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_to_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c45(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref_list() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_base();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsetable_ref();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsetable_ref();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c46(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseCOMMA();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsetable_base();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c47(s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsetable_join();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c47(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parsejoin_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_base();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_USING();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident_name();\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      s11 = peg$currPos;\n                      s12 = peg$parse__();\n                      if (s12 !== peg$FAILED) {\n                        s13 = peg$parseCOMMA();\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse__();\n                          if (s14 !== peg$FAILED) {\n                            s15 = peg$parseident_name();\n                            if (s15 !== peg$FAILED) {\n                              s12 = [s12, s13, s14, s15];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s11;\n                        s11 = peg$FAILED;\n                      }\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        s11 = peg$currPos;\n                        s12 = peg$parse__();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parseCOMMA();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse__();\n                            if (s14 !== peg$FAILED) {\n                              s15 = peg$parseident_name();\n                              if (s15 !== peg$FAILED) {\n                                s12 = [s12, s13, s14, s15];\n                                s11 = s12;\n                              } else {\n                                peg$currPos = s11;\n                                s11 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseRPAREN();\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c48(s1, s3, s9, s10);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsejoin_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetable_base();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseon_clause();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c49(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsejoin_op();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseunion_stmt();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsealias_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseon_clause();\n                            if (s11 === peg$FAILED) {\n                              s11 = null;\n                            }\n                            if (s11 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c50(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_base() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c51(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseunion_stmt();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsealias_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c52(s3, s7);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsefrom_unnest_item();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejoin_op() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LEFT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OUTER();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_JOIN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c53();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_RIGHT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_OUTER();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_JOIN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c54();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_FULL();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_OUTER();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseKW_JOIN();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c55();\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CROSS();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_JOIN();\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c56(s1);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseKW_INNER();\n            if (s1 === peg$FAILED) {\n              s1 = null;\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseKW_JOIN();\n                if (s3 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c57(s1);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_name() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseDOT();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseident();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c58(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseident();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c59(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c60(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhere_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHERE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c60(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsegroup_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_GROUP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c61(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsehaving_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_HAVING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c60(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WINDOW();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenamed_window_expr_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c62(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenamed_window_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenamed_window_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenamed_window_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseas_window_specification();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c63(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseas_window_specification() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c64(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsewindow_specification();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c65(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_specification() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsepartition_by_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewindow_frame_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c66(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c67) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c68); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BETWEEN();\n        if (s3 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c69) {\n            s4 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c70); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c71) {\n                s6 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c72); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseKW_AND();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c73) {\n                        s10 = input.substr(peg$currPos, 7);\n                        peg$currPos += 7;\n                      } else {\n                        s10 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          if (input.substr(peg$currPos, 3) === peg$c75) {\n                            s12 = peg$c75;\n                            peg$currPos += 3;\n                          } else {\n                            s12 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c76); }\n                          }\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c77();\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c78) {\n        s1 = input.substr(peg$currPos, 4);\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c79); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_BETWEEN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseliteral_numeric();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  if (input.substr(peg$currPos, 9).toLowerCase() === peg$c71) {\n                    s7 = input.substr(peg$currPos, 9);\n                    peg$currPos += 9;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c72); }\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_AND();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseliteral_numeric();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c80) {\n                                s13 = input.substr(peg$currPos, 9);\n                                peg$currPos += 9;\n                              } else {\n                                s13 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c81); }\n                              }\n                              if (s13 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c82(s5, s11);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsepartition_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PARTITION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c83(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ORDER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c84(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseorder_by_element();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseorder_by_element();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseorder_by_element();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_element() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DESC();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ASC();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c85(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber_or_param() {\n    var s0;\n\n    s0 = peg$parseliteral_numeric();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseparam();\n    }\n\n    return s0;\n  }\n\n  function peg$parselimit_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIMIT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenumber_or_param();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parseCOMMA();\n            if (s6 === peg$FAILED) {\n              s6 = peg$parseKW_OFFSET();\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsenumber_or_param();\n                if (s8 !== peg$FAILED) {\n                  s6 = [s6, s7, s8];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c86(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c87(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr() {\n    var s0;\n\n    s0 = peg$parsestruct_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parselogic_operator_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseor_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseunary_expr();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseselect_stmt();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsearray_expr();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_list_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseparentheses_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseparentheses_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseparentheses_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_clause();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c35(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsearray_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_clause();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c88(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsearray_type();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_ARRAY();\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseLBRAKE();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseliteral_list();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseRBRAKE();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c89(s1, s4);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsearray_type();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_ARRAY();\n        }\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLBRAKE();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseLPAREN();\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseparentheses_list_expr();\n                if (s5 === peg$FAILED) {\n                  s5 = peg$parseexpr();\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRBRAKE();\n                    if (s7 === peg$FAILED) {\n                      s7 = peg$parseRPAREN();\n                    }\n                    if (s7 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c90(s1, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestruct_type();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_STRUCT();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c91(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselogic_operator_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseLOGIC_OPERATOR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLOGIC_OPERATOR();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseprimary();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c92(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunary_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_operator();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseprimary();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseprimary();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c93(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_and_where_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseCOMMA();\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseKW_OR();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseCOMMA();\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c94(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseand_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_OR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseand_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseand_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c95(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseand_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenot_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenot_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenot_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c95(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenot_expr() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$parsecomparison_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexists_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_NOT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 33) {\n            s2 = peg$c96;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c97); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            peg$silentFails++;\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s4 = peg$c98;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c99); }\n            }\n            peg$silentFails--;\n            if (s4 === peg$FAILED) {\n              s3 = void 0;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n              s2 = [s2, s3];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenot_expr();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c100(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecomparison_op_right();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c101(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_string();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecolumn_ref();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexists_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseunion_stmt();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c102(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_EXISTS();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c103(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_EXISTS();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_op_right() {\n    var s0;\n\n    s0 = peg$parsearithmetic_op_right();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsein_op_right();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebetween_op_right();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseis_op_right();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parselike_op_right();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parse__();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parsearithmetic_comparison_operator();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parseadditive_expr();\n          if (s6 !== peg$FAILED) {\n            s3 = [s3, s4, s5, s6];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsearithmetic_comparison_operator();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseadditive_expr();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c104(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_comparison_operator() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c105) {\n      s0 = peg$c105;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c106); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 62) {\n        s0 = peg$c107;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c108); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c109) {\n          s0 = peg$c109;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c110); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c111) {\n            s0 = peg$c111;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c112); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 60) {\n              s0 = peg$c113;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c114); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s0 = peg$c98;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c99); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c115) {\n                  s0 = peg$c115;\n                  peg$currPos += 2;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c116); }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseis_op_right() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_IS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c117(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseKW_IS();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_NOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseadditive_expr();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c118(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebetween_or_not_between_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AND();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c119(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_or_not_between_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_BETWEEN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c103(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_BETWEEN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_LIKE();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c103(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_LIKE();\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_IN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c103(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_IN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op_right() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parselike_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsecomparison_expr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c120(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsein_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c121(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsein_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseliteral_string();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c122(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsemultiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsemultiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsemultiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c95(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 43) {\n      s0 = peg$c123;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c124); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s0 = peg$c125;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c126); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseprimary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c127(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c128;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c129); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 47) {\n        s0 = peg$c130;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c131); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s0 = peg$c132;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c133); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseprimary() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parsecast_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseaggr_func();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsefunc_call();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsecase_expr();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseinterval_expr();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsecolumn_ref();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseparam();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    s1 = peg$parseLPAREN();\n                    if (s1 !== peg$FAILED) {\n                      s2 = peg$parse__();\n                      if (s2 !== peg$FAILED) {\n                        s3 = peg$parseor_and_where_expr();\n                        if (s3 !== peg$FAILED) {\n                          s4 = peg$parse__();\n                          if (s4 !== peg$FAILED) {\n                            s5 = peg$parseRPAREN();\n                            if (s5 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c134(s3);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INTERVAL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseinterval_unit();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c135(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CASE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsecase_when_then();\n        if (s4 !== peg$FAILED) {\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parsecase_when_then();\n          }\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecase_else();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_END();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_CASE();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c136(s3, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CASE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseexpr();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$parsecase_when_then();\n              if (s6 !== peg$FAILED) {\n                while (s6 !== peg$FAILED) {\n                  s5.push(s6);\n                  s6 = peg$parsecase_when_then();\n                }\n              } else {\n                s5 = peg$FAILED;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsecase_else();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_END();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseKW_CASE();\n                          if (s11 === peg$FAILED) {\n                            s11 = null;\n                          }\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c137(s3, s5, s7);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_when_then() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHEN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_THEN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c138(s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_else() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ELSE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c139(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_without_kw();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c140(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c141(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c142(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c143(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c143(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_ident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c144(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c143(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c143(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequoted_ident() {\n    var s0;\n\n    s0 = peg$parsedouble_quoted_ident();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsesingle_quoted_ident();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebackticks_quoted_ident();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedouble_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s1 = peg$c145;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c146); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c147.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c148); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c147.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c148); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s3 = peg$c145;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c146); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c149(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c150;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c151); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c152.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c153); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c152.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c153); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s3 = peg$c150;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c151); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c149(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebackticks_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 96) {\n      s1 = peg$c154;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c155); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c156.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c157); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c156.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c157); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 96) {\n          s3 = peg$c154;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c155); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c158(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_without_kw() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c159(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c142(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c160(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsecolumn_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsecolumn_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c161(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseident_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parseident_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c161(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_start() {\n    var s0;\n\n    if (peg$c162.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c163); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_part() {\n    var s0;\n\n    if (peg$c164.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c165); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_part() {\n    var s0;\n\n    if (peg$c166.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c167); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparam() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 58) {\n      s2 = peg$c168;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c169); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseident_name();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c170(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseaggr_func() {\n    var s0;\n\n    s0 = peg$parseaggr_fun_count();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseaggr_fun_smma();\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_smma() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SUM_MAX_MIN_AVG();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseadditive_expr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c171(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM_MAX_MIN_AVG() {\n    var s0;\n\n    s0 = peg$parseKW_SUM();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_MAX();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_MIN();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_AVG();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_update_current_timestamp() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c172) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c173); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_CURRENT_TIMESTAMP();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr_list();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c174(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ON();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c172) {\n            s3 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c173); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_CURRENT_TIMESTAMP();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c175(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseover_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_OVER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseas_window_specification();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c176(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_OVER();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepartition_by_clause();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseorder_by_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseRPAREN();\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c177(s5, s7);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseon_update_current_timestamp();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_count() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COUNT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecount_arg();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c178(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecount_arg() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestar_expr();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c179(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DISTINCT();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecolumn_ref();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c180(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_DISTINCT();\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseorder_by_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c181(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestar_expr() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s1 = peg$c128;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c129); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c182();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsefunc_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$parseextract_func();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseproc_func_name();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseor_and_where_expr();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseRPAREN();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseover_partition();\n                      if (s9 === peg$FAILED) {\n                        s9 = null;\n                      }\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c183(s1, s5, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsescalar_func();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr_list();\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseover_partition();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c184(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CURRENT_TIMESTAMP();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseon_update_current_timestamp();\n              if (s3 === peg$FAILED) {\n                s3 = null;\n              }\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c185(s1, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_name() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c186(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsescalar_func() {\n    var s0;\n\n    s0 = peg$parseKW_CURRENT_DATE();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_CURRENT_TIME();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_CURRENT_TIMESTAMP();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_filed() {\n    var s0, s1;\n\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c187) {\n      s0 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c188); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c189) {\n        s0 = input.substr(peg$currPos, 3);\n        peg$currPos += 3;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c190); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c191) {\n          s0 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c192); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c193) {\n            s0 = input.substr(peg$currPos, 3);\n            peg$currPos += 3;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c194); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c195) {\n              s0 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c196); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c197) {\n                s0 = input.substr(peg$currPos, 5);\n                peg$currPos += 5;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c198); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c199) {\n                  s0 = input.substr(peg$currPos, 4);\n                  peg$currPos += 4;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c200); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c201) {\n                    s0 = input.substr(peg$currPos, 6);\n                    peg$currPos += 6;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c202); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c203) {\n                      s0 = input.substr(peg$currPos, 7);\n                      peg$currPos += 7;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c204); }\n                    }\n                    if (s0 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c205) {\n                        s0 = input.substr(peg$currPos, 12);\n                        peg$currPos += 12;\n                      } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c206); }\n                      }\n                      if (s0 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c207) {\n                          s0 = input.substr(peg$currPos, 10);\n                          peg$currPos += 10;\n                        } else {\n                          s0 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c208); }\n                        }\n                        if (s0 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 12).toLowerCase() === peg$c209) {\n                            s0 = input.substr(peg$currPos, 12);\n                            peg$currPos += 12;\n                          } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c210); }\n                          }\n                          if (s0 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c211) {\n                              s0 = input.substr(peg$currPos, 6);\n                              peg$currPos += 6;\n                            } else {\n                              s0 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c212); }\n                            }\n                            if (s0 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c213) {\n                                s0 = input.substr(peg$currPos, 5);\n                                peg$currPos += 5;\n                              } else {\n                                s0 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c214); }\n                              }\n                              if (s0 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c215) {\n                                  s0 = input.substr(peg$currPos, 7);\n                                  peg$currPos += 7;\n                                } else {\n                                  s0 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c216); }\n                                }\n                                if (s0 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c217) {\n                                    s0 = input.substr(peg$currPos, 6);\n                                    peg$currPos += 6;\n                                  } else {\n                                    s0 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c218); }\n                                  }\n                                  if (s0 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c219) {\n                                      s0 = input.substr(peg$currPos, 8);\n                                      peg$currPos += 8;\n                                    } else {\n                                      s0 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c220); }\n                                    }\n                                    if (s0 === peg$FAILED) {\n                                      if (input.substr(peg$currPos, 13).toLowerCase() === peg$c221) {\n                                        s0 = input.substr(peg$currPos, 13);\n                                        peg$currPos += 13;\n                                      } else {\n                                        s0 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c222); }\n                                      }\n                                      if (s0 === peg$FAILED) {\n                                        if (input.substr(peg$currPos, 15).toLowerCase() === peg$c223) {\n                                          s0 = input.substr(peg$currPos, 15);\n                                          peg$currPos += 15;\n                                        } else {\n                                          s0 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c224); }\n                                        }\n                                        if (s0 === peg$FAILED) {\n                                          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c225) {\n                                            s0 = input.substr(peg$currPos, 4);\n                                            peg$currPos += 4;\n                                          } else {\n                                            s0 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c226); }\n                                          }\n                                          if (s0 === peg$FAILED) {\n                                            s0 = peg$currPos;\n                                            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c227) {\n                                              s1 = input.substr(peg$currPos, 4);\n                                              peg$currPos += 4;\n                                            } else {\n                                              s1 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c228); }\n                                            }\n                                            if (s1 !== peg$FAILED) {\n                                              peg$savedPos = s0;\n                                              s1 = peg$c229();\n                                            }\n                                            s0 = s1;\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_func() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_EXTRACT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseextract_filed();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_FROM();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_TIMESTAMP();\n                    if (s9 === peg$FAILED) {\n                      s9 = peg$parseKW_INTERVAL();\n                      if (s9 === peg$FAILED) {\n                        s9 = peg$parseKW_TIME();\n                        if (s9 === peg$FAILED) {\n                          s9 = peg$parseKW_DATE();\n                        }\n                      }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseexpr();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c230(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecast_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CAST();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_AS();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsedata_type();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c231(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CAST();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_AS();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_DECIMAL();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseLPAREN();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              s13 = peg$parseint();\n                              if (s13 !== peg$FAILED) {\n                                s14 = peg$parse__();\n                                if (s14 !== peg$FAILED) {\n                                  s15 = peg$parseRPAREN();\n                                  if (s15 !== peg$FAILED) {\n                                    s16 = peg$parse__();\n                                    if (s16 !== peg$FAILED) {\n                                      s17 = peg$parseRPAREN();\n                                      if (s17 !== peg$FAILED) {\n                                        peg$savedPos = s0;\n                                        s1 = peg$c232(s5, s13);\n                                        s0 = s1;\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_CAST();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseKW_AS();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseKW_DECIMAL();\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseLPAREN();\n                            if (s11 !== peg$FAILED) {\n                              s12 = peg$parse__();\n                              if (s12 !== peg$FAILED) {\n                                s13 = peg$parseint();\n                                if (s13 !== peg$FAILED) {\n                                  s14 = peg$parse__();\n                                  if (s14 !== peg$FAILED) {\n                                    s15 = peg$parseCOMMA();\n                                    if (s15 !== peg$FAILED) {\n                                      s16 = peg$parse__();\n                                      if (s16 !== peg$FAILED) {\n                                        s17 = peg$parseint();\n                                        if (s17 !== peg$FAILED) {\n                                          s18 = peg$parse__();\n                                          if (s18 !== peg$FAILED) {\n                                            s19 = peg$parseRPAREN();\n                                            if (s19 !== peg$FAILED) {\n                                              s20 = peg$parse__();\n                                              if (s20 !== peg$FAILED) {\n                                                s21 = peg$parseRPAREN();\n                                                if (s21 !== peg$FAILED) {\n                                                  peg$savedPos = s0;\n                                                  s1 = peg$c233(s5, s13, s17);\n                                                  s0 = s1;\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CAST();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseLPAREN();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseexpr();\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parse__();\n                    if (s6 !== peg$FAILED) {\n                      s7 = peg$parseKW_AS();\n                      if (s7 !== peg$FAILED) {\n                        s8 = peg$parse__();\n                        if (s8 !== peg$FAILED) {\n                          s9 = peg$parsesignedness();\n                          if (s9 !== peg$FAILED) {\n                            s10 = peg$parse__();\n                            if (s10 !== peg$FAILED) {\n                              s11 = peg$parseKW_INTEGER();\n                              if (s11 === peg$FAILED) {\n                                s11 = null;\n                              }\n                              if (s11 !== peg$FAILED) {\n                                s12 = peg$parse__();\n                                if (s12 !== peg$FAILED) {\n                                  s13 = peg$parseRPAREN();\n                                  if (s13 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c234(s5, s9, s11);\n                                    s0 = s1;\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesignedness() {\n    var s0;\n\n    s0 = peg$parseKW_SIGNED();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNSIGNED();\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral() {\n    var s0;\n\n    s0 = peg$parseliteral_string();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseliteral_bool();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseliteral_null();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseliteral_datetime();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseliteral();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseliteral();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c235();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_not_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NOT_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c236();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_bool() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUE();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c237();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_FALSE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c238();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_string() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c239) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c240); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c150;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c151); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c150;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c151); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c241(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c239) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c240); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c145;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c146); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesingle_quote_char();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesingle_quote_char();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s6 = peg$c145;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c146); }\n              }\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c242(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_datetime() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TIME();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIMESTAMP();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_DATETIME();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c150;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c151); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c150;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c151); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c243(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_TIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATE();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_DATETIME();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c145;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c146); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesingle_quote_char();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesingle_quote_char();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s6 = peg$c145;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c146); }\n              }\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c243(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quote_char() {\n    var s0;\n\n    if (peg$c244.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c245); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_char() {\n    var s0;\n\n    if (peg$c246.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c247); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parseescape_char() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c248) {\n      s1 = peg$c248;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c249); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c250();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c251) {\n        s1 = peg$c251;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c252); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c253();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c254) {\n          s1 = peg$c254;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c255); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c256();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c257) {\n            s1 = peg$c257;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c258); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c259();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c260) {\n              s1 = peg$c260;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c261); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c262();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c263) {\n                s1 = peg$c263;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c264); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c265();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c266) {\n                  s1 = peg$c266;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c267); }\n                }\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c268();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.substr(peg$currPos, 2) === peg$c269) {\n                    s1 = peg$c269;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c270); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c271();\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 2) === peg$c272) {\n                      s1 = peg$c272;\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c273); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c274();\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      if (input.substr(peg$currPos, 2) === peg$c275) {\n                        s1 = peg$c275;\n                        peg$currPos += 2;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c276); }\n                      }\n                      if (s1 !== peg$FAILED) {\n                        s2 = peg$parsehexDigit();\n                        if (s2 !== peg$FAILED) {\n                          s3 = peg$parsehexDigit();\n                          if (s3 !== peg$FAILED) {\n                            s4 = peg$parsehexDigit();\n                            if (s4 !== peg$FAILED) {\n                              s5 = peg$parsehexDigit();\n                              if (s5 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c277(s2, s3, s4, s5);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 92) {\n                          s1 = peg$c278;\n                          peg$currPos++;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c279); }\n                        }\n                        if (s1 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c280();\n                        }\n                        s0 = s1;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_terminator() {\n    var s0;\n\n    if (peg$c281.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c282); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_numeric() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenumber();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c283(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseint();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsefrac();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexp();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c284(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseint();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsefrac();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c285(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseint();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseexp();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c286(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseint();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c287(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseint() {\n    var s0, s1, s2;\n\n    s0 = peg$parsedigits();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedigit();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c125;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c126); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c123;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c124); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsedigits();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c288(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c125;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c126); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s1 = peg$c123;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c124); }\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsedigit();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c289(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrac() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s1 = peg$c290;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c291); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c292(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsee();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c293(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigits() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsedigit();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsedigit();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c294(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedigit() {\n    var s0;\n\n    if (peg$c295.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c296); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsehexDigit() {\n    var s0;\n\n    if (peg$c297.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c298); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsee() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (peg$c299.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c300); }\n    }\n    if (s1 !== peg$FAILED) {\n      if (peg$c301.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c302); }\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c303(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c304) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c305); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DEFAULT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c306) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c307); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c308) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c309); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c310) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c311); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c312) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c313); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FALSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c314) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c315); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DROP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c316) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c317); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c318();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c319) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c320); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SELECT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c321) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c322); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IF_NOT_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c323) {\n      s1 = input.substr(peg$currPos, 13);\n      peg$currPos += 13;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c324); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RECURSIVE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9) === peg$c325) {\n      s1 = peg$c325;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c326); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IGNORE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c327) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c328); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXPLAIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c329) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c330); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PARTITION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c331) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c332); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c333();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c334) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c335); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FROM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c336) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c337); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c338) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c339); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNLOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c340) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c341); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c342) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c343); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c24) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c25); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c344) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c345); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c346();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c347) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c348); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c349();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLLATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c350) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c351); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c352();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c353) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c354); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LEFT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c355) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c356); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RIGHT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c357) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c358); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c359) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c360); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INNER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c361) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c362); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CROSS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c363) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c364); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JOIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c365) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c366); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OUTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c367) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c368); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OVER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c369) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c370); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c371) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c372); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c373) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c374); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c375();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c376) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c377); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c378) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c379); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHERE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c380) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c381); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WITH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c382) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c383); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GROUP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c384) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c385); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c386) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c387); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c388) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c389); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_HAVING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c390) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c391); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WINDOW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c392) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c393); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDINAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c394) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c395); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c396();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIMIT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c397) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c398); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OFFSET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c399) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c400); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c401();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c402) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c403); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c404();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DESC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c405) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c406); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c407();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c408) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c409); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c410();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DISTINCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c411) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c412); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c413();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BETWEEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c414) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c415); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c416();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c417) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c418); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c419();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c420) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c421); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c422();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIKE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c423) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c424); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c425();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c426) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c427); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c428();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c429) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c430); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c431();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c432) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c433); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c434();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c435) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c436); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c437();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COUNT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c438) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c439); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c440();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MAX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c441) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c442); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c443();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c444) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c445); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c446();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c447) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c448); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c449();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AVG() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c450) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c451); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c452();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXTRACT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c453) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c454); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c455();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c456) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c457); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c458();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c459) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c460); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c461) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c462); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_THEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c463) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c464); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ELSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c465) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c466); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_END() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c467) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c468); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CAST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c469) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c470); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ARRAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c471) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c472); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c473();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BYTES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c474) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c475); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c476();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BOOL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c477) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c478); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c479();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c480) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c481); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c482();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GEOGRAPHY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c483) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c484); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c485();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VARCHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c486) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c487); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c488();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NUMERIC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c489) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c490); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c491();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DECIMAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c492) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c493); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c494();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c495) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c496); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c497();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNSIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c498) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c499); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c500();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INT_64() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c501) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c502); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c503();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ZEROFILL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c504) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c505); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c506();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTEGER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c507) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c508); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c509();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JSON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c510) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c511); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c512();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SMALLINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c513) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c514); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c515();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c516) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c517); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c518();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRUCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c519) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c520); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c521();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c522) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c523); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c524();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c525) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c526); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c527();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c528) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c529); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c530();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MEDIUMTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c531) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c532); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c533();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LONGTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c534) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c535); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c536();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BIGINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c537) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c538); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c539();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FLOAT_64() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c540) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c541); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c542();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DOUBLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c543) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c544); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c545();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c546) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c547); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c548();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATETIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c549) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c550); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c551();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c552) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c553); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c554();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c555) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c556); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c557();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUNCATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c558) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c559); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c560();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c561) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c562); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c563();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c564) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c565); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c566();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c567) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c568); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c569();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTERVAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c570) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c571); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c572();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_YEAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c227) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c228); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c573();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MONTH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c213) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c214); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c574();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_DAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c189) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c190); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c575();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_HOUR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c199) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c200); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c576();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MINUTE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c211) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c212); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c577();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_SECOND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c217) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c218); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c578();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c579) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c580); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c581();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c582) {\n      s1 = input.substr(peg$currPos, 17);\n      peg$currPos += 17;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c583); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c584();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GLOBAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c585) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c586); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c587();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c588) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c589); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c590();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c591) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c592); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c593();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c594) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c595); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c596();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST_ONLY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c597) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c598); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c599();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c600) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c601); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c602();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLUMN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c603) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c604); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c605();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INDEX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c606) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c607); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c608();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c609) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c610); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c611();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULLTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c612) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c613); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c614();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIQUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c615) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c616); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c617();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COMMENT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c618) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c619); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c620();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CONSTRAINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c621) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c622); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c623();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REFERENCES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c624) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c625); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c626();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s0 = peg$c290;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c291); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseCOMMA() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c627;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c628); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSTAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c128;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c129); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s0 = peg$c2;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c3); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 41) {\n      s0 = peg$c4;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c5); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLANGLE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 60) {\n      s0 = peg$c113;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c114); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRANGLE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 62) {\n      s0 = peg$c107;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c108); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s0 = peg$c629;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c630); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 93) {\n      s0 = peg$c631;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c632); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSEMICOLON() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 59) {\n      s0 = peg$c633;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c634); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_CONCATENATION() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c635) {\n      s0 = peg$c635;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c636); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_AND() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c637) {\n      s0 = peg$c637;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c638); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLOGIC_OPERATOR() {\n    var s0;\n\n    s0 = peg$parseOPERATOR_CONCATENATION();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseOPERATOR_AND();\n    }\n\n    return s0;\n  }\n\n  function peg$parse__() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsewhitespace();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsecomment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse___() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsewhitespace();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsecomment();\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0;\n\n    s0 = peg$parseblock_comment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseline_comment();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsepound_sign_comment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseblock_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c639) {\n      s1 = peg$c639;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c640); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      if (input.substr(peg$currPos, 2) === peg$c641) {\n        s5 = peg$c641;\n        peg$currPos += 2;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c642); }\n      }\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        if (input.substr(peg$currPos, 2) === peg$c641) {\n          s5 = peg$c641;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c642); }\n        }\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c641) {\n          s3 = peg$c641;\n          peg$currPos += 2;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c642); }\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c643) {\n      s1 = peg$c643;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c644); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepound_sign_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s1 = peg$c645;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c646); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsechar() {\n    var s0;\n\n    if (input.length > peg$currPos) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c647); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_unit() {\n    var s0;\n\n    s0 = peg$parseKW_UNIT_YEAR();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNIT_MONTH();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_UNIT_DAY();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_UNIT_HOUR();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_UNIT_MINUTE();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseKW_UNIT_SECOND();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhitespace() {\n    var s0;\n\n    if (peg$c648.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c649); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOL() {\n    var s0, s1;\n\n    s0 = peg$parseEOF();\n    if (s0 === peg$FAILED) {\n      s0 = [];\n      if (peg$c281.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c282); }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$c281.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c282); }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOF() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    peg$silentFails++;\n    if (input.length > peg$currPos) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c647); }\n    }\n    peg$silentFails--;\n    if (s1 === peg$FAILED) {\n      s0 = void 0;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedata_type_alias();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsedata_type_alias();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsedata_type_alias();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type_alias() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseident_name();\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s3 = peg$c650(s2);\n      if (s3) {\n        s3 = peg$FAILED;\n      } else {\n        s3 = void 0;\n      }\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s1;\n        s2 = peg$c651(s2);\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c652(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type() {\n    var s0;\n\n    s0 = peg$parsestruct_type();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsearray_type();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecharacter_string_type();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsenumeric_type();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsedatetime_type();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsebool_byte_geography_type();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecharacter_string_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_STRING();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c653(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumeric_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NUMERIC();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_INT_64();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_FLOAT_64();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c653(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedatetime_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DATE();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATETIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIME();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c295.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c296); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c295.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c296); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c654(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATETIME();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIME();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_TIMESTAMP();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c653(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebool_byte_geography_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_BYTES();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_BOOL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_GEOGRAPHY();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c653(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearray_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ARRAY();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLANGLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRANGLE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c655(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_STRUCT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLANGLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRANGLE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c655(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n\n    const reservedMap = {\n      'ARRAY': true,\n      'ALTER': true,\n      'ALL': true,\n      'ADD': true,\n      'AND': true,\n      'AS': true,\n      'ASC': true,\n\n      'BETWEEN': true,\n      'BY': true,\n\n      'CALL': true,\n      'CASE': true,\n      'CREATE': true,\n      'CROSS': true,\n      'CONTAINS': true,\n      'CURRENT_DATE': true,\n      'CURRENT_TIME': true,\n      'CURRENT_TIMESTAMP': true,\n      'CURRENT_USER': true,\n\n      'DELETE': true,\n      'DESC': true,\n      'DISTINCT': true,\n      'DROP': true,\n\n      'ELSE': true,\n      'END': true,\n      'EXISTS': true,\n      'EXPLAIN': true,\n\n      'FALSE': true,\n      'FROM': true,\n      'FULL': true,\n      'FOR': true,\n\n      'GROUP': true,\n\n      'HAVING': true,\n\n      'IN': true,\n      'INNER': true,\n      'INSERT': true,\n      'INTO': true,\n      'IS': true,\n\n      'JOIN': true,\n      'JSON': true,\n\n      'KEY': true,\n\n      'LEFT': true,\n      'LIKE': true,\n      'LIMIT': true,\n      'LOW_PRIORITY': true, // for lock table\n\n      'NOT': true,\n      'NULL': true,\n\n      'ON': true,\n      'OR': true,\n      'ORDER': true,\n      'OUTER': true,\n\n      'PARTITION': true,\n\n      'RECURSIVE': true,\n      'RENAME': true,\n      'READ': true, // for lock table\n      'RIGHT': true,\n\n      'SELECT': true,\n      'SESSION_USER': true,\n      'SET': true,\n      'SHOW': true,\n      'SYSTEM_USER': true,\n\n      'TABLE': true,\n      'THEN': true,\n      'TRUE': true,\n      'TRUNCATE': true,\n      'TYPE': true,   // reserved (MySQL)\n\n      'UNION': true,\n      'UPDATE': true,\n      'USING': true,\n\n      'VALUES': true,\n\n      'WINDOW': true,\n      'WITH': true,\n      'WHEN': true,\n      'WHERE': true,\n      'WRITE': true, // for lock table\n\n      'GLOBAL': true,\n      'SESSION': true,\n      'LOCAL': true,\n      'PERSIST': true,\n      'PERSIST_ONLY': true,\n      'UNNEST': true,\n    };\n\n    const DATA_TYPES = {\n      'BOOL': true,\n      'BYTE': true,\n      'DATE': true,\n      'DATETIME': true,\n      'FLOAT64': true,\n      'INT64': true,\n      'NUMERIC': true,\n      'STRING': true,\n      'TIME': true,\n      'TIMESTAMP': true,\n      'ARRAY': true,\n      'STRUCT': true,\n    }\n\n    function createUnaryExpr(op, e) {\n      return {\n        type: 'unary_expr',\n        operator: op,\n        expr: e\n      };\n    }\n\n    function createBinaryExpr(op, left, right) {\n      return {\n        type: 'binary_expr',\n        operator: op,\n        left: left,\n        right: right\n      };\n    }\n\n    function isBigInt(numberStr) {\n      const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER)\n      const num = BigInt(numberStr)\n      if (num < previousMaxSafe) return false\n      return true\n    }\n\n    function createList(head, tail, po = 3) {\n      const result = [head];\n      for (let i = 0; i < tail.length; i++) {\n        delete tail[i][po].tableList\n        delete tail[i][po].columnList\n        result.push(tail[i][po]);\n      }\n      return result;\n    }\n\n    function createBinaryExprChain(head, tail) {\n      let result = head;\n      for (let i = 0; i < tail.length; i++) {\n        result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n      }\n      return result;\n    }\n\n    function queryTableAlias(tableName) {\n      const alias = tableAlias[tableName]\n      if (alias) return alias\n      if (tableName) return tableName\n      return null\n    }\n\n    function columnListTableAlias(columnList) {\n      const newColumnsList = new Set()\n      const symbolChar = '::'\n      for(let column of columnList.keys()) {\n        const columnInfo = column.split(symbolChar)\n        if (!columnInfo) {\n          newColumnsList.add(column)\n          break\n        }\n        if (columnInfo && columnInfo[1]) columnInfo[1] = queryTableAlias(columnInfo[1])\n        newColumnsList.add(columnInfo.join(symbolChar))\n      }\n      return Array.from(newColumnsList)\n    }\n\n    function refreshColumnList(columnList) {\n      const columns = columnListTableAlias(columnList)\n      columnList.clear()\n      columns.forEach(col => columnList.add(col))\n    }\n\n    const cmpPrefixMap = {\n      '+': true,\n      '-': true,\n      '*': true,\n      '/': true,\n      '>': true,\n      '<': true,\n      '!': true,\n      '=': true,\n\n      //between\n      'B': true,\n      'b': true,\n      //for is or in\n      'I': true,\n      'i': true,\n      //for like\n      'L': true,\n      'l': true,\n      //for not\n      'N': true,\n      'n': true\n    };\n\n    // used for dependency analysis\n    let varList = [];\n\n    const tableList = new Set();\n    const columnList = new Set();\n    const tableAlias = {};\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n","module.exports = require(\"big-integer\");","import { parse } from '../pegjs/mysql.pegjs'\n\nexport default {\n  [PARSER_NAME] : parse,\n}\n","import { columnRefToSQL, columnOrderToSQL } from './column'\n\n// const escapeMap = {\n//   '\\0'   : '\\\\0',\n//   '\\''   : '\\\\\\'',\n//   '\"'    : '\\\\\"',\n//   '\\b'   : '\\\\b',\n//   '\\n'   : '\\\\n',\n//   '\\r'   : '\\\\r',\n//   '\\t'   : '\\\\t',\n//   '\\x1a' : '\\\\Z',\n//   // '\\\\'   : '\\\\\\\\',\n// }\n\nconst DEFAULT_OPT = {\n  database : PARSER_NAME || 'mysql',\n  type     : 'table',\n}\n\nlet parserOpt = DEFAULT_OPT\n\nfunction commonOptionConnector(keyword, action, opt) {\n  if (!opt) return\n  if (!keyword) return action(opt)\n  return `${keyword.toUpperCase()} ${action(opt)}`\n}\n\nfunction connector(keyword, str) {\n  if (!str) return\n  return `${keyword.toUpperCase()} ${str}`\n}\n\n/**\n * @param {(Array|boolean|string|number|null)} value\n * @return {Object}\n */\nfunction createValueExpr(value) {\n  const type = typeof value\n  if (Array.isArray(value)) return { type: 'expr_list', value: value.map(createValueExpr) }\n  if (value === null) return { type: 'null', value: null }\n  switch (type) {\n    case 'boolean':\n      return { type: 'bool', value }\n    case 'string':\n      return { type: 'string', value }\n    case 'number':\n      return { type: 'number', value }\n    default:\n      throw new Error(`Cannot convert value \"${type}\" to SQL`)\n  }\n}\n\n/**\n * @param operator\n * @param left\n * @param right\n * @return {Object}\n */\nfunction createBinaryExpr(operator, left, right) {\n  const expr = { operator, type: 'binary_expr' }\n  expr.left = left.type ? left : createValueExpr(left)\n  if (operator === 'BETWEEN' || operator === 'NOT BETWEEN') {\n    expr.right = {\n      type  : 'expr_list',\n      value : [createValueExpr(right[0]), createValueExpr(right[1])],\n    }\n    return expr\n  }\n  expr.right = right.type ? right : createValueExpr(right)\n  return expr\n}\n\n/**\n * Replace param expressions\n *\n * @param {Object} ast    - AST object\n * @param {Object} keys   - Keys = parameter names, values = parameter values\n * @return {Object}     - Newly created AST object\n */\nfunction replaceParamsInner(ast, keys) {\n  Object.keys(ast)\n    .filter(key => {\n      const value = ast[key]\n      return Array.isArray(value) || (typeof value === 'object' && value !== null)\n    })\n    .forEach(key => {\n      const expr = ast[key]\n      if (!(typeof expr === 'object' && expr.type === 'param')) return replaceParamsInner(expr, keys)\n      if (typeof keys[expr.value] === 'undefined') throw new Error(`no value for parameter :${expr.value} found`)\n      ast[key] = createValueExpr(keys[expr.value])\n      return null\n    })\n\n  return ast\n}\n\nfunction escape(str) {\n  return str\n  // const res = []\n  // for (let i = 0, len = str.length; i < len; ++i) {\n  //   let char = str[i]\n  //   const escaped = escapeMap[char]\n  //   if (escaped) char = escaped\n  //   res.push(char)\n  // }\n  // return res.join('')\n}\n\nfunction getParserOpt() {\n  return parserOpt\n}\n\nfunction setParserOpt(opt) {\n  parserOpt = opt\n}\n\nfunction topToSQL(opt) {\n  if (!opt) return\n  const { value, percent } = opt\n  const prefix = `TOP ${value}`\n  if (!percent) return prefix\n  return `${prefix} ${percent.toUpperCase()}`\n}\n\nfunction columnIdentifierToSql(ident) {\n  const { database } = getParserOpt()\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'postgresql':\n    case 'db2':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'mysql':\n    case 'mariadb':\n    case 'bigquery':\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction identifierToSql(ident, isDual) {\n  const { database } = getParserOpt()\n  if (isDual === true) return `'${ident}'`\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'mysql':\n    case 'mariadb':\n    case 'sqlite':\n      return `\\`${ident}\\``\n    case 'postgresql':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'bigquery':\n    case 'db2':\n      return ident\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction commonTypeValue(opt) {\n  const result = []\n  if (!opt) return result\n  const { type, symbol, value } = opt\n  result.push(type.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(value.toUpperCase())\n  return result\n}\n\nfunction toUpper(val) {\n  if (!val) return\n  return val.toUpperCase()\n}\n\nfunction hasVal(val) {\n  return val\n}\n\nfunction literalToSQL(literal) {\n  if (!literal) return\n  const { type, parentheses, value } = literal\n  let str = value\n  switch (type) {\n    case 'string':\n      str = `'${escape(value)}'`\n      break\n    case 'regex_string':\n      str = `r\"${escape(value)}\"`\n      break\n    case 'hex_string':\n      str = `X'${escape(value)}'`\n      break\n    case 'double_quote_string':\n      str = `\"${escape(value)}\"`\n      break\n    case 'single_quote_string':\n      str = `'${value}'`\n      break\n    case 'boolean':\n    case 'bool':\n      str = value ? 'TRUE' : 'FALSE'\n      break\n    case 'null':\n      str = 'NULL'\n      break\n    case 'star':\n      str = '*'\n      break\n    case 'param':\n      str = `:${value}`\n      break\n    case 'origin':\n      str = value.toUpperCase()\n      break\n    case 'date':\n    case 'datetime':\n    case 'time':\n    case 'timestamp':\n      str = `${type.toUpperCase()} '${value}'`\n      break\n    default:\n      break\n  }\n  const { prefix, suffix } = literal\n  const result = []\n  if (prefix) result.push(toUpper(prefix))\n  result.push(str)\n  if (suffix && suffix.collate) result.push(commonTypeValue(suffix.collate).join(' '))\n  str = result.join(' ')\n  return parentheses ? `(${str})` : str\n}\n\nfunction replaceParams(ast, params) {\n  return replaceParamsInner(JSON.parse(JSON.stringify(ast)), params)\n}\n\nfunction onPartitionsToSQL(expr) {\n  const { type, partitions } = expr\n  const result = [\n    toUpper(type),\n    `(${partitions.map(partition => {\n      const { type: partitionType } = partition\n      if (!(partitionType === 'range')) return literalToSQL(partition)\n      const { start, end, symbol } = partition\n      return `${literalToSQL(start)} ${toUpper(symbol)} ${literalToSQL(end)}`\n    }).join(', ')})`,\n  ]\n  return result.join(' ')\n}\n\nfunction arrayStructTypeToSQL(expr) {\n  if (!expr) return\n  const { dataType, definition, anglebracket } = expr\n  const dataTypeUpper = toUpper(dataType)\n  const isNotArrayOrStruct = dataTypeUpper !== 'ARRAY' && dataTypeUpper !== 'STRUCT'\n  if (isNotArrayOrStruct) return dataTypeUpper\n  const result = definition && definition.map(field => {\n    const {\n      field_name: fieldName, field_type: fieldType,\n    } = field\n    const fieldResult = [fieldName, arrayStructTypeToSQL(fieldType)]\n    return fieldResult.filter(hasVal).join(' ')\n  }).join(', ')\n  return anglebracket ? `${dataTypeUpper}<${result}>` : `${dataTypeUpper} ${result}`\n}\n\nfunction commentToSQL(comment) {\n  if (!comment) return\n  const result = []\n  const { keyword, symbol, value } = comment\n  result.push(keyword.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(literalToSQL(value))\n  return result.join(' ')\n}\n\nfunction triggerEventToSQL(events) {\n  return events.map(event => {\n    const { keyword: kw, args } = event\n    const result = [toUpper(kw)]\n    if (args) {\n      const { keyword: kwArgs, columns } = args\n      result.push(toUpper(kwArgs), columns.map(columnRefToSQL).join(', '))\n    }\n    return result.join(' ')\n  }).join(' OR ')\n}\n\nfunction returningToSQL(returning) {\n  if (!returning) return ''\n  const { columns } = returning\n  return ['RETURNING', columns.map(columnRefToSQL).filter(hasVal).join(', ')].join(' ')\n}\n\nfunction commonKeywordArgsToSQL(kwArgs) {\n  if (!kwArgs) return []\n  return [toUpper(kwArgs.keyword), toUpper(kwArgs.args)]\n}\n\nfunction autoIncreatementToSQL(autoIncreatement) {\n  if (!autoIncreatement || typeof autoIncreatement === 'string') return toUpper(autoIncreatement)\n  const { keyword, seed, increment, parentheses } = autoIncreatement\n  let result = toUpper(keyword)\n  if (parentheses) result += `(${literalToSQL(seed)}, ${literalToSQL(increment)})`\n  return result\n}\n\nfunction columnOrderListToSQL(columnOrderList) {\n  if (!columnOrderList) return\n  return columnOrderList.map(columnOrderToSQL).filter(hasVal).join(', ')\n}\n\nexport {\n  arrayStructTypeToSQL, autoIncreatementToSQL,\n  columnOrderListToSQL, commonKeywordArgsToSQL, commonOptionConnector,\n  connector, commonTypeValue,commentToSQL, createBinaryExpr,\n  createValueExpr, DEFAULT_OPT, escape, literalToSQL, columnIdentifierToSql,\n  identifierToSql, onPartitionsToSQL, replaceParams, returningToSQL,\n  hasVal, setParserOpt, toUpper, topToSQL, triggerEventToSQL,\n}\n","import { hasVal, toUpper } from './util'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { overToSQL } from './over'\n\nfunction windowSpecificationToSQL(windowSpec) {\n  const {\n    name,\n    partitionby,\n    orderby,\n    window_frame_clause: windowFrame,\n  } = windowSpec\n  const result = [\n    name,\n    orderOrPartitionByToSQL(partitionby, 'partition by'),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    toUpper(windowFrame),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction asWindowSpecToSQL(asWindowSpec) {\n  if (typeof asWindowSpec === 'string') return asWindowSpec\n  const { window_specification: windowSpec } = asWindowSpec\n  return `(${windowSpecificationToSQL(windowSpec)})`\n}\n\nfunction namedWindowExprToSQL(namedWindowExpr) {\n  const { name, as_window_specification: asWindowSpec } = namedWindowExpr\n  return `${name} AS ${asWindowSpecToSQL(asWindowSpec)}`\n}\n\nfunction namedWindowExprListToSQL(namedWindowExprInfo) {\n  const { expr } = namedWindowExprInfo\n  return expr.map(namedWindowExprToSQL).join(', ')\n}\n\nfunction isConsiderNullsInArgs(fnName) {\n  // position of IGNORE/RESPECT NULLS varies by function\n  switch (toUpper(fnName)) {\n    case 'NTH_VALUE':\n    case 'LEAD':\n    case 'LAG':\n      return false\n    default:\n      return true\n  }\n}\n\nfunction constructArgsList(expr) {\n  const { args, name, consider_nulls = '' } = expr\n  const argsList = args ? exprToSQL(args).join(', ') : ''\n  // cover Syntax from FN_NAME(...args [RESPECT NULLS]) [RESPECT NULLS]\n  const isConsidernulls = isConsiderNullsInArgs(name)\n  const result = [name, '(', argsList, !isConsidernulls && ')', consider_nulls && ' ', consider_nulls, isConsidernulls && ')']\n  return result.filter(hasVal).join('')\n}\n\nfunction windowFuncToSQL(expr) {\n  const { over } = expr\n  const str = constructArgsList(expr)\n  const overStr = overToSQL(over)\n  return [str, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  asWindowSpecToSQL,\n  namedWindowExprToSQL,\n  namedWindowExprListToSQL,\n  windowFuncToSQL,\n  windowSpecificationToSQL,\n}\n","import { toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { asWindowSpecToSQL } from './window'\n\nfunction overToSQL(over) {\n  if (!over) return\n  const { as_window_specification: asWindowSpec, expr, keyword, type } = over\n  const upperType = toUpper(type)\n  if (upperType === 'WINDOW') return `OVER ${asWindowSpecToSQL(asWindowSpec)}`\n  if (upperType === 'ON UPDATE') {\n    let onUpdate = `${toUpper(type)} ${toUpper(keyword)}`\n    const args = exprToSQL(expr)\n    if (args) onUpdate = `${onUpdate}(${args.join(', ')})`\n    return onUpdate\n  }\n  throw new Error('unknown over type')\n}\n\nexport {\n  overToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { commonTypeValue, hasVal, identifierToSql, toUpper } from './util'\nimport { overToSQL } from './over'\n\nfunction arrayDimensionToSymbol(target) {\n  if (!target || !target.array) return ''\n  switch (target.array) {\n    case 'one':\n      return '[]'\n    case 'two':\n      return '[][]'\n  }\n}\n\nfunction castToSQL(expr) {\n  const { collate, target, expr: expression, symbol, as: alias, tail } = expr\n  const { length, dataType, parentheses, scale } = target\n  let str = ''\n  if (length != null) str = scale ? `${length}, ${scale}` : length\n  if (parentheses) str = `(${str})`\n  let prefix = exprToSQL(expression)\n  let symbolChar = '::'\n  let suffix = ''\n  if (symbol === 'as') {\n    prefix = `CAST(${prefix}`\n    suffix = ')'\n    symbolChar = ` ${symbol.toUpperCase()} `\n  }\n  if (tail) suffix += ` ${tail.operator} ${exprToSQL(tail.expr)}`\n  if (alias) suffix += ` AS ${identifierToSql(alias)}`\n  if (collate) suffix += ` ${commonTypeValue(collate).join(' ')}`\n  const arrayDimension = arrayDimensionToSymbol(target)\n  return `${prefix}${symbolChar}${dataType}${arrayDimension}${str}${suffix}`\n}\n\nfunction extractFunToSQL(stmt) {\n  const { args, type } = stmt\n  const { field, cast_type: castType, source } = args\n  const result = [`${toUpper(type)}(${toUpper(field)}`, 'FROM', toUpper(castType), exprToSQL(source)]\n  return `${result.filter(hasVal).join(' ')})`\n}\n\nfunction funcToSQL(expr) {\n  const { args, name } = expr\n  const { parentheses, over, collate } = expr\n  const collateStr = commonTypeValue(collate).join(' ')\n  const overStr = overToSQL(over)\n  if (!args) return [name, overStr].filter(hasVal).join(' ')\n  const str = `${name}(${exprToSQL(args).join(', ')})`\n  return [parentheses ? `(${str})` : str, collateStr, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  castToSQL,\n  extractFunToSQL,\n  funcToSQL,\n}\n","import { connector, toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction composePrefixValSuffix(stmt) {\n  if (!stmt) return []\n  return [toUpper(stmt.prefix), exprToSQL(stmt.value), toUpper(stmt.suffix)]\n}\n\nfunction fetchOffsetToSQL(stmt) {\n  const { fetch, offset } = stmt\n  const result = [...composePrefixValSuffix(offset), ...composePrefixValSuffix(fetch)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction limitOffsetToSQL(limit) {\n  const { seperator, value } = limit\n  return connector('LIMIT', value.map(exprToSQL).join(`${seperator === 'offset' ? ' ' : ''}${toUpper(seperator)} `))\n}\n\nfunction limitToSQL(limit) {\n  if (!limit) return ''\n  if (limit.fetch) return fetchOffsetToSQL(limit)\n  return limitOffsetToSQL(limit)\n}\n\nexport {\n  limitToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { literalToSQL } from './util'\n\n/**\n * @param {Array<Object>} withExpr\n */\nfunction withToSQL(withExpr) {\n  if (!withExpr || withExpr.length === 0) return\n  const isRecursive = withExpr[0].recursive ? 'RECURSIVE ' : ''\n  const withExprStr = withExpr.map(cte => {\n    const { name, stmt, columns } = cte\n    const column = Array.isArray(columns) ? `(${columns.join(', ')})` : ''\n    return `${literalToSQL(name)}${column} AS (${exprToSQL(stmt)})`\n  }).join(', ')\n\n  return `WITH ${isRecursive}${withExprStr}`\n}\n\nexport {\n  withToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { hasVal, identifierToSql, commonOptionConnector, returningToSQL } from './util'\n\n/**\n * @param {Array} sets\n * @return {string}\n */\nfunction setToSQL(sets) {\n  if (!sets || sets.length === 0) return ''\n  const clauses = []\n  for (const set of sets) {\n    const { table, column, value } = set\n    const str = [table, column].filter(hasVal).map(info => identifierToSql(info)).join('.')\n    const setItem = [str]\n    let val = ''\n    if (value) {\n      val = exprToSQL(value)\n      setItem.push('=', val)\n    }\n    clauses.push(setItem.filter(hasVal).join(' '))\n  }\n  return clauses.join(', ')\n}\n\nfunction updateToSQL(stmt) {\n  const { table, set, where, orderby, limit, returning } = stmt\n  const clauses = [\n    'UPDATE',\n    tablesToSQL(table),\n    commonOptionConnector('SET', setToSQL, set),\n    commonOptionConnector('WHERE', exprToSQL, where),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    limitToSQL(limit),\n    returningToSQL(returning),\n  ]\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  updateToSQL,\n  setToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { identifierToSql, commonOptionConnector, hasVal, toUpper, returningToSQL } from './util'\nimport { selectToSQL } from './select'\nimport { setToSQL } from './update'\n\n/**\n * @param {Array} values\n * @return {string}\n */\nfunction valuesToSQL(values) {\n  if (values.type === 'select') return selectToSQL(values)\n  const clauses = values.map(exprToSQL)\n  return `(${clauses.join('), (')})`\n}\n\nfunction partitionToSQL(partition) {\n  if (!partition) return ''\n  const partitionArr = ['PARTITION', '(']\n  if (Array.isArray(partition)) {\n    partitionArr.push(partition.map(identifierToSql).join(', '))\n  } else {\n    const { value } = partition\n    partitionArr.push(value.map(exprToSQL).join(', '))\n  }\n  partitionArr.push(')')\n  return partitionArr.filter(hasVal).join('')\n}\n\nfunction insertToSQL(stmt) {\n  const {\n    table,\n    type,\n    prefix = 'into',\n    columns,\n    values,\n    where,\n    on_duplicate_update: onDuplicateUpdate,\n    partition,\n    returning,\n    set,\n  } = stmt\n  const { keyword, set: duplicateSet } = onDuplicateUpdate || {}\n  const clauses = [toUpper(type), toUpper(prefix), tablesToSQL(table), partitionToSQL(partition)]\n  if (Array.isArray(columns)) clauses.push(`(${columns.map(identifierToSql).join(', ')})`)\n  clauses.push(commonOptionConnector(Array.isArray(values) ? 'VALUES' : '', valuesToSQL, values))\n  clauses.push(commonOptionConnector('SET', setToSQL, set))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(returningToSQL(returning))\n  clauses.push(commonOptionConnector(keyword, setToSQL, duplicateSet))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  insertToSQL,\n  valuesToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { valuesToSQL } from './insert'\nimport { commonOptionConnector, hasVal, identifierToSql, literalToSQL, toUpper } from './util'\n\nfunction unnestToSQL(unnestExpr) {\n  const { type, as, expr, with_offset: withOffset } = unnestExpr\n  const result = [\n    `${toUpper(type)}(${expr && exprToSQL(expr) || ''})`,\n    commonOptionConnector('AS', identifierToSql, as),\n    commonOptionConnector(\n      toUpper(withOffset && withOffset.keyword),\n      identifierToSql,\n      withOffset && withOffset.as\n    ),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction tableToSQL(tableInfo) {\n  if (toUpper(tableInfo.type) === 'UNNEST') return unnestToSQL(tableInfo)\n  const { table, db, as, expr, schema, tablesample } = tableInfo\n  const database = identifierToSql(db)\n  const schemaStr = identifierToSql(schema)\n  let tableName = table && identifierToSql(table)\n  if (expr && expr.type === 'values') {\n    const { parentheses, values } = expr\n    const valueSQL = [parentheses && '(', '', parentheses && ')']\n    valueSQL[1] = `${commonOptionConnector('VALUES', valuesToSQL, values)}`\n    tableName = valueSQL.filter(hasVal).join('')\n  }\n  if (expr && expr.type !== 'values') tableName = exprToSQL(expr)\n  const str = [database, schemaStr, tableName].filter(hasVal).join('.')\n  const result = [str]\n  if (tablesample) {\n    const tableSampleSQL = [\n      'TABLESAMPLE',\n      exprToSQL(tablesample.expr),\n      literalToSQL(tablesample.repeatable),\n    ].filter(hasVal).join(' ')\n    result.push(tableSampleSQL)\n  }\n  if (as) result.push('AS', identifierToSql(as))\n  return result.join(' ')\n}\n\n/**\n * @param {Array} tables\n * @return {string}\n */\nfunction tablesToSQL(tables) {\n  const baseTable = tables[0]\n  const clauses = []\n  if (baseTable.type === 'dual') return 'DUAL'\n  clauses.push(tableToSQL(baseTable))\n  for (let i = 1; i < tables.length; ++i) {\n    const joinExpr = tables[i]\n    const { on, using, join } = joinExpr\n    const str = []\n    str.push(join ? ` ${join}` : ',')\n    str.push(tableToSQL(joinExpr))\n    str.push(commonOptionConnector('ON', exprToSQL, on))\n    if (using) str.push(`USING (${using.map(identifierToSql).join(', ')})`)\n    clauses.push(str.filter(hasVal).join(' '))\n  }\n  return clauses.filter(hasVal).join('')\n}\n\nfunction tableOptionToSQL(tableOption) {\n  const { keyword, symbol, value } = tableOption\n  const sql = [keyword.toUpperCase()]\n  if (symbol) sql.push(symbol)\n  sql.push(value)\n  return sql.join(' ')\n}\n\nexport {\n  tablesToSQL,\n  tableOptionToSQL,\n  tableToSQL,\n  unnestToSQL,\n}\n","import { exprToSQL, getExprListSQL, orderOrPartitionByToSQL } from './expr'\nimport { columnRefToSQL, columnsToSQL } from './column'\nimport { limitToSQL } from './limit'\nimport { withToSQL } from './with'\nimport { tablesToSQL } from './tables'\nimport { hasVal, commonOptionConnector, connector, topToSQL, toUpper } from './util'\n\nfunction distinctToSQL(distinct) {\n  if (!distinct) return\n  if (typeof distinct === 'string') return distinct\n  const { type, columns } = distinct\n  const result = [toUpper(type)]\n  if (columns) result.push(`(${columns.map(columnRefToSQL).join(', ')})`)\n  return result.filter(hasVal).join(' ')\n}\n/**\n * @param {Object}      stmt\n * @param {?Array}      stmt.with\n * @param {?Array}      stmt.options\n * @param {?string}     stmt.distinct\n * @param {?Array|string}   stmt.columns\n * @param {?Array}      stmt.from\n * @param {?Object}     stmt.where\n * @param {?Array}      stmt.groupby\n * @param {?Object}     stmt.having\n * @param {?Array}      stmt.orderby\n * @param {?Array}      stmt.limit\n * @return {string}\n */\n\nfunction selectToSQL(stmt) {\n  const {\n    as_struct_val: asStructVal, columns, distinct, from, for_sys_time_as_of: forSystem = {}, for_update: forUpdate, groupby, having, limit, options, orderby, parentheses_symbol: parentheses, top, window: windowInfo, with: withInfo, where,\n  } = stmt\n  const clauses = [withToSQL(withInfo), 'SELECT', toUpper(asStructVal)]\n  clauses.push(topToSQL(top))\n  if (Array.isArray(options)) clauses.push(options.join(' '))\n  clauses.push(distinctToSQL(distinct), columnsToSQL(columns, from))\n  // FROM + joins\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  const { keyword, expr } = forSystem || {}\n  clauses.push(commonOptionConnector(keyword, exprToSQL, expr))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(connector('GROUP BY', getExprListSQL(groupby).join(', ')))\n  clauses.push(commonOptionConnector('HAVING', exprToSQL, having))\n  clauses.push(commonOptionConnector('WINDOW', exprToSQL, windowInfo))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  clauses.push(toUpper(forUpdate))\n  const sql = clauses.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nexport {\n  selectToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal, literalToSQL, toUpper } from './util'\n\nfunction showEventToSQL(showEventExpr) {\n  const { in: inClause, from , limit } = showEventExpr\n  return [\n    commonOptionConnector('IN', literalToSQL, inClause && inClause.right),\n    commonOptionConnector('FROM', tablesToSQL, from),\n    limitToSQL(limit),\n  ].filter(hasVal).join(' ')\n}\n\nfunction showLikeAndWhereToSQL(showCharacterSetExpr) {\n  const { expr } = showCharacterSetExpr\n  if (!expr) return\n  const { op } = expr\n  if (toUpper(op) === 'LIKE') return commonOptionConnector('LIKE', literalToSQL, expr.right)\n  return commonOptionConnector('WHERE', exprToSQL, expr)\n}\n\nfunction showGrantsForUser(showGrantsForExpr) {\n  const { for: forExpr } = showGrantsForExpr\n  if (!forExpr) return\n  const { user, host, role_list } = forExpr\n  let userAndHost = `'${user}'`\n  if (host) userAndHost += `@'${host}'`\n  return ['FOR', userAndHost, role_list && 'USING', role_list && role_list.map(role => `'${role}'`).join(', ')].filter(hasVal).join(' ')\n}\n\nfunction showToSQL(showExpr) {\n  const { suffix, keyword } = showExpr\n  let str = ''\n  switch (toUpper(keyword)) {\n    case 'BINLOG':\n      str = showEventToSQL(showExpr)\n      break\n    case 'CHARACTER':\n    case 'COLLATION':\n      str = showLikeAndWhereToSQL(showExpr)\n      break\n    case 'GRANTS':\n      str = showGrantsForUser(showExpr)\n      break\n    default:\n      break\n  }\n  const result = ['SHOW', toUpper(keyword), toUpper(suffix), str]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  showToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { arrayStructTypeToSQL, hasVal, toUpper } from './util'\n\nfunction arrayExprListToSQL(expr) {\n  const {\n    array_path: arrayPath,\n    brackets,\n    expr_list: exprList,\n    parentheses,\n  } = expr\n  if (!exprList) return `[${columnsToSQL(arrayPath)}]`\n  if (Array.isArray(exprList)) return `[${exprList.map(col => `(${columnsToSQL(col)})`).filter(hasVal).join(', ')}]`\n  const result = exprToSQL(exprList)\n  if (brackets) return `[${result}]`\n  return parentheses ? `(${result})` : result\n}\n\nfunction arrayStructValueToSQL(expr) {\n  const {\n    expr_list: exprList,\n    type,\n  } = expr\n  switch (toUpper(type)) {\n    case 'STRUCT':\n      return `(${columnsToSQL(exprList)})`\n    case 'ARRAY':\n      return arrayExprListToSQL(expr)\n    default:\n      return ''\n  }\n}\n\nfunction arrayStructExprToSQL(expr) {\n  const { definition, keyword } = expr\n  const result = [toUpper(keyword)]\n  if (definition && typeof definition === 'object') {\n    result.length = 0\n    result.push(arrayStructTypeToSQL(definition))\n  }\n  result.push(arrayStructValueToSQL(expr))\n  return result.filter(hasVal).join('')\n}\n\nexport {\n  arrayStructExprToSQL,\n  arrayStructValueToSQL,\n}\n","import { literalToSQL, toUpper, connector } from './util'\nimport { alterExprToSQL } from './alter'\nimport { aggrToSQL } from './aggregation'\nimport { assignToSQL } from './assign'\nimport { binaryToSQL } from './binary'\nimport { caseToSQL } from './case'\nimport { columnRefToSQL } from './column'\nimport { castToSQL, extractFunToSQL, funcToSQL } from './func'\nimport { intervalToSQL } from './interval'\nimport { selectToSQL } from './select'\nimport { showToSQL } from './show'\nimport { arrayStructExprToSQL } from './array-struct'\nimport { unionToSQL } from './union'\nimport { namedWindowExprListToSQL, windowFuncToSQL } from './window'\n\nconst exprToSQLConvertFn = {\n  alter       : alterExprToSQL,\n  aggr_func   : aggrToSQL,\n  window_func : windowFuncToSQL,\n  'array'     : arrayStructExprToSQL,\n  assign      : assignToSQL,\n  binary_expr : binaryToSQL,\n  case        : caseToSQL,\n  cast        : castToSQL,\n  column_ref  : columnRefToSQL,\n  extract     : extractFunToSQL,\n  function    : funcToSQL,\n  interval    : intervalToSQL,\n  show        : showToSQL,\n  struct      : arrayStructExprToSQL,\n  'window'    : namedWindowExprListToSQL,\n}\n\nfunction varToSQL(expr) {\n  const { prefix = '@', name, members, keyword } = expr\n  const val = []\n  if (keyword) val.push(keyword)\n  const varName = members && members.length > 0 ? `${name}.${members.join('.')}` : name\n  val.push(`${prefix || ''}${varName}`)\n  return val.join(' ')\n}\n\nexprToSQLConvertFn.var = varToSQL\n\nfunction exprToSQL(exprOrigin) {\n  if (!exprOrigin) return\n  const expr = exprOrigin\n  if (exprOrigin.ast) {\n    const { ast } = expr\n    Reflect.deleteProperty(expr, ast)\n    for (const key of Object.keys(ast)) {\n      expr[key] = ast[key]\n    }\n  }\n  return exprToSQLConvertFn[expr.type] ? exprToSQLConvertFn[expr.type](expr) : literalToSQL(expr)\n}\n\nfunction unaryToSQL(unarExpr) {\n  const { operator, parentheses, expr } = unarExpr\n  const space = (operator === '-' || operator === '+') ? '' : ' '\n  const str = `${operator}${space}${exprToSQL(expr)}`\n  return parentheses ? `(${str})` : str\n}\n\nfunction getExprListSQL(exprList) {\n  if (!exprList) return []\n  return exprList.map(exprToSQL)\n}\n\nexprToSQLConvertFn.expr_list = expr => {\n  const str = getExprListSQL(expr.value)\n  return expr.parentheses ? `(${str.join(', ')})` : str\n}\n\nexprToSQLConvertFn.select = expr => {\n  const str = typeof expr._next === 'object' ? unionToSQL(expr) : selectToSQL(expr)\n  return expr.parentheses ? `(${str})` : str\n}\n\nexprToSQLConvertFn.unary_expr = unaryToSQL\n\nfunction orderOrPartitionByToSQL(expr, prefix) {\n  if (!Array.isArray(expr)) return ''\n  let expressions = []\n  const upperPrefix = toUpper(prefix)\n  switch (upperPrefix) {\n    case 'ORDER BY':\n      expressions = expr.map(info => `${exprToSQL(info.expr)} ${info.type}`)\n      break\n    case 'PARTITION BY':\n      expressions = expr.map(info => `${exprToSQL(info.expr)}`)\n      break\n    default:\n      expressions = expr.map(info => `${exprToSQL(info.expr)}`)\n      break\n  }\n  return connector(upperPrefix, expressions.join(', '))\n}\n\nexport {\n  exprToSQLConvertFn,\n  exprToSQL,\n  getExprListSQL,\n  varToSQL,\n  orderOrPartitionByToSQL,\n}\n","import { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { hasVal } from './util'\nimport { overToSQL } from './over'\n\nfunction aggrToSQL(expr) {\n  /** @type {Object} */\n  const { args, over, orderby, within_group_orderby } = expr\n  let str = exprToSQL(args.expr)\n  const fnName = expr.name\n  const overStr = overToSQL(over)\n  if (args.distinct) {\n    const separator = args.expr.parentheses ? '' : ' '\n    str = ['DISTINCT', str].join(separator)\n  }\n  if (args.orderby) str = `${str} ${orderOrPartitionByToSQL(args.orderby, 'order by')}`\n  if (orderby) str = `${str} ${orderOrPartitionByToSQL(orderby, 'order by')}`\n  const withinGroup = within_group_orderby ? `WITHIN GROUP (${orderOrPartitionByToSQL(within_group_orderby, 'order by')})` : ''\n  return [`${fnName}(${str})`, withinGroup, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  aggrToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction assignToSQL(expr) {\n  /** @type {Object} */\n  const { left, right, symbol, keyword } = expr\n  left.keyword = keyword\n  const leftVar = exprToSQL(left)\n  const rightVal = exprToSQL(right)\n  return `${leftVar} ${symbol} ${rightVal}`\n}\n\nexport {\n  assignToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction binaryToSQL(expr) {\n  let { operator } = expr\n  let rstr = exprToSQL(expr.right)\n  let isBetween = false\n  if (Array.isArray(rstr)) {\n    switch (operator) {\n      case '=':\n        operator = 'IN'\n        break\n      case '!=':\n        operator = 'NOT IN'\n        break\n      case 'BETWEEN':\n      case 'NOT BETWEEN':\n        isBetween = true\n        rstr = `${rstr[0]} AND ${rstr[1]}`\n        break\n      default:\n        break\n    }\n    if (!isBetween) rstr = `(${rstr.join(', ')})`\n  }\n  const str = [exprToSQL(expr.left), operator, rstr].join(' ')\n  return expr.parentheses ? `(${str})` : str\n}\n\nexport {\n  binaryToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction caseToSQL(expr) {\n  const res = ['CASE']\n  const conditions = expr.args\n\n  if (expr.expr) res.push(exprToSQL(expr.expr))\n\n  for (let i = 0, len = conditions.length; i < len; ++i) {\n    res.push(conditions[i].type.toUpperCase())\n    if (conditions[i].cond) {\n      res.push(exprToSQL(conditions[i].cond))\n      res.push('THEN')\n    }\n    res.push(exprToSQL(conditions[i].result))\n  }\n\n  res.push('END')\n\n  return res.join(' ')\n}\n\nexport {\n  caseToSQL,\n}\n","import { toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction intervalToSQL(intervalExpr) {\n  const { expr, unit } = intervalExpr\n  const result = ['INTERVAL', exprToSQL(expr), toUpper(unit)]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  intervalToSQL,\n}\n","import {\n  literalToSQL,\n  identifierToSql,\n  toUpper,\n  hasVal,\n  commentToSQL,\n  onPartitionsToSQL,\n} from './util'\nimport { exprToSQL } from './expr'\n\nfunction indexTypeToSQL(indexType) {\n  if (!indexType) return []\n  const { keyword, type } = indexType\n  return [keyword.toUpperCase(), type.toUpperCase()]\n}\n\nfunction indexOptionToSQL(indexOpt) {\n  if (!indexOpt) return\n  const { type, expr, symbol } = indexOpt\n  const upperType = type.toUpperCase()\n  const indexOptArray = []\n  indexOptArray.push(upperType)\n  switch (upperType) {\n    case 'KEY_BLOCK_SIZE':\n      if (symbol) indexOptArray.push(symbol)\n      indexOptArray.push(literalToSQL(expr))\n      break\n    case 'BTREE':\n    case 'HASH':\n      indexOptArray.length = 0\n      indexOptArray.push(...indexTypeToSQL(indexOpt))\n      break\n    case 'WITH PARSER':\n      indexOptArray.push(expr)\n      break\n    case 'VISIBLE':\n    case 'INVISIBLE':\n      break\n    case 'COMMENT':\n      indexOptArray.shift()\n      indexOptArray.push(commentToSQL(indexOpt))\n      break\n    case 'DATA_COMPRESSION':\n      indexOptArray.push(symbol, toUpper(expr.value), onPartitionsToSQL(expr.on))\n      break\n    default:\n      indexOptArray.push(symbol, literalToSQL(expr))\n      break\n  }\n  return indexOptArray.filter(hasVal).join(' ')\n}\n\nfunction indexOptionListToSQL(indexOptList) {\n  if (!indexOptList) return []\n  return indexOptList.map(indexOptionToSQL)\n}\n\nfunction indexTypeAndOptionToSQL(indexDefinition) {\n  const {\n    constraint_type: constraintType,\n    index_type: indexType,\n    index_options: indexOptions = [],\n    definition,\n  } = indexDefinition\n  const dataType = []\n  dataType.push(...indexTypeToSQL(indexType))\n  if (definition && definition.length) {\n    const definitionSQL = toUpper(constraintType) === 'CHECK' ? `(${exprToSQL(definition[0])})` : `(${definition.map(col => identifierToSql(col)).join(', ')})`\n    dataType.push(definitionSQL)\n  }\n  dataType.push(indexOptionListToSQL(indexOptions).join(' '))\n  return dataType\n}\n\nfunction indexDefinitionToSQL(indexDefinition) {\n  const indexSQL = []\n  const {\n    keyword,\n    index,\n  } = indexDefinition\n  indexSQL.push(toUpper(keyword))\n  indexSQL.push(index)\n  indexSQL.push(...indexTypeAndOptionToSQL(indexDefinition))\n  return indexSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  indexDefinitionToSQL,\n  indexTypeToSQL,\n  indexOptionToSQL,\n  indexOptionListToSQL,\n  indexTypeAndOptionToSQL,\n}\n","import {\n  identifierToSql,\n  toUpper,\n  hasVal,\n} from './util'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { columnReferenceDefinitionToSQL } from './column'\n\nfunction constraintDefinitionToSQL(constraintDefinition) {\n  if (!constraintDefinition) return\n  const {\n    constraint,\n    constraint_type: constraintType,\n    enforced,\n    index,\n    keyword,\n    reference_definition: referenceDefinition,\n  } = constraintDefinition\n  const constraintSQL = []\n  constraintSQL.push(toUpper(keyword))\n  constraintSQL.push(identifierToSql(constraint))\n  constraintSQL.push(toUpper(constraintType))\n  constraintSQL.push(identifierToSql(index))\n  constraintSQL.push(...indexTypeAndOptionToSQL(constraintDefinition))\n  constraintSQL.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  constraintSQL.push(toUpper(enforced))\n  return constraintSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  constraintDefinitionToSQL,\n}\n","import { constraintDefinitionToSQL } from './constrain'\nimport { exprToSQL } from './expr'\nimport { castToSQL } from './func'\nimport { tablesToSQL } from './tables'\nimport {\n  autoIncreatementToSQL,\n  columnIdentifierToSql,\n  commonOptionConnector,\n  commonTypeValue,\n  commentToSQL,\n  hasVal,\n  identifierToSql,\n  literalToSQL,\n  toUpper,\n} from './util'\n\nfunction columnOffsetToSQL(column, isDual) {\n  if (typeof column === 'string') return identifierToSql(column, isDual)\n  const { expr, offset, suffix } = column\n  return [exprToSQL(expr), offset, suffix].filter(hasVal).join('')\n}\nfunction columnRefToSQL(expr) {\n  const {\n    array_index, arrow, as, collate, column, isDual, schema, table, parentheses, property,\n    suffix,\n  } = expr\n  let str = column === '*' ? '*' : columnOffsetToSQL(column, isDual)\n  if (table) str = `${identifierToSql(table)}.${str}`\n  if (schema) str = `${identifierToSql(schema)}.${str}`\n  if (array_index) str = `${str}[${array_index.number}]`\n  const result = [\n    str,\n    commonOptionConnector('AS', exprToSQL, as),\n    commonOptionConnector(arrow, literalToSQL, property),\n  ]\n  if (collate) result.push(commonTypeValue(collate).join(' '))\n  result.push(toUpper(suffix))\n  const sql = result.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nfunction columnDataType(definition) {\n  const { dataType, length, suffix, scale, expr } = definition || {}\n  let result = dataType\n  if (length != null) result += `(${[length, scale].filter(val => val != null).join(', ')})`\n  if (suffix && suffix.length) result += ` ${suffix.join(' ')}`\n  if (expr) result += exprToSQL(expr)\n  return result\n}\n\nfunction columnReferenceDefinitionToSQL(referenceDefinition) {\n  const reference = []\n  if (!referenceDefinition) return reference\n  const {\n    definition,\n    keyword,\n    match,\n    table,\n    on_delete: onDelete,\n    on_update: onUpdate,\n  } = referenceDefinition\n  reference.push(keyword.toUpperCase())\n  reference.push(tablesToSQL(table))\n  reference.push(`(${definition.map(identifierToSql).join(', ')})`)\n  reference.push(toUpper(match))\n  reference.push(...commonTypeValue(onDelete))\n  reference.push(...commonTypeValue(onUpdate))\n  return reference.filter(hasVal)\n}\n\nfunction columnOption(definition) {\n  const columnOpt = []\n  const {\n    nullable, character_set: characterSet, check, comment, collate, storage,\n    default_val: defaultOpt,\n    auto_increment: autoIncrement,\n    unique_or_primary: uniquePrimary,\n    column_format: columnFormat,\n    reference_definition: referenceDefinition,\n  } = definition\n\n  columnOpt.push(toUpper(nullable && nullable.value))\n  if (defaultOpt) {\n    const { type, value } = defaultOpt\n    columnOpt.push(type.toUpperCase(), exprToSQL(value))\n  }\n  columnOpt.push(constraintDefinitionToSQL(check))\n  columnOpt.push(autoIncreatementToSQL(autoIncrement), toUpper(uniquePrimary), commentToSQL(comment))\n  columnOpt.push(...commonTypeValue(characterSet))\n  columnOpt.push(...commonTypeValue(collate))\n  columnOpt.push(...commonTypeValue(columnFormat))\n  columnOpt.push(...commonTypeValue(storage))\n  columnOpt.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  return columnOpt.filter(hasVal).join(' ')\n}\n\nfunction columnOrderToSQL(columnOrder) {\n  const { column, collate, nulls, opclass, order } = columnOrder\n  const result = [\n    exprToSQL(column),\n    commonOptionConnector(collate && collate.type, identifierToSql, collate && collate.value),\n    opclass,\n    toUpper(order),\n    toUpper(nulls),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction columnDefinitionToSQL(columnDefinition) {\n  const column = []\n  const name = columnRefToSQL(columnDefinition.column)\n  const dataType = columnDataType(columnDefinition.definition)\n  column.push(name)\n  column.push(dataType)\n  const columnOpt = columnOption(columnDefinition)\n  column.push(columnOpt)\n  return column.filter(hasVal).join(' ')\n}\n\nfunction columnToSQL(column, isDual) {\n  const { expr, type } = column\n  if (type === 'cast') return castToSQL(column)\n  if (isDual) expr.isDual = isDual\n  let str = exprToSQL(expr)\n  if (expr.parentheses && Reflect.has(expr, 'array_index')) str = `(${str})`\n  if (expr.array_index && expr.type !== 'column_ref') str = `${str}[${expr.array_index.number}]`\n  if (column.as !== null) {\n    str = `${str} AS `\n    if (/^(`?)[a-z_][0-9a-z_]*(`?)$/i.test(column.as)) str = `${str}${identifierToSql(column.as)}`\n    else str = `${str}${columnIdentifierToSql(column.as)}`\n  }\n  return str\n}\n\nfunction getDual(tables) {\n  const baseTable = Array.isArray(tables) && tables[0]\n  if (baseTable && baseTable.type === 'dual') return true\n  return false\n}\n/**\n * Stringify column expressions\n *\n * @param {Array} columns\n * @return {string}\n */\nfunction columnsToSQL(columns, tables) {\n  if (!columns || columns === '*') return columns\n  const isDual = getDual(tables)\n  const result = []\n  const { expr_list: exprList, star, type } = columns\n  result.push(star, toUpper(type))\n  const exprListArr = exprList || columns\n  const columnsStr = exprListArr.map(col => columnToSQL(col, isDual)).join(', ')\n  result.push([type && '(', columnsStr, type && ')'].filter(hasVal).join(''))\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  columnDefinitionToSQL,\n  columnRefToSQL,\n  columnsToSQL,\n  columnDataType,\n  columnOrderToSQL,\n  columnReferenceDefinitionToSQL,\n}\n","import { alterExprToSQL } from './alter'\nimport { exprToSQL } from './expr'\nimport { indexDefinitionToSQL, indexOptionListToSQL, indexTypeToSQL } from './index-definition'\nimport { columnDefinitionToSQL } from './column'\nimport { constraintDefinitionToSQL } from './constrain'\nimport { funcToSQL } from './func'\nimport { tablesToSQL, tableOptionToSQL, tableToSQL } from './tables'\nimport { unionToSQL } from './union'\nimport { columnIdentifierToSql, columnOrderListToSQL, commonOptionConnector, commonKeywordArgsToSQL, toUpper, hasVal, identifierToSql, triggerEventToSQL, literalToSQL } from './util'\n\nfunction createDefinitionToSQL(definition) {\n  if (!definition) return []\n  const { resource } = definition\n  switch (resource) {\n    case 'column':\n      return columnDefinitionToSQL(definition)\n    case 'index':\n      return indexDefinitionToSQL(definition)\n    case 'constraint':\n      return constraintDefinitionToSQL(definition)\n    case 'sequence':\n      return [toUpper(definition.prefix), exprToSQL(definition.value)].filter(hasVal).join(' ')\n    default:\n      throw new Error(`unknown resource = ${resource} type`)\n  }\n}\n\nfunction createTableToSQL(stmt) {\n  const {\n    type, keyword, table, like, as, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n    table_options: tableOptions,\n    ignore_replace: ignoreReplace,\n    query_expr: queryExpr,\n  } = stmt\n  const sql = [toUpper(type), toUpper(temporary), toUpper(keyword), toUpper(ifNotExists), tablesToSQL(table)]\n  if (like) {\n    const { type: likeType, table: likeTable } = like\n    const likeTableName = tablesToSQL(likeTable)\n    sql.push(toUpper(likeType), likeTableName)\n    return sql.filter(hasVal).join(' ')\n  }\n  if (createDefinition) {\n    sql.push(`(${createDefinition.map(createDefinitionToSQL).join(', ')})`)\n  }\n  if (tableOptions) {\n    sql.push(tableOptions.map(tableOptionToSQL).join(' '))\n  }\n  sql.push(toUpper(ignoreReplace), toUpper(as))\n  if (queryExpr) sql.push(unionToSQL(queryExpr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createTriggerToSQL(stmt) {\n  const {\n    constraint, constraint_kw: constraintKw,\n    deferrable,\n    events, execute,\n    for_each: forEach, from,\n    location,\n    keyword,\n    type, table,\n    when,\n  } = stmt\n  const sql = [toUpper(type), toUpper(constraintKw), toUpper(keyword), identifierToSql(constraint), toUpper(location)]\n  const event = triggerEventToSQL(events)\n  sql.push(event, 'ON', tableToSQL(table))\n  if (from) sql.push('FROM', tableToSQL(from))\n  sql.push(...commonKeywordArgsToSQL(deferrable), ...commonKeywordArgsToSQL(forEach))\n  if (when) sql.push(toUpper(when.type), exprToSQL(when.cond))\n  sql.push(toUpper(execute.keyword), funcToSQL(execute.expr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createExtensionToSQL(stmt) {\n  const {\n    extension, from, if_not_exists: ifNotExists,\n    keyword, schema, type, with: withName, version,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    literalToSQL(extension),\n    toUpper(withName),\n    commonOptionConnector('SCHEMA', literalToSQL, schema),\n    commonOptionConnector('VERSION', literalToSQL, version),\n    commonOptionConnector('FROM', literalToSQL, from),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createIndexToSQL(stmt) {\n  const {\n    concurrently, filestream_on: fileStream, keyword, include, index_columns: indexColumns,\n    index_type: indexType, index_using: indexUsing, index, on, index_options: indexOpt, algorithm_option: algorithmOpt, lock_option: lockOpt, on_kw: onKw, table, tablespace, type, where,\n    with: withExpr, with_before_where: withBeforeWhere,\n  } = stmt\n  const withIndexOpt = withExpr && `WITH (${indexOptionListToSQL(withExpr).join(', ')})`\n  const includeColumns = include && `${toUpper(include.keyword)} (${include.columns.map(col => identifierToSql(col)).join(', ')})`\n  const sql = [\n    toUpper(type), toUpper(indexType), toUpper(keyword), toUpper(concurrently),\n    identifierToSql(index), toUpper(onKw), tableToSQL(table), ...indexTypeToSQL(indexUsing),\n    `(${columnOrderListToSQL(indexColumns)})`, includeColumns, indexOptionListToSQL(indexOpt).join(' '), alterExprToSQL(algorithmOpt), alterExprToSQL(lockOpt),\n    commonOptionConnector('TABLESPACE', literalToSQL, tablespace),\n  ]\n  if (withBeforeWhere) {\n    sql.push(withIndexOpt, commonOptionConnector('WHERE', exprToSQL, where))\n  } else {\n    sql.push(commonOptionConnector('WHERE', exprToSQL, where), withIndexOpt)\n  }\n  sql.push(commonOptionConnector('ON', exprToSQL, on), commonOptionConnector('FILESTREAM_ON', literalToSQL, fileStream))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createSequenceToSQL(stmt) {\n  const {\n    type, keyword, sequence, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(temporary),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    tablesToSQL(sequence),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(createDefinitionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createDatabaseToSQL(stmt) {\n  const {\n    type, keyword, database,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    columnIdentifierToSql(database),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(tableOptionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createToSQL(stmt) {\n  const { keyword } = stmt\n  let sql = ''\n  switch (keyword.toLowerCase()) {\n    case 'table':\n      sql = createTableToSQL(stmt)\n      break\n    case 'trigger':\n      sql = createTriggerToSQL(stmt)\n      break\n    case 'extension':\n      sql = createExtensionToSQL(stmt)\n      break\n    case 'index':\n      sql = createIndexToSQL(stmt)\n      break\n    case 'sequence':\n      sql = createSequenceToSQL(stmt)\n      break\n    case 'database':\n      sql = createDatabaseToSQL(stmt)\n      break\n    default:\n      throw new Error(`unknown create resource ${keyword}`)\n  }\n  return sql\n}\n\nexport {\n  createToSQL,\n  createDefinitionToSQL,\n}\n","import { columnDefinitionToSQL, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { hasVal, toUpper, identifierToSql } from './util'\n\nfunction alterToSQL(stmt) {\n  const { type, table, expr = [] } = stmt\n  const action = toUpper(type)\n  const tableName = tablesToSQL(table)\n  const exprList = expr.map(exprToSQL)\n  const result = [action, 'TABLE', tableName, exprList.join(', ')]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterExprToSQL(expr) {\n  if (!expr) return ''\n  const {\n    action,\n    create_definitions: createDefinition,\n    first_after: firstAfter,\n    if_not_exists: ifNotExists,keyword,\n    old_column: oldColumn,\n    prefix,\n    resource,\n    symbol,\n  } = expr\n  let name = ''\n  let dataType = []\n  switch (resource) {\n    case 'column':\n      dataType = [columnDefinitionToSQL(expr)]\n      break\n    case 'index':\n      dataType = indexTypeAndOptionToSQL(expr)\n      name = expr[resource]\n      break\n    case 'table':\n      name = identifierToSql(expr[resource])\n      break\n    case 'algorithm':\n    case 'lock':\n      name = [symbol, toUpper(expr[resource])].filter(hasVal).join(' ')\n      break\n    case 'constraint':\n      name = identifierToSql(expr[resource])\n      dataType = [createDefinitionToSQL(createDefinition)]\n      break\n    case 'key':\n      name = identifierToSql(expr[resource])\n      break\n    default:\n      break\n  }\n  const alterArray = [\n    toUpper(action),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    oldColumn && columnRefToSQL(oldColumn),\n    toUpper(prefix),\n    name,\n    dataType.filter(hasVal).join(' '),\n    firstAfter && `${toUpper(firstAfter.keyword)} ${columnRefToSQL(firstAfter.column)}`,\n  ]\n  return alterArray.filter(hasVal).join(' ')\n}\n\nexport {\n  alterToSQL,\n  alterExprToSQL,\n}\n","import { alterExprToSQL } from './alter'\nimport { columnDataType, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { identifierToSql, hasVal, toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { tablesToSQL, tableToSQL } from './tables'\n\nfunction callToSQL(stmt) {\n  const type = 'CALL'\n  const storeProcessCall = exprToSQL(stmt.expr)\n  return `${type} ${storeProcessCall}`\n}\n\nfunction commonCmdToSQL(stmt) {\n  const { type, keyword, name } = stmt\n  const clauses = [toUpper(type), toUpper(keyword)]\n  switch (keyword) {\n    case 'table':\n      clauses.push(tablesToSQL(name))\n      break\n    case 'procedure':\n      clauses.push(identifierToSql(name))\n      break\n    case 'index':\n      clauses.push(\n        columnRefToSQL(name),\n        'ON',\n        tableToSQL(stmt.table),\n        stmt.options && stmt.options.map(alterExprToSQL).filter(hasVal).join(' ')\n      )\n      break\n    default:\n      break\n  }\n  return clauses.filter(hasVal).join(' ')\n}\n\nfunction descToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  return `${action} ${identifierToSql(table)}`\n}\n\nfunction renameToSQL(stmt) {\n  const { type, table } = stmt\n  const clauses = []\n  const prefix = `${type && type.toUpperCase()} TABLE`\n  if (table) {\n    for (const tables of table) {\n      const renameInfo = tables.map(tableToSQL)\n      clauses.push(renameInfo.join(' TO '))\n    }\n  }\n  return `${prefix} ${clauses.join(', ')}`\n}\n\nfunction useToSQL(stmt) {\n  const { type, db } = stmt\n  const action = toUpper(type)\n  const database = identifierToSql(db)\n  return `${action} ${database}`\n}\n\nfunction setVarToSQL(stmt) {\n  const { expr } = stmt\n  const action = 'SET'\n  const val = exprToSQL(expr)\n  return `${action} ${val}`\n}\n\nfunction pgLock(stmt) {\n  const { lock_mode: lockMode, nowait } = stmt\n  const lockInfo = []\n  if (lockMode) {\n    const { mode } = lockMode\n    lockInfo.push(mode.toUpperCase())\n  }\n  if (nowait) lockInfo.push(nowait.toUpperCase())\n  return lockInfo\n}\n\nfunction lockUnlockToSQL(stmt) {\n  const { type, keyword, tables } = stmt\n  const result = [type.toUpperCase(), toUpper(keyword)]\n  if (type.toUpperCase() === 'UNLOCK') return result.join(' ')\n  const tableStmt = []\n  for (const tableInfo of tables) {\n    const { table, lock_type: lockType } = tableInfo\n    const tableInfoTemp = [tableToSQL(table)]\n    if (lockType) {\n      const lockKeyList = ['prefix', 'type', 'suffix']\n      tableInfoTemp.push(lockKeyList.map(key => toUpper(lockType[key])).filter(hasVal).join(' '))\n    }\n    tableStmt.push(tableInfoTemp.join(' '))\n  }\n  result.push(tableStmt.join(', '), ...pgLock(stmt))\n  return result.filter(hasVal).join(' ')\n}\n\nfunction declareToSQL(stmt) {\n  const { type, declare } = stmt\n  const result = [toUpper(type)]\n  const info = declare.map(dec => {\n    const { at, name, as, prefix, definition, keyword } = dec\n    const declareInfo = [`${at}${name}`, toUpper(as)]\n    switch (keyword) {\n      case 'variable':\n        declareInfo.push(columnDataType(prefix))\n        if (definition) declareInfo.push('=', exprToSQL(definition))\n        break\n      case 'cursor':\n        declareInfo.push(toUpper(prefix))\n        break\n      case 'table':\n        declareInfo.push(toUpper(prefix), `(${definition.map(createDefinitionToSQL).join(', ')})`)\n        break\n      default:\n        break\n    }\n    return declareInfo.filter(hasVal).join(' ')\n  }).join(', ')\n  result.push(info)\n  return result.join(' ')\n}\n\nexport {\n  callToSQL,\n  commonCmdToSQL,\n  declareToSQL,\n  descToSQL,\n  renameToSQL,\n  useToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n}\n","import { alterToSQL } from './alter'\nimport { createToSQL } from './create'\nimport { selectToSQL } from './select'\nimport { deleteToSQL } from './delete'\nimport { updateToSQL } from './update'\nimport { insertToSQL } from './insert'\nimport {\n  callToSQL,\n  commonCmdToSQL,\n  declareToSQL,\n  descToSQL,\n  useToSQL,\n  renameToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n} from './command'\nimport { orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { showToSQL } from './show'\nimport { analyzeToSQL, attachToSQL } from './sqlite'\nimport { withToSQL } from './with'\nimport { hasVal } from './util'\n\nconst typeToSQLFn = {\n  alter    : alterToSQL,\n  analyze  : analyzeToSQL,\n  attach   : attachToSQL,\n  create   : createToSQL,\n  select   : selectToSQL,\n  delete   : deleteToSQL,\n  update   : updateToSQL,\n  insert   : insertToSQL,\n  drop     : commonCmdToSQL,\n  truncate : commonCmdToSQL,\n  replace  : insertToSQL,\n  declare  : declareToSQL,\n  use      : useToSQL,\n  rename   : renameToSQL,\n  call     : callToSQL,\n  desc     : descToSQL,\n  set      : setVarToSQL,\n  lock     : lockUnlockToSQL,\n  unlock   : lockUnlockToSQL,\n  show     : showToSQL,\n}\n\nfunction unionToSQL(stmt) {\n  const fun = typeToSQLFn[stmt.type]\n  const res = [fun(stmt)]\n  const { _orderby, _limit } = stmt\n  while (stmt._next) {\n    const unionKeyword = (stmt.union || 'union').toUpperCase()\n    res.push(unionKeyword, fun(stmt._next))\n    stmt = stmt._next\n  }\n  res.push(orderOrPartitionByToSQL(_orderby, 'order by'), limitToSQL(_limit))\n  return res.filter(hasVal).join(' ')\n}\n\nfunction bigQueryToSQL(stmt) {\n  const { with: withExpr, parentheses, select, orderby, limit } = stmt\n  const result = [withToSQL(withExpr), parentheses && '(', unionToSQL(select), parentheses && ')']\n  // process with, orderby and limit\n  result.push(orderOrPartitionByToSQL(orderby, 'order by'), limitToSQL(limit))\n  return result.filter(val => val).join(' ')\n}\n\nfunction multipleToSQL(stmt) {\n  const res = []\n  for (let i = 0, len = stmt.length; i < len; ++i) {\n    let astInfo = stmt[i] && stmt[i].ast\n    if (!astInfo) astInfo = stmt[i]\n    res.push(unionToSQL(astInfo))\n  }\n  return res.join(' ; ')\n}\n\nexport {\n  bigQueryToSQL,\n  unionToSQL,\n  multipleToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { tableToSQL } from './tables'\nimport { hasVal, identifierToSql, toUpper } from './util'\n\nfunction analyzeToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  const tableName = tableToSQL(table)\n  return [action, tableName].join(' ')\n}\n\nfunction attachToSQL(stmt) {\n  const { type, database, expr, as, schema } = stmt\n  return [toUpper(type), toUpper(database), exprToSQL(expr), toUpper(as), identifierToSql(schema)].filter(hasVal).join(' ')\n}\n\nexport {\n  attachToSQL,\n  analyzeToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal } from './util'\n\nfunction deleteToSQL(stmt) {\n  const clauses = ['DELETE']\n  const { columns, from, table, where, orderby, limit } = stmt\n  const columnInfo = columnsToSQL(columns, from)\n  clauses.push(columnInfo)\n  if (Array.isArray(table)) {\n    if (!(table.length === 1 && table[0].addition === true)) clauses.push(tablesToSQL(table))\n  }\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  deleteToSQL,\n}\n","import { bigQueryToSQL, unionToSQL, multipleToSQL } from './union'\n\nconst surportedTypes = ['analyze', 'attach', 'select', 'delete', 'update', 'insert', 'drop', 'rename', 'truncate', 'call', 'desc', 'use', 'alter', 'set', 'create', 'lock', 'unlock', 'bigquery', 'declare', 'show', 'replace']\n\nfunction checkSupported(expr) {\n  const ast = expr && expr.ast ? expr.ast : expr\n  if (!surportedTypes.includes(ast.type)) throw new Error(`${ast.type} statements not supported at the moment`)\n}\n\nfunction toSQL(ast) {\n  if (Array.isArray(ast)) {\n    ast.forEach(checkSupported)\n    return multipleToSQL(ast)\n  }\n  checkSupported(ast)\n  const { type } = ast\n  if (type === 'bigquery') return bigQueryToSQL(ast)\n  return unionToSQL(ast)\n}\n\nfunction goToSQL(stmt) {\n  if (!stmt || stmt.length === 0) return ''\n  const res = [toSQL(stmt.ast)]\n  if (stmt.go_next) res.push(stmt.go.toUpperCase(), goToSQL(stmt.go_next))\n  return res.filter(sqlItem => sqlItem).join(' ')\n}\n\nexport default function astToSQL(ast) {\n  if (ast.go === 'go') return goToSQL(ast)\n  return toSQL(ast)\n}\n","import parsers from './parser.all'\nimport astToSQL from './sql'\nimport { DEFAULT_OPT, setParserOpt } from './util'\n\nclass Parser {\n  astify(sql, opt = DEFAULT_OPT) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.ast\n  }\n\n  sqlify(ast, opt = DEFAULT_OPT) {\n    setParserOpt(opt)\n    return astToSQL(ast, opt)\n  }\n\n  parse(sql, opt = DEFAULT_OPT) {\n    const { database = (PARSER_NAME || 'mysql') } = opt\n    setParserOpt(opt)\n    const typeCase = database.toLowerCase()\n    if (parsers[typeCase]) return parsers[typeCase](sql.trim())\n    throw new Error(`${database} is not supported currently`)\n  }\n\n  whiteListCheck(sql, whiteList, opt = DEFAULT_OPT) {\n    if (!whiteList || whiteList.length === 0) return\n    const { type = 'table' } = opt\n    if (!this[`${type}List`] || typeof this[`${type}List`] !== 'function') throw new Error(`${type} is not valid check mode`)\n    const checkFun = this[`${type}List`].bind(this)\n    const authorityList = checkFun(sql, opt)\n    let hasAuthority = true\n    let denyInfo = ''\n    for (const authority of authorityList) {\n      let hasCorrespondingAuthority = false\n      for (const whiteAuthority of whiteList) {\n        const regex = new RegExp(whiteAuthority, 'i')\n        if (regex.test(authority)) {\n          hasCorrespondingAuthority = true\n          break\n        }\n      }\n      if (!hasCorrespondingAuthority) {\n        denyInfo = authority\n        hasAuthority = false\n        break\n      }\n    }\n    if (!hasAuthority) throw new Error(`authority = '${denyInfo}' is required in ${type} whiteList to execute SQL = '${sql}'`)\n  }\n\n  tableList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.tableList\n  }\n\n  columnList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.columnList\n  }\n}\n\nexport default Parser\n","import Parser from './src/parser'\nimport * as util from './src/util'\n\nexport {\n  Parser,\n  util,\n}\n\nif (global && global.window) {\n  global.window.NodeSQLParser = {\n    Parser,\n    util,\n  }\n}\n"],"sourceRoot":""}