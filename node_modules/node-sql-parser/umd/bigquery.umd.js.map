{"version":3,"sources":["/Users/taozhi/learning/node-sql-parser/webpack/universalModuleDefinition","/Users/taozhi/learning/node-sql-parser/webpack/bootstrap","/Users/taozhi/learning/node-sql-parser/src/util.js","/Users/taozhi/learning/node-sql-parser/src/array-struct.js","/Users/taozhi/learning/node-sql-parser/src/expr.js","/Users/taozhi/learning/node-sql-parser/src/aggregation.js","/Users/taozhi/learning/node-sql-parser/src/assign.js","/Users/taozhi/learning/node-sql-parser/src/binary.js","/Users/taozhi/learning/node-sql-parser/src/case.js","/Users/taozhi/learning/node-sql-parser/src/interval.js","/Users/taozhi/learning/node-sql-parser/src/tables.js","/Users/taozhi/learning/node-sql-parser/src/column.js","/Users/taozhi/learning/node-sql-parser/src/limit.js","/Users/taozhi/learning/node-sql-parser/src/alter.js","/Users/taozhi/learning/node-sql-parser/src/index-definition.js","/Users/taozhi/learning/node-sql-parser/src/func.js","/Users/taozhi/learning/node-sql-parser/src/command.js","/Users/taozhi/learning/node-sql-parser/src/union.js","/Users/taozhi/learning/node-sql-parser/src/sqlite.js","/Users/taozhi/learning/node-sql-parser/src/delete.js","/Users/taozhi/learning/node-sql-parser/src/over.js","/Users/taozhi/learning/node-sql-parser/src/select.js","/Users/taozhi/learning/node-sql-parser/src/create.js","/Users/taozhi/learning/node-sql-parser/src/window.js","/Users/taozhi/learning/node-sql-parser/src/insert.js","/Users/taozhi/learning/node-sql-parser/src/update.js","/Users/taozhi/learning/node-sql-parser/src/constrain.js","/Users/taozhi/learning/node-sql-parser/src/with.js","/Users/taozhi/learning/node-sql-parser/src/show.js","/Users/taozhi/learning/node-sql-parser/src/parser.single.js","/Users/taozhi/learning/node-sql-parser/src/sql.js","/Users/taozhi/learning/node-sql-parser/src/parser.js","/Users/taozhi/learning/node-sql-parser/pegjs/bigquery.pegjs","/Users/taozhi/learning/node-sql-parser/index.js","/Users/taozhi/learning/node-sql-parser/(webpack)/buildin/global.js","/Users/taozhi/learning/node-sql-parser/node_modules/big-integer/BigInteger.js","/Users/taozhi/learning/node-sql-parser/(webpack)/buildin/module.js"],"names":["root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DEFAULT_OPT","database","PARSER_NAME","type","parserOpt","commonOptionConnector","keyword","action","opt","toUpperCase","connector","str","createValueExpr","Array","isArray","map","Error","createBinaryExpr","operator","left","right","expr","escape","getParserOpt","setParserOpt","topToSQL","percent","prefix","columnIdentifierToSql","ident","toLowerCase","identifierToSql","isDual","commonTypeValue","result","symbol","push","toUpper","val","hasVal","literalToSQL","literal","parentheses","suffix","collate","join","replaceParams","ast","params","replaceParamsInner","keys","filter","forEach","JSON","parse","stringify","onPartitionsToSQL","partitions","partition","start","end","arrayStructTypeToSQL","dataType","definition","anglebracket","dataTypeUpper","field","field_name","field_type","commentToSQL","comment","triggerEventToSQL","events","event","kw","args","kwArgs","columns","columnRefToSQL","returningToSQL","returning","commonKeywordArgsToSQL","autoIncreatementToSQL","autoIncreatement","seed","increment","columnOrderListToSQL","columnOrderList","columnOrderToSQL","arrayStructValueToSQL","exprList","expr_list","columnsToSQL","arrayPath","array_path","brackets","col","exprToSQL","arrayExprListToSQL","arrayStructExprToSQL","length","exprToSQLConvertFn","alter","alterExprToSQL","aggr_func","over","orderby","within_group_orderby","fnName","overStr","overToSQL","distinct","separator","orderOrPartitionByToSQL","withinGroup","window_func","windowFuncToSQL","assign","leftVar","rightVal","binary_expr","rstr","isBetween","case","res","conditions","len","cond","cast","castToSQL","column_ref","extract","extractFunToSQL","function","funcToSQL","interval","intervalExpr","unit","show","showToSQL","struct","namedWindowExprListToSQL","exprOrigin","Reflect","deleteProperty","getExprListSQL","expressions","upperPrefix","info","members","varName","select","_next","unionToSQL","selectToSQL","unary_expr","unarExpr","space","tableToSQL","tableInfo","unnestExpr","as","withOffset","with_offset","unnestToSQL","table","db","schema","tablesample","schemaStr","tableName","values","valueSQL","valuesToSQL","tableSampleSQL","repeatable","tablesToSQL","tables","baseTable","clauses","joinExpr","on","using","tableOptionToSQL","tableOption","sql","array_index","arrow","column","offset","columnOffsetToSQL","number","columnDataType","scale","columnReferenceDefinitionToSQL","referenceDefinition","reference","match","onDelete","on_delete","onUpdate","on_update","columnOrder","nulls","opclass","order","columnDefinitionToSQL","columnDefinition","columnOpt","nullable","characterSet","character_set","check","storage","defaultOpt","default_val","autoIncrement","auto_increment","uniquePrimary","unique_or_primary","columnFormat","column_format","reference_definition","constraintDefinitionToSQL","columnOption","getDual","star","columnsStr","has","test","columnToSQL","composePrefixValSuffix","stmt","limitToSQL","limit","fetch","seperator","limitOffsetToSQL","alterToSQL","createDefinition","create_definitions","firstAfter","first_after","ifNotExists","if_not_exists","oldColumn","old_column","resource","indexTypeAndOptionToSQL","createDefinitionToSQL","indexTypeToSQL","indexType","indexOptionToSQL","indexOpt","upperType","indexOptArray","shift","indexOptionListToSQL","indexOptList","indexDefinition","constraintType","constraint_type","index_type","index_options","indexOptions","definitionSQL","indexDefinitionToSQL","indexSQL","index","target","expression","alias","tail","symbolChar","arrayDimension","array","arrayDimensionToSymbol","castType","cast_type","source","collateStr","commonCmdToSQL","options","lockUnlockToSQL","tableStmt","lockType","lock_type","tableInfoTemp","lockMode","lock_mode","nowait","lockInfo","pgLock","typeToSQLFn","analyze","attach","createToSQL","delete","from","where","columnInfo","addition","update","updateToSQL","insert","insertToSQL","drop","truncate","replace","declare","dec","at","declareInfo","use","rename","renameInfo","storeProcessCall","desc","set","lock","unlock","fun","_orderby","_limit","unionKeyword","union","bigQueryToSQL","withExpr","withToSQL","multipleToSQL","astInfo","asWindowSpec","as_window_specification","asWindowSpecToSQL","asStructVal","as_struct_val","for_sys_time_as_of","forSystem","forUpdate","for_update","groupby","having","parentheses_symbol","top","windowInfo","withInfo","distinctToSQL","like","temporary","tableOptions","table_options","ignoreReplace","ignore_replace","queryExpr","query_expr","likeType","likeTable","likeTableName","createTableToSQL","constraint","constraintKw","constraint_kw","deferrable","execute","for_each","location","when","createTriggerToSQL","extension","withName","version","createExtensionToSQL","concurrently","fileStream","filestream_on","include","indexColumns","index_columns","indexUsing","index_using","algorithmOpt","algorithm_option","lockOpt","lock_option","onKw","on_kw","tablespace","withBeforeWhere","with_before_where","withIndexOpt","includeColumns","createIndexToSQL","sequence","createSequenceToSQL","createDatabaseToSQL","windowSpec","window_specification","partitionby","windowFrame","window_frame_clause","windowSpecificationToSQL","namedWindowExprToSQL","namedWindowExpr","namedWindowExprInfo","constructArgsList","consider_nulls","argsList","isConsidernulls","isConsiderNullsInArgs","partitionToSQL","partitionArr","onDuplicateUpdate","on_duplicate_update","duplicateSet","setToSQL","sets","setItem","constraintDefinition","enforced","constraintSQL","isRecursive","recursive","withExprStr","cte","showExpr","showEventExpr","inClause","showCharacterSetExpr","op","showLikeAndWhereToSQL","showGrantsForExpr","forExpr","user","host","role_list","userAndHost","role","showGrantsForUser","surportedTypes","checkSupported","includes","toSQL","astToSQL","go","goToSQL","go_next","sqlItem","Parser","this","typeCase","parsers","trim","whiteList","checkFun","authorityList","hasAuthority","denyInfo","authority","hasCorrespondingAuthority","whiteAuthority","regex","RegExp","tableList","columnList","BigInt","peg$SyntaxError","message","expected","found","captureStackTrace","child","parent","ctor","constructor","peg$subclass","buildMessage","DESCRIBE_EXPECTATION_FNS","expectation","literalEscape","text","escapedParts","parts","classEscape","inverted","any","other","description","hex","ch","charCodeAt","toString","j","descriptions","sort","slice","describeExpected","describeFound","SyntaxError","input","peg$result","peg$FAILED","peg$startRuleFunctions","peg$parsestart","peg$startRuleFunction","peg$c3","peg$literalExpectation","peg$c5","peg$c10","peg$c12","peg$c17","head","createList","peg$c21","peg$c23","peg$c25","peg$c27","peg$c32","peg$c41","peg$c46","unshift","tableAlias","columnListTableAlias","clear","add","refreshColumnList","peg$c68","peg$c70","peg$c72","peg$c74","peg$c76","peg$c79","peg$c81","peg$c95","createBinaryExprChain","peg$c97","peg$c99","peg$c103","nk","peg$c106","peg$c108","peg$c110","peg$c112","peg$c114","peg$c116","peg$c124","peg$c126","peg$c129","peg$c131","peg$c133","peg$c142","reservedMap","peg$c146","peg$c147","peg$c148","peg$classExpectation","peg$c149","chars","peg$c151","peg$c152","peg$c153","peg$c155","peg$c156","peg$c157","peg$c161","peg$c162","peg$c163","peg$c164","peg$c165","peg$c166","peg$c167","peg$c169","peg$c173","peg$c188","peg$c190","peg$c192","peg$c194","peg$c196","peg$c198","peg$c200","peg$c202","peg$c204","peg$c206","peg$c208","peg$c210","peg$c212","peg$c214","peg$c216","peg$c218","peg$c220","peg$c222","peg$c224","peg$c226","peg$c228","peg$c240","peg$c243","ca","peg$c244","peg$c245","peg$c246","peg$c247","peg$c249","peg$c252","peg$c255","peg$c258","peg$c261","peg$c264","peg$c267","peg$c270","peg$c273","peg$c276","peg$c279","peg$c281","peg$c282","peg$c291","peg$c295","peg$c296","peg$c297","peg$c298","peg$c299","peg$c300","peg$c301","peg$c302","peg$c305","peg$c311","peg$c315","peg$c322","peg$c332","peg$c337","peg$c354","peg$c356","peg$c358","peg$c360","peg$c362","peg$c364","peg$c366","peg$c368","peg$c370","peg$c372","peg$c374","peg$c379","peg$c381","peg$c383","peg$c385","peg$c387","peg$c389","peg$c391","peg$c393","peg$c395","peg$c398","peg$c400","peg$c403","peg$c406","peg$c409","peg$c412","peg$c415","peg$c418","peg$c421","peg$c424","peg$c427","peg$c430","peg$c433","peg$c436","peg$c439","peg$c442","peg$c445","peg$c448","peg$c451","peg$c454","peg$c460","peg$c462","peg$c464","peg$c466","peg$c468","peg$c470","peg$c472","peg$c475","peg$c478","peg$c484","peg$c490","peg$c493","peg$c496","peg$c499","peg$c502","peg$c508","peg$c517","peg$c520","peg$c541","peg$c547","peg$c550","peg$c553","peg$c556","peg$c565","peg$c571","peg$c580","peg$c583","peg$c628","peg$c630","peg$c632","peg$c634","peg$c636","peg$c638","peg$c640","peg$c642","peg$c644","peg$c646","peg$c647","peg$c648","peg$c649","peg$c653","peg$c655","peg$currPos","peg$posDetailsCache","line","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","ignoreCase","peg$computePosDetails","pos","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","peg$fail","peg$buildStructuredError","s0","s2","peg$parse__","s1","s3","s4","s5","s6","s7","peg$parsequery_statement","peg$parseSEMICOLON","cur","peg$c1","peg$parsemultiple_stmt","s9","peg$parsewith_clause","peg$parseunion_stmt","peg$parseorder_by_clause","peg$parselimit_clause","with","peg$parsequery_expr","peg$parseselect_stmt","peg$parseset_op","substr","peg$parseident_start","peg$parseKW_UNION","peg$parseKW_ALL","peg$parseKW_DISTINCT","u","peg$c13","peg$parseunion_stmt_nake","peg$c15","s8","s10","s12","s14","s16","s18","s20","s22","s24","s26","peg$parseKW_SELECT","peg$parse___","peg$parseKW_AS","peg$parseKW_STRUCT","peg$parseKW_VALUE","k","peg$parsestruct_value","peg$parsecolumn_clause","peg$parseKW_FROM","peg$parsetable_base","peg$parsetable_ref","peg$parsetable_ref_list","peg$parsefrom_clause","peg$parseexpr","peg$parsefor_sys_time_as_of","peg$parseKW_WHERE","peg$parseor_and_where_expr","peg$parsewhere_clause","peg$parseKW_GROUP","peg$parseKW_BY","peg$parseexpr_list","peg$parsegroup_by_clause","peg$parseKW_HAVING","peg$parsehaving_clause","peg$parseKW_WINDOW","peg$parsenamed_window_expr","peg$parseCOMMA","peg$parsenamed_window_expr_list","peg$parsewindow_clause","sv","f","fs","w","g","h","win","peg$c19","peg$parseselect_stmt_nake","peg$parseKW_WITH","peg$parsecte_definition","peg$parseliteral_string","peg$parseident_name","peg$parseLPAREN","peg$parseRPAREN","peg$parseSTAR","peg$parsecolumns_list","peg$parsecolumn_list_item","peg$parsecolumn_offset_expr","peg$parseLBRAKE","peg$parseKW_OFFSET","peg$parseKW_ORDINAL","peg$parseliteral_numeric","peg$parseRBRAKE","peg$parseident","peg$parseDOT","tbl","pro","mid","peg$c37","peg$parsealias_clause","peg$parseexpr_alias","peg$c144","peg$parsequoted_ident","peg$parsealias_ident","peg$parsefrom_unnest_item","s11","peg$parsewith_offset","s13","s15","peg$parsejoin_op","peg$parseKW_USING","peg$parseon_clause","peg$c49","peg$c50","peg$parsetable_join","peg$parsetable_name","peg$c52","peg$parseKW_LEFT","peg$parseKW_OUTER","peg$parseKW_JOIN","peg$parseKW_RIGHT","peg$parseKW_FULL","peg$parseKW_CROSS","peg$parseKW_INNER","peg$c57","project","dt","obj","peg$c58","peg$c59","peg$parseKW_ON","peg$parseas_window_specification","peg$parsepartition_by_clause","peg$parseKW_BETWEEN","peg$parseKW_AND","e","peg$parsewindow_frame_clause","peg$parsewindow_specification","peg$parseKW_PARTITION","peg$parseKW_ORDER","peg$parseorder_by_element","peg$parseorder_by_list","peg$parseKW_DESC","peg$parseKW_ASC","peg$c85","peg$parsenumber_or_param","peg$parseparam","peg$parseKW_LIMIT","i1","peg$c86","el","peg$c87","peg$parsestruct_type","peg$parsestruct_expr","peg$parseprimary","peg$parseLOGIC_OPERATOR","peg$parselogic_operator_expr","peg$parseand_expr","peg$parseKW_OR","peg$parseor_expr","peg$parseadditive_operator","createUnaryExpr","peg$parseunary_expr","peg$parsearray_type","peg$parseKW_ARRAY","peg$parseliteral","peg$parseliteral_list","peg$c89","peg$parseparentheses_expr","peg$parseparentheses_list_expr","peg$c90","peg$parsearray_expr","peg$c94","peg$parsenot_expr","peg$parsecomparison_expr","peg$parseKW_NOT","peg$parseKW_EXISTS","peg$parseexists_op","peg$parseexists_expr","rh","peg$parseadditive_expr","peg$parsearithmetic_comparison_operator","peg$parsearithmetic_op_right","peg$parsein_op","peg$c122","peg$parsein_op_right","peg$parsebetween_or_not_between_op","peg$parsebetween_op_right","peg$parseKW_IS","peg$c118","peg$parseis_op_right","peg$parseKW_LIKE","peg$parselike_op","peg$parselike_op_right","peg$parsecomparison_op_right","peg$parsecolumn_ref","peg$parseKW_IN","peg$parsemultiplicative_expr","peg$parsemultiplicative_operator","list","s17","peg$parseKW_CAST","peg$parsedata_type","peg$parseKW_DECIMAL","peg$parseint","precision","peg$c232","peg$c233","peg$parseKW_SIGNED","peg$parseKW_UNSIGNED","peg$parsesignedness","peg$parseKW_INTEGER","peg$c234","peg$parsecast_expr","peg$parseKW_COUNT","peg$parsestar_expr","or","peg$c181","peg$parsecount_arg","peg$parseover_partition","peg$parseaggr_fun_count","peg$parseKW_SUM","peg$parseKW_MAX","peg$parseKW_MIN","peg$parseKW_AVG","peg$parseKW_SUM_MAX_MIN_AVG","peg$parseaggr_fun_smma","peg$parseaggr_func","peg$parseKW_EXTRACT","peg$parseextract_filed","peg$parseKW_TIMESTAMP","peg$parseKW_INTERVAL","peg$parseKW_TIME","peg$parseKW_DATE","peg$c230","peg$parseextract_func","peg$c186","peg$parseproc_func_name","bc","peg$parseKW_CURRENT_DATE","peg$parseKW_CURRENT_TIME","peg$parseKW_CURRENT_TIMESTAMP","peg$parsescalar_func","peg$c184","peg$parseon_update_current_timestamp","up","peg$c185","peg$parsefunc_call","peg$parseKW_CASE","peg$parsecase_when_then","peg$parsecase_else","peg$parseKW_END","condition_list","otherwise","peg$c137","peg$parsecase_expr","peg$parseKW_UNIT_YEAR","peg$parseKW_UNIT_MONTH","peg$parseKW_UNIT_DAY","peg$parseKW_UNIT_HOUR","peg$parseKW_UNIT_MINUTE","peg$parseKW_UNIT_SECOND","peg$parseinterval_unit","peg$parseinterval_expr","peg$parseKW_WHEN","peg$parseKW_THEN","peg$parseKW_ELSE","peg$parsecolumn_name","peg$parsecolumn_without_kw","peg$parsecolumn","peg$c141","charAt","peg$parsedouble_quoted_ident","peg$parsesingle_quoted_ident","peg$parsebackticks_quoted_ident","peg$parsecolumn_part","peg$parseident_part","peg$c175","peg$parseKW_OVER","peg$parseKW_TRUE","peg$parseKW_FALSE","peg$parseliteral_bool","peg$parseKW_NULL","peg$parseliteral_null","peg$parseKW_DATETIME","peg$parsesingle_char","peg$parsesingle_quote_char","peg$parseliteral_datetime","peg$c242","peg$parseescape_char","h1","h2","h3","h4","peg$parsehexDigit","String","fromCharCode","parseInt","peg$parsefrac","peg$parseexp","int_","frac","numStr","isBigInt","parseFloat","peg$c285","exp","peg$c286","peg$c287","peg$parsenumber","peg$parsedigits","peg$parsedigit","sign","peg$parsee","peg$parseLANGLE","peg$parseRANGLE","peg$parseOPERATOR_CONCATENATION","peg$parseOPERATOR_AND","peg$parsewhitespace","peg$parsecomment","peg$parsechar","peg$parseblock_comment","peg$parseEOL","peg$parseline_comment","peg$parsepound_sign_comment","peg$parseEOF","peg$parsedata_type_list","peg$parsedata_type_alias","DATA_TYPES","peg$c652","peg$parseKW_STRING","peg$parsecharacter_string_type","peg$parseKW_NUMERIC","peg$parseKW_INT_64","peg$parseKW_FLOAT_64","peg$parsenumeric_type","peg$parsedatetime_type","peg$parseKW_BYTES","peg$parseKW_BOOL","peg$parseKW_GEOGRAPHY","peg$parsebool_byte_geography_type","numberStr","previousMaxSafe","Number","MAX_SAFE_INTEGER","po","queryTableAlias","newColumnsList","Set","split","global","NodeSQLParser","util","Function","BASE","MAX_INT","MAX_INT_ARR","smallToArray","supportsNativeBigInt","Integer","v","radix","alphabet","caseSensitive","parseBase","parseValue","BigInteger","isSmall","SmallInteger","NativeBigInt","isPrecise","Math","floor","arrayToSmall","arr","compareAbs","createArray","x","ceil","b","sum","l_a","l_b","carry","base","addAny","addSmall","subtract","difference","a_l","b_l","borrow","subtractSmall","multiplyLong","product","a_i","multiplySmall","shiftLeft","concat","multiplySmallAndArray","square","divModSmall","lambda","q","remainder","divisor","quotient","divModAny","self","negate","abs","comparison","quotientDigit","divisorMostSignificantDigit","divMod1","guess","xlen","highx","highy","part","reverse","divMod2","qSign","mod","mSign","isBasicPrime","isUnit","equals","isEven","isDivisibleBy","lesser","millerRabinTest","nPrev","prev","divide","next","bigInt","modPow","plus","subtractAny","minus","small","multiply","l1","l2","multiplyKaratsuba","y","max","ac","bd","abcd","times","_multiplyBySmall","divmod","pow","_0","_1","_2","isNegative","isZero","modInv","isPositive","isOdd","compare","Infinity","compareTo","eq","notEquals","neq","greater","gt","lt","greaterOrEquals","geq","lesserOrEquals","leq","isPrime","strict","bits","bitLength","logN","log","toJSNumber","isProbablePrime","iterations","rng","randBetween","lastT","lastR","zero","newT","one","newR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","bitwise","fn","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","shiftRight","remQuo","and","xor","roughLOB","min","gcd","integerLogarithm","tmp","absBase","alphabetValues","digits","parseBaseFromArray","toBase","apply","valueOf","neg","out","digit","toBaseString","parseStringValue","decimalPlace","indexOf","parseNumberValue","toArray","toJSON","minusOne","lcm","isInstance","usedRNG","random","low","range","restricted","fromArray","webpackPolyfill","deprecate","paths","children"],"mappings":"CAAA,SAA2CA,EAAMC,GAChD,GAAsB,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,SACb,GAAqB,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,OACP,CACJ,IAAIK,EAAIL,IACR,IAAI,IAAIM,KAAKD,GAAuB,iBAAZJ,QAAuBA,QAAUF,GAAMO,GAAKD,EAAEC,IAPxE,CASGC,QAAQ,WACX,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUT,QAGnC,IAAIC,EAASM,EAAiBE,GAAY,CACzCJ,EAAGI,EACHC,GAAG,EACHV,QAAS,IAUV,OANAW,EAAQF,GAAUG,KAAKX,EAAOD,QAASC,EAAQA,EAAOD,QAASQ,GAG/DP,EAAOS,GAAI,EAGJT,EAAOD,QA0Df,OArDAQ,EAAoBK,EAAIF,EAGxBH,EAAoBM,EAAIP,EAGxBC,EAAoBO,EAAI,SAASf,EAASgB,EAAMC,GAC3CT,EAAoBU,EAAElB,EAASgB,IAClCG,OAAOC,eAAepB,EAASgB,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhET,EAAoBe,EAAI,SAASvB,GACX,oBAAXwB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAepB,EAASwB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAepB,EAAS,aAAc,CAAE0B,OAAO,KAQvDlB,EAAoBmB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQlB,EAAoBkB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAvB,EAAoBe,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOlB,EAAoBO,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRtB,EAAoB0B,EAAI,SAASjC,GAChC,IAAIgB,EAAShB,GAAUA,EAAO4B,WAC7B,WAAwB,OAAO5B,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAO,EAAoBO,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRT,EAAoBU,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG5B,EAAoB+B,EAAI,GAIjB/B,EAAoBA,EAAoBgC,EAAI,I,u1CCpErD,IAAMC,EAAc,CAClBC,SAAWC,WACXC,KAAW,SAGTC,EAAYJ,EAEhB,SAASK,EAAsBC,EAASC,EAAQC,GAC9C,GAAKA,EACL,OAAKF,EACL,UAAUA,EAAQG,cAAlB,YAAmCF,EAAOC,IADrBD,EAAOC,GAI9B,SAASE,EAAUJ,EAASK,GAC1B,GAAKA,EACL,gBAAUL,EAAQG,cAAlB,YAAmCE,GAOrC,SAASC,EAAgB3B,GACvB,IAAMkB,EAAO,EAAOlB,GACpB,GAAI4B,MAAMC,QAAQ7B,GAAQ,MAAO,CAAEkB,KAAM,YAAalB,MAAOA,EAAM8B,IAAIH,IACvE,GAAc,OAAV3B,EAAgB,MAAO,CAAEkB,KAAM,OAAQlB,MAAO,MAClD,OAAQkB,GACN,IAAK,UACH,MAAO,CAAEA,KAAM,OAAQlB,SACzB,IAAK,SACH,MAAO,CAAEkB,KAAM,SAAUlB,SAC3B,IAAK,SACH,MAAO,CAAEkB,KAAM,SAAUlB,SAC3B,QACE,MAAM,IAAI+B,MAAJ,gCAAmCb,EAAnC,cAUZ,SAASc,EAAiBC,EAAUC,EAAMC,GACxC,IAAMC,EAAO,CAAEH,WAAUf,KAAM,eAE/B,OADAkB,EAAKF,KAAOA,EAAKhB,KAAOgB,EAAOP,EAAgBO,GAC9B,YAAbD,GAAuC,gBAAbA,GAC5BG,EAAKD,MAAQ,CACXjB,KAAQ,YACRlB,MAAQ,CAAC2B,EAAgBQ,EAAM,IAAKR,EAAgBQ,EAAM,MAErDC,IAETA,EAAKD,MAAQA,EAAMjB,KAAOiB,EAAQR,EAAgBQ,GAC3CC,GA2BT,SAASC,EAAOX,GACd,OAAOA,EAWT,SAASY,IACP,OAAOnB,EAGT,SAASoB,EAAahB,GACpBJ,EAAYI,EAGd,SAASiB,EAASjB,GAChB,GAAKA,EAAL,CADqB,IAEbvB,EAAmBuB,EAAnBvB,MAAOyC,EAAYlB,EAAZkB,QACTC,EAAS,OAAH,OAAU1C,GACtB,OAAKyC,EACL,UAAUC,EAAV,YAAoBD,EAAQjB,eADPkB,GAIvB,SAASC,EAAsBC,GAAO,IAC5B5B,EAAasB,IAAbtB,SACR,GAAK4B,EACL,OAAQ5B,GAAYA,EAAS6B,eAC3B,IAAK,aACL,IAAK,MACH,iBAAWD,EAAX,KACF,IAAK,cACH,iBAAWA,EAAX,KACF,IAAK,QACL,IAAK,UACL,IAAK,WACL,QACE,iBAAYA,EAAZ,MAIN,SAASE,EAAgBF,EAAOG,GAAQ,IAC9B/B,EAAasB,IAAbtB,SACR,IAAe,IAAX+B,EAAiB,MAAO,IAAP,OAAWH,EAAX,KACrB,GAAKA,EACL,OAAQ5B,GAAYA,EAAS6B,eAC3B,IAAK,QACL,IAAK,UACL,IAAK,SACH,iBAAYD,EAAZ,KACF,IAAK,aACH,iBAAWA,EAAX,KACF,IAAK,cACH,iBAAWA,EAAX,KACF,IAAK,WACL,IAAK,MACH,OAAOA,EACT,QACE,iBAAYA,EAAZ,MAIN,SAASI,EAAgBzB,GACvB,IAAM0B,EAAS,GACf,IAAK1B,EAAK,OAAO0B,EAFW,IAGpB/B,EAAwBK,EAAxBL,KAAMgC,EAAkB3B,EAAlB2B,OAAQlD,EAAUuB,EAAVvB,MAItB,OAHAiD,EAAOE,KAAKjC,EAAKM,eACb0B,GAAQD,EAAOE,KAAKD,GACxBD,EAAOE,KAAKnD,EAAMwB,eACXyB,EAGT,SAASG,EAAQC,GACf,GAAKA,EACL,OAAOA,EAAI7B,cAGb,SAAS8B,EAAOD,GACd,OAAOA,EAGT,SAASE,EAAaC,GACpB,GAAKA,EAAL,CAD6B,IAErBtC,EAA6BsC,EAA7BtC,KAAMuC,EAAuBD,EAAvBC,YAAazD,EAAUwD,EAAVxD,MACvB0B,EAAM1B,EACV,OAAQkB,GACN,IAAK,SACHQ,EAAM,IAAH,OAAc1B,EAAd,KACH,MACF,IAAK,eACH0B,EAAM,KAAH,OAAe1B,EAAf,KACH,MACF,IAAK,aACH0B,EAAM,KAAH,OAAe1B,EAAf,KACH,MACF,IAAK,sBACH0B,EAAM,IAAH,OAAc1B,EAAd,KACH,MACF,IAAK,sBACH0B,EAAM,IAAH,OAAO1B,EAAP,KACH,MACF,IAAK,UACL,IAAK,OACH0B,EAAM1B,EAAQ,OAAS,QACvB,MACF,IAAK,OACH0B,EAAM,OACN,MACF,IAAK,OACHA,EAAM,IACN,MACF,IAAK,QACHA,EAAM,IAAH,OAAO1B,GACV,MACF,IAAK,SACH0B,EAAM1B,EAAMwB,cACZ,MACF,IAAK,OACL,IAAK,WACL,IAAK,OACL,IAAK,YACHE,EAAM,GAAH,OAAMR,EAAKM,cAAX,aAA6BxB,EAA7B,KAxCsB,IA6CrB0C,EAAmBc,EAAnBd,OAAQgB,EAAWF,EAAXE,OACVT,EAAS,GAKf,OAJIP,GAAQO,EAAOE,KAAKC,EAAQV,IAChCO,EAAOE,KAAKzB,GACRgC,GAAUA,EAAOC,SAASV,EAAOE,KAAKH,EAAgBU,EAAOC,SAASC,KAAK,MAC/ElC,EAAMuB,EAAOW,KAAK,KACXH,EAAc,IAAH,OAAO/B,EAAP,KAAgBA,GAGpC,SAASmC,EAAcC,EAAKC,GAC1B,OA7JF,SAASC,EAAmBF,EAAKG,GAc/B,OAbAxE,OAAOwE,KAAKH,GACTI,QAAO,SAAA5D,GACN,IAAMN,EAAQ8D,EAAIxD,GAClB,OAAOsB,MAAMC,QAAQ7B,IAA4B,WAAjB,EAAOA,IAAgC,OAAVA,KAE9DmE,SAAQ,SAAA7D,GACP,IAAM8B,EAAO0B,EAAIxD,GACjB,GAAsB,WAAhB,EAAO8B,IAAmC,UAAdA,EAAKlB,KAAmB,OAAO8C,EAAmB5B,EAAM6B,GAC1F,QAAgC,IAArBA,EAAK7B,EAAKpC,OAAwB,MAAM,IAAI+B,MAAJ,kCAAqCK,EAAKpC,MAA1C,WAEnD,OADA8D,EAAIxD,GAAOqB,EAAgBsC,EAAK7B,EAAKpC,QAC9B,QAGJ8D,EA+IAE,CAAmBI,KAAKC,MAAMD,KAAKE,UAAUR,IAAOC,GAG7D,SAASQ,EAAkBnC,GAAM,IACvBlB,EAAqBkB,EAArBlB,KAAMsD,EAAepC,EAAfoC,WAUd,MATe,CACbpB,EAAQlC,GADK,WAETsD,EAAW1C,KAAI,SAAA2C,GAEjB,GAAwB,UADQA,EAAxBvD,KAC0B,OAAOqC,EAAakB,GAFxB,IAGtBC,EAAuBD,EAAvBC,MAAOC,EAAgBF,EAAhBE,IAAKzB,EAAWuB,EAAXvB,OACpB,gBAAUK,EAAamB,GAAvB,YAAiCtB,EAAQF,GAAzC,YAAoDK,EAAaoB,OAChEf,KAAK,MAPK,MASDA,KAAK,KAGrB,SAASgB,EAAqBxC,GAC5B,GAAKA,EAAL,CADkC,IAE1ByC,EAAuCzC,EAAvCyC,SAAUC,EAA6B1C,EAA7B0C,WAAYC,EAAiB3C,EAAjB2C,aACxBC,EAAgB5B,EAAQyB,GAE9B,GAD6C,UAAlBG,GAA+C,WAAlBA,EAChC,OAAOA,EAC/B,IAAM/B,EAAS6B,GAAcA,EAAWhD,KAAI,SAAAmD,GAK1C,MADoB,CADhBA,EADFC,WAE8BN,EAD5BK,EADqBE,aAGNjB,OAAOZ,GAAQM,KAAK,QACtCA,KAAK,MACR,OAAOmB,EAAe,GAAH,OAAMC,EAAN,YAAuB/B,EAAvB,eAAsC+B,EAAtC,YAAuD/B,IAG5E,SAASmC,EAAaC,GACpB,GAAKA,EAAL,CACA,IAAMpC,EAAS,GACP5B,EAA2BgE,EAA3BhE,QAAS6B,EAAkBmC,EAAlBnC,OAAQlD,EAAUqF,EAAVrF,MAIzB,OAHAiD,EAAOE,KAAK9B,EAAQG,eAChB0B,GAAQD,EAAOE,KAAKD,GACxBD,EAAOE,KAAKI,EAAavD,IAClBiD,EAAOW,KAAK,MAGrB,SAAS0B,EAAkBC,GACzB,OAAOA,EAAOzD,KAAI,SAAA0D,GAAS,IACRC,EAAaD,EAAtBnE,QAAaqE,EAASF,EAATE,KACfzC,EAAS,CAACG,EAAQqC,IACxB,GAAIC,EAAM,KACSC,EAAoBD,EAA7BrE,QAAiBuE,EAAYF,EAAZE,QACzB3C,EAAOE,KAAKC,EAAQuC,GAASC,EAAQ9D,IAAI+D,KAAgBjC,KAAK,OAEhE,OAAOX,EAAOW,KAAK,QAClBA,KAAK,QAGV,SAASkC,EAAeC,GACtB,OAAKA,EAEE,CAAC,YADYA,EAAZH,QACqB9D,IAAI+D,KAAgB3B,OAAOZ,GAAQM,KAAK,OAAOA,KAAK,KAF1D,GAKzB,SAASoC,EAAuBL,GAC9B,OAAKA,EACE,CAACvC,EAAQuC,EAAOtE,SAAU+B,EAAQuC,EAAOD,OAD5B,GAItB,SAASO,EAAsBC,GAC7B,IAAKA,GAAgD,iBAArBA,EAA+B,OAAO9C,EAAQ8C,GAD/B,IAEvC7E,EAA0C6E,EAA1C7E,QAAS8E,EAAiCD,EAAjCC,KAAMC,EAA2BF,EAA3BE,UAAW3C,EAAgByC,EAAhBzC,YAC9BR,EAASG,EAAQ/B,GAErB,OADIoC,IAAaR,GAAU,IAAJ,OAAQM,EAAa4C,GAArB,aAA+B5C,EAAa6C,GAA5C,MAChBnD,EAGT,SAASoD,EAAqBC,GAC5B,GAAKA,EACL,OAAOA,EAAgBxE,IAAIyE,KAAkBrC,OAAOZ,GAAQM,KAAK,Q,uaCtSnE,SAAS4C,EAAsBpE,GAAM,IAEtBqE,EAETrE,EAFFsE,UACAxF,EACEkB,EADFlB,KAEF,OAAQkC,kBAAQlC,IACd,IAAK,SACH,iBAAWyF,YAAaF,GAAxB,KACF,IAAK,QACH,OAvBN,SAA4BrE,GAAM,IAElBwE,EAIVxE,EAJFyE,WACAC,EAGE1E,EAHF0E,SACWL,EAETrE,EAFFsE,UACAjD,EACErB,EADFqB,YAEF,IAAKgD,EAAU,MAAO,IAAP,OAAWE,YAAaC,GAAxB,KACf,GAAIhF,MAAMC,QAAQ4E,GAAW,MAAO,IAAP,OAAWA,EAAS3E,KAAI,SAAAiF,GAAG,iBAAQJ,YAAaI,GAArB,QAA8B7C,OAAOZ,UAAQM,KAAK,MAA7E,KAC7B,IAAMX,EAAS+D,EAAUP,GACzB,OAAIK,EAAiB,IAAP,OAAW7D,EAAX,KACPQ,EAAc,IAAH,OAAOR,EAAP,KAAmBA,EAY1BgE,CAAmB7E,GAC5B,QACE,MAAO,IAIb,SAAS8E,EAAqB9E,GAAM,IAC1B0C,EAAwB1C,EAAxB0C,WAAYzD,EAAYe,EAAZf,QACd4B,EAAS,CAACG,kBAAQ/B,IAMxB,OALIyD,GAAoC,WAAtB,EAAOA,KACvB7B,EAAOkE,OAAS,EAChBlE,EAAOE,KAAKyB,+BAAqBE,KAEnC7B,EAAOE,KAAKqD,EAAsBpE,IAC3Ba,EAAOiB,OAAOZ,UAAQM,KAAK,I,wPC1BpC,IAAMwD,EAAqB,CACzBC,MAAcC,IACdC,UCbF,SAAmBnF,GAAM,IAEfsD,EAA8CtD,EAA9CsD,KAAM8B,EAAwCpF,EAAxCoF,KAAMC,EAAkCrF,EAAlCqF,QAASC,EAAyBtF,EAAzBsF,qBACzBhG,EAAMsF,EAAUtB,EAAKtD,MACnBuF,EAASvF,EAAK9C,KACdsI,EAAUC,YAAUL,GAC1B,GAAI9B,EAAKoC,SAAU,CACjB,IAAMC,EAAYrC,EAAKtD,KAAKqB,YAAc,GAAK,IAC/C/B,EAAM,CAAC,WAAYA,GAAKkC,KAAKmE,GAE3BrC,EAAK+B,UAAS/F,EAAM,GAAH,OAAMA,EAAN,YAAasG,EAAwBtC,EAAK+B,QAAS,cACpEA,IAAS/F,EAAM,GAAH,OAAMA,EAAN,YAAasG,EAAwBP,EAAS,cAC9D,IAAMQ,EAAcP,EAAuB,iBAAH,OAAoBM,EAAwBN,EAAsB,YAAlE,KAAmF,GAC3H,MAAO,CAAC,GAAD,OAAIC,EAAJ,YAAcjG,EAAd,KAAsBuG,EAAaL,GAAS1D,OAAOZ,UAAQM,KAAK,MDCvEsE,YAAcC,IACd,MAAcjB,EACdkB,OElBF,SAAqBhG,GAAM,IAEjBF,EAAiCE,EAAjCF,KAAMC,EAA2BC,EAA3BD,MAAOe,EAAoBd,EAApBc,OAAQ7B,EAAYe,EAAZf,QAC7Ba,EAAKb,QAAUA,EACf,IAAMgH,EAAUrB,EAAU9E,GACpBoG,EAAWtB,EAAU7E,GAC3B,gBAAUkG,EAAV,YAAqBnF,EAArB,YAA+BoF,IFa/BC,YGnBF,SAAqBnG,GAAM,IACnBH,EAAaG,EAAbH,SACFuG,EAAOxB,EAAU5E,EAAKD,OACtBsG,GAAY,EAChB,GAAI7G,MAAMC,QAAQ2G,GAAO,CACvB,OAAQvG,GACN,IAAK,IACHA,EAAW,KACX,MACF,IAAK,KACHA,EAAW,SACX,MACF,IAAK,UACL,IAAK,cACHwG,GAAY,EACZD,EAAO,GAAH,OAAMA,EAAK,GAAX,gBAAqBA,EAAK,IAK7BC,IAAWD,EAAO,IAAH,OAAOA,EAAK5E,KAAK,MAAjB,MAEtB,IAAMlC,EAAM,CAACsF,EAAU5E,EAAKF,MAAOD,EAAUuG,GAAM5E,KAAK,KACxD,OAAOxB,EAAKqB,YAAL,WAAuB/B,EAAvB,KAAgCA,GHHvCgH,KIpBF,SAAmBtG,GACjB,IAAMuG,EAAM,CAAC,QACPC,EAAaxG,EAAKsD,KAEpBtD,EAAKA,MAAMuG,EAAIxF,KAAK6D,EAAU5E,EAAKA,OAEvC,IAAK,IAAIzD,EAAI,EAAGkK,EAAMD,EAAWzB,OAAQxI,EAAIkK,IAAOlK,EAClDgK,EAAIxF,KAAKyF,EAAWjK,GAAGuC,KAAKM,eACxBoH,EAAWjK,GAAGmK,OAChBH,EAAIxF,KAAK6D,EAAU4B,EAAWjK,GAAGmK,OACjCH,EAAIxF,KAAK,SAEXwF,EAAIxF,KAAK6D,EAAU4B,EAAWjK,GAAGsE,SAKnC,OAFA0F,EAAIxF,KAAK,OAEFwF,EAAI/E,KAAK,MJIhBmF,KAAcC,IACdC,WAAcpD,IACdqD,QAAcC,IACdC,SAAcC,IACdC,SKxBF,SAAuBC,GAAc,IAC3BnH,EAAemH,EAAfnH,KAAMoH,EAASD,EAATC,KAEd,MADe,CAAC,WAAYxC,EAAU5E,GAAOgB,kBAAQoG,IACvCtF,OAAOZ,UAAQM,KAAK,MLsBlC6F,KAAcC,IACdC,OAAczC,EACd,OAAc0C,KAchB,SAAS5C,EAAU6C,GACjB,GAAKA,EAAL,CACA,IAAMzH,EAAOyH,EACb,GAAIA,EAAW/F,IAAK,KACVA,EAAQ1B,EAAR0B,IACRgG,QAAQC,eAAe3H,EAAM0B,GAC7B,cAAkBrE,OAAOwE,KAAKH,GAA9B,eAAoC,CAA/B,IAAMxD,EAAG,KACZ8B,EAAK9B,GAAOwD,EAAIxD,IAGpB,OAAO8G,EAAmBhF,EAAKlB,MAAQkG,EAAmBhF,EAAKlB,MAAMkB,GAAQmB,uBAAanB,IAU5F,SAAS4H,EAAevD,GACtB,OAAKA,EACEA,EAAS3E,IAAIkF,GADE,GAgBxB,SAASgB,EAAwB5F,EAAMM,GACrC,IAAKd,MAAMC,QAAQO,GAAO,MAAO,GACjC,IAAI6H,EAAc,GACZC,EAAc9G,kBAAQV,GAC5B,OAAQwH,GACN,IAAK,WACHD,EAAc7H,EAAKN,KAAI,SAAAqI,GAAI,gBAAOnD,EAAUmD,EAAK/H,MAAtB,YAA+B+H,EAAKjJ,SAC/D,MACF,IAAK,eAGL,QACE+I,EAAc7H,EAAKN,KAAI,SAAAqI,GAAI,gBAAOnD,EAAUmD,EAAK/H,UAGrD,OAAOX,oBAAUyI,EAAaD,EAAYrG,KAAK,OAtDjDwD,EAAkB,IATlB,SAAkBhF,GAAM,MAC2BA,EAAzCM,cADc,MACL,IADK,EACApD,EAA2B8C,EAA3B9C,KAAM8K,EAAqBhI,EAArBgI,QAAS/I,EAAYe,EAAZf,QAC/BgC,EAAM,GACRhC,GAASgC,EAAIF,KAAK9B,GACtB,IAAMgJ,EAAUD,GAAWA,EAAQjD,OAAS,EAA5B,UAAmC7H,EAAnC,YAA2C8K,EAAQxG,KAAK,MAAStE,EAEjF,OADA+D,EAAIF,KAAJ,UAAYT,GAAU,IAAtB,OAA2B2H,IACpBhH,EAAIO,KAAK,MA8BlBwD,EAAmBV,UAAY,SAAAtE,GAC7B,IAAMV,EAAMsI,EAAe5H,EAAKpC,OAChC,OAAOoC,EAAKqB,YAAL,WAAuB/B,EAAIkC,KAAK,MAAhC,KAA2ClC,GAGpD0F,EAAmBkD,OAAS,SAAAlI,GAC1B,IAAMV,EAA4B,WAAtB,EAAOU,EAAKmI,OAAqBC,YAAWpI,GAAQqI,YAAYrI,GAC5E,OAAOA,EAAKqB,YAAL,WAAuB/B,EAAvB,KAAgCA,GAGzC0F,EAAmBsD,WAtBnB,SAAoBC,GAAU,IACpB1I,EAAgC0I,EAAhC1I,SAAUwB,EAAsBkH,EAAtBlH,YAAarB,EAASuI,EAATvI,KACzBwI,EAAsB,MAAb3I,GAAiC,MAAbA,EAAoB,GAAK,IACtDP,EAAM,GAAH,OAAMO,GAAN,OAAiB2I,GAAjB,OAAyB5D,EAAU5E,IAC5C,OAAOqB,EAAc,IAAH,OAAO/B,EAAP,KAAgBA,I,6BM7DpC,gIAkBA,SAASmJ,EAAWC,GAClB,GAAgC,WAA5B1H,kBAAQ0H,EAAU5J,MAAoB,OAf5C,SAAqB6J,GAAY,IACvB7J,EAA4C6J,EAA5C7J,KAAM8J,EAAsCD,EAAtCC,GAAI5I,EAAkC2I,EAAlC3I,KAAmB6I,EAAeF,EAA5BG,YAUxB,MATe,CAAC,GAAD,OACV9H,kBAAQlC,GADE,YACOkB,GAAQ4E,YAAU5E,IAAS,GADlC,KAEbhB,gCAAsB,KAAM0B,kBAAiBkI,GAC7C5J,gCACEgC,kBAAQ6H,GAAcA,EAAW5J,SACjCyB,kBACAmI,GAAcA,EAAWD,KAGf9G,OAAOZ,UAAQM,KAAK,KAIeuH,CAAYL,GADhC,IAErBM,EAA6CN,EAA7CM,MAAOC,EAAsCP,EAAtCO,GAAIL,EAAkCF,EAAlCE,GAAI5I,EAA8B0I,EAA9B1I,KAAMkJ,EAAwBR,EAAxBQ,OAAQC,EAAgBT,EAAhBS,YAC/BvK,EAAW8B,0BAAgBuI,GAC3BG,EAAY1I,0BAAgBwI,GAC9BG,EAAYL,GAAStI,0BAAgBsI,GACzC,GAAIhJ,GAAsB,WAAdA,EAAKlB,KAAmB,KAC1BuC,EAAwBrB,EAAxBqB,YAAaiI,EAAWtJ,EAAXsJ,OACfC,EAAW,CAAClI,GAAe,IAAK,GAAIA,GAAe,KACzDkI,EAAS,GAAT,UAAiBvK,gCAAsB,SAAUwK,IAAaF,IAC9DD,EAAYE,EAASzH,OAAOZ,UAAQM,KAAK,IAEvCxB,GAAsB,WAAdA,EAAKlB,OAAmBuK,EAAYzE,YAAU5E,IAC1D,IACMa,EAAS,CADH,CAACjC,EAAUwK,EAAWC,GAAWvH,OAAOZ,UAAQM,KAAK,MAEjE,GAAI2H,EAAa,CACf,IAAMM,EAAiB,CACrB,cACA7E,YAAUuE,EAAYnJ,MACtBmB,uBAAagI,EAAYO,aACzB5H,OAAOZ,UAAQM,KAAK,KACtBX,EAAOE,KAAK0I,GAGd,OADIb,GAAI/H,EAAOE,KAAK,KAAML,0BAAgBkI,IACnC/H,EAAOW,KAAK,KAOrB,SAASmI,EAAYC,GACnB,IAAMC,EAAYD,EAAO,GACnBE,EAAU,GAChB,GAAuB,SAAnBD,EAAU/K,KAAiB,MAAO,OACtCgL,EAAQ/I,KAAK0H,EAAWoB,IACxB,IAAK,IAAItN,EAAI,EAAGA,EAAIqN,EAAO7E,SAAUxI,EAAG,CACtC,IAAMwN,EAAWH,EAAOrN,GAChByN,EAAoBD,EAApBC,GAAIC,EAAgBF,EAAhBE,MAAOzI,EAASuI,EAATvI,KACblC,EAAM,GACZA,EAAIyB,KAAKS,EAAO,IAAH,OAAOA,GAAS,KAC7BlC,EAAIyB,KAAK0H,EAAWsB,IACpBzK,EAAIyB,KAAK/B,gCAAsB,KAAM4F,IAAWoF,IAC5CC,GAAO3K,EAAIyB,KAAJ,iBAAmBkJ,EAAMvK,IAAIgB,mBAAiBc,KAAK,MAAnD,MACXsI,EAAQ/I,KAAKzB,EAAIwC,OAAOZ,UAAQM,KAAK,MAEvC,OAAOsI,EAAQhI,OAAOZ,UAAQM,KAAK,IAGrC,SAAS0I,EAAiBC,GAAa,IAC7BlL,EAA2BkL,EAA3BlL,QAAS6B,EAAkBqJ,EAAlBrJ,OAAQlD,EAAUuM,EAAVvM,MACnBwM,EAAM,CAACnL,EAAQG,eAGrB,OAFI0B,GAAQsJ,EAAIrJ,KAAKD,GACrBsJ,EAAIrJ,KAAKnD,GACFwM,EAAI5I,KAAK,O,2/BCnDlB,SAASiC,EAAezD,GAAM,IAE1BqK,EAEErK,EAFFqK,YAAaC,EAEXtK,EAFWsK,MAAO1B,EAElB5I,EAFkB4I,GAAIrH,EAEtBvB,EAFsBuB,QAASgJ,EAE/BvK,EAF+BuK,OAAQ5J,EAEvCX,EAFuCW,OAAQuI,EAE/ClJ,EAF+CkJ,OAAQF,EAEvDhJ,EAFuDgJ,MAAO3H,EAE9DrB,EAF8DqB,YAAa/C,EAE3E0B,EAF2E1B,SAC7EgD,EACEtB,EADFsB,OAEEhC,EAAiB,MAAXiL,EAAiB,IAV7B,SAA2BA,EAAQ5J,GACjC,GAAsB,iBAAX4J,EAAqB,OAAO7J,0BAAgB6J,EAAQ5J,GADtB,IAEjCX,EAAyBuK,EAAzBvK,KAAMwK,EAAmBD,EAAnBC,OAAQlJ,EAAWiJ,EAAXjJ,OACtB,MAAO,CAACsD,YAAU5E,GAAOwK,EAAQlJ,GAAQQ,OAAOZ,UAAQM,KAAK,IAO5BiJ,CAAkBF,EAAQ5J,GACvDqI,IAAO1J,EAAM,GAAH,OAAMoB,0BAAgBsI,GAAtB,YAAgC1J,IAC1C4J,IAAQ5J,EAAM,GAAH,OAAMoB,0BAAgBwI,GAAtB,YAAiC5J,IAC5C+K,IAAa/K,EAAM,GAAH,OAAMA,EAAN,YAAa+K,EAAYK,OAAzB,MACpB,IAAM7J,EAAS,CACbvB,EACAN,gCAAsB,KAAM4F,IAAWgE,GACvC5J,gCAAsBsL,EAAOnJ,eAAc7C,IAEzCiD,GAASV,EAAOE,KAAKH,0BAAgBW,GAASC,KAAK,MACvDX,EAAOE,KAAKC,kBAAQM,IACpB,IAAM8I,EAAMvJ,EAAOiB,OAAOZ,UAAQM,KAAK,KACvC,OAAOH,EAAc,IAAH,OAAO+I,EAAP,KAAgBA,EAGpC,SAASO,EAAejI,GAAY,MACgBA,GAAc,GAAxDD,EAD0B,EAC1BA,SAAUsC,EADgB,EAChBA,OAAQzD,EADQ,EACRA,OAAQsJ,EADA,EACAA,MAAO5K,EADP,EACOA,KACrCa,EAAS4B,EAIb,OAHc,MAAVsC,IAAgBlE,GAAU,IAAJ,OAAQ,CAACkE,EAAQ6F,GAAO9I,QAAO,SAAAb,GAAG,OAAW,MAAPA,KAAaO,KAAK,MAAxD,MACtBF,GAAUA,EAAOyD,SAAQlE,GAAU,IAAJ,OAAQS,EAAOE,KAAK,OACnDxB,IAAMa,GAAU+D,YAAU5E,IACvBa,EAGT,SAASgK,EAA+BC,GACtC,IAAMC,EAAY,GAClB,IAAKD,EAAqB,OAAOC,EAF0B,IAIzDrI,EAMEoI,EANFpI,WACAzD,EAKE6L,EALF7L,QACA+L,EAIEF,EAJFE,MACAhC,EAGE8B,EAHF9B,MACWiC,EAETH,EAFFI,UACWC,EACTL,EADFM,UAQF,OANAL,EAAUhK,KAAK9B,EAAQG,eACvB2L,EAAUhK,KAAK4I,YAAYX,IAC3B+B,EAAUhK,KAAV,WAAmB2B,EAAWhD,IAAIgB,mBAAiBc,KAAK,MAAxD,MACAuJ,EAAUhK,KAAKC,kBAAQgK,IACvBD,EAAUhK,KAAV,MAAAgK,EAAS,EAASnK,0BAAgBqK,KAClCF,EAAUhK,KAAV,MAAAgK,EAAS,EAASnK,0BAAgBuK,KAC3BJ,EAAUjJ,OAAOZ,UA6B1B,SAASiD,EAAiBkH,GAAa,IAC7Bd,EAA2Cc,EAA3Cd,OAAQhJ,EAAmC8J,EAAnC9J,QAAS+J,EAA0BD,EAA1BC,MAAOC,EAAmBF,EAAnBE,QAASC,EAAUH,EAAVG,MAQzC,MAPe,CACb5G,YAAU2F,GACVvL,gCAAsBuC,GAAWA,EAAQzC,KAAM4B,kBAAiBa,GAAWA,EAAQ3D,OACnF2N,EACAvK,kBAAQwK,GACRxK,kBAAQsK,IAEIxJ,OAAOZ,UAAQM,KAAK,KAGpC,SAASiK,EAAsBC,GAC7B,IAAMnB,EAAS,GACTrN,EAAOuG,EAAeiI,EAAiBnB,QACvC9H,EAAWkI,EAAee,EAAiBhJ,YACjD6H,EAAOxJ,KAAK7D,GACZqN,EAAOxJ,KAAK0B,GACZ,IAAMkJ,EA5CR,SAAsBjJ,GACpB,IAAMiJ,EAAY,GAEhBC,EAMElJ,EANFkJ,SAAyBC,EAMvBnJ,EANQoJ,cAA6BC,EAMrCrJ,EANqCqJ,MAAO9I,EAM5CP,EAN4CO,QAAS1B,EAMrDmB,EANqDnB,QAASyK,EAM9DtJ,EAN8DsJ,QACnDC,EAKXvJ,EALFwJ,YACgBC,EAIdzJ,EAJF0J,eACmBC,EAGjB3J,EAHF4J,kBACeC,EAEb7J,EAFF8J,cACsB1B,EACpBpI,EADF+J,qBAIF,GADAd,EAAU5K,KAAKC,kBAAQ4K,GAAYA,EAAShO,QACxCqO,EAAY,KACNnN,EAAgBmN,EAAhBnN,KAAMlB,EAAUqO,EAAVrO,MACd+N,EAAU5K,KAAKjC,EAAKM,cAAewF,YAAUhH,IAS/C,OAPA+N,EAAU5K,KAAK2L,YAA0BX,IACzCJ,EAAU5K,KAAK8C,gCAAsBsI,GAAgBnL,kBAAQqL,GAAgBrJ,uBAAaC,IAC1F0I,EAAU5K,KAAV,MAAA4K,EAAS,EAAS/K,0BAAgBiL,KAClCF,EAAU5K,KAAV,MAAA4K,EAAS,EAAS/K,0BAAgBW,KAClCoK,EAAU5K,KAAV,MAAA4K,EAAS,EAAS/K,0BAAgB2L,KAClCZ,EAAU5K,KAAV,MAAA4K,EAAS,EAAS/K,0BAAgBoL,KAClCL,EAAU5K,KAAV,MAAA4K,EAAS,EAASd,EAA+BC,KAC1Ca,EAAU7J,OAAOZ,UAAQM,KAAK,KAqBnBmL,CAAajB,GAE/B,OADAnB,EAAOxJ,KAAK4K,GACLpB,EAAOzI,OAAOZ,UAAQM,KAAK,KA6BpC,SAAS+C,EAAaf,EAASoG,GAC7B,IAAKpG,GAAuB,MAAZA,EAAiB,OAAOA,EACxC,IAAM7C,EAbR,SAAiBiJ,GACf,IAAMC,EAAYrK,MAAMC,QAAQmK,IAAWA,EAAO,GAClD,SAAIC,GAAgC,SAAnBA,EAAU/K,MAWZ8N,CAAQhD,GACjB/I,EAAS,GACIwD,EAAyBb,EAApCc,UAAqBuI,EAAerJ,EAAfqJ,KAAM/N,EAAS0E,EAAT1E,KACnC+B,EAAOE,KAAK8L,EAAM7L,kBAAQlC,IAC1B,IACMgO,GADczI,GAAYb,GACD9D,KAAI,SAAAiF,GAAG,OAjCxC,SAAqB4F,EAAQ5J,GAAQ,IAC3BX,EAAeuK,EAAfvK,KACR,GAAa,SADUuK,EAATzL,KACO,OAAO8H,YAAU2D,GAClC5J,IAAQX,EAAKW,OAASA,GAC1B,IAAIrB,EAAMsF,YAAU5E,GAQpB,OAPIA,EAAKqB,aAAeqG,QAAQqF,IAAI/M,EAAM,iBAAgBV,EAAM,IAAH,OAAOA,EAAP,MACzDU,EAAKqK,aAA6B,eAAdrK,EAAKlB,OAAuBQ,EAAM,GAAH,OAAMA,EAAN,YAAaU,EAAKqK,YAAYK,OAA9B,MACrC,OAAdH,EAAO3B,KACTtJ,EAAM,GAAH,OAAMA,EAAN,QACgDA,EAA/C,8BAA8B0N,KAAKzC,EAAO3B,IAAW,GAAH,OAAMtJ,GAAN,OAAYoB,0BAAgB6J,EAAO3B,KAC9E,GAAH,OAAMtJ,GAAN,OAAYiB,gCAAsBgK,EAAO3B,MAE5CtJ,EAqBmC2N,CAAYtI,EAAKhE,MAASa,KAAK,MAEzE,OADAX,EAAOE,KAAK,CAACjC,GAAQ,IAAKgO,EAAYhO,GAAQ,KAAKgD,OAAOZ,UAAQM,KAAK,KAChEX,EAAOiB,OAAOZ,UAAQM,KAAK,O,2zBCvJpC,SAAS0L,EAAuBC,GAC9B,OAAKA,EACE,CAACnM,kBAAQmM,EAAK7M,QAASsE,YAAUuI,EAAKvP,OAAQoD,kBAAQmM,EAAK7L,SADhD,GAepB,SAAS8L,EAAWC,GAClB,OAAKA,EACDA,EAAMC,OAZFA,GADgBH,EAaiBE,GAZjCC,MAAO9C,EAAW2C,EAAX3C,OACA,GAAH,SAAO0C,EAAuB1C,IAA9B,EAA0C0C,EAAuBI,KAC/DxL,OAAOZ,UAAQM,KAAK,MAGpC,SAA0B6L,GAAO,IACvBE,EAAqBF,EAArBE,UAAW3P,EAAUyP,EAAVzP,MACnB,OAAOyB,oBAAU,QAASzB,EAAM8B,IAAIkF,KAAWpD,KAArB,UAA2C,WAAd+L,EAAyB,IAAM,IAA5D,OAAiEvM,kBAAQuM,GAAzE,OAMnBC,CAAiBH,GAFL,GAZrB,IAA0BF,EAChBG,EAAO9C,I,6BCTjB,mHAOA,SAASiD,EAAWN,GAAM,IAChBrO,EAA2BqO,EAA3BrO,KAAMkK,EAAqBmE,EAArBnE,MADU,EACWmE,EAAdnN,YADG,MACI,GADJ,EAMxB,MADe,CAHAgB,kBAAQlC,GAGC,QAFN6K,YAAYX,GACbhJ,EAAKN,IAAIkF,KAC2BpD,KAAK,OAC5CM,OAAOZ,UAAQM,KAAK,KAGpC,SAAS0D,EAAelF,GACtB,IAAKA,EAAM,MAAO,GADU,IAG1Bd,EAQEc,EARFd,OACoBwO,EAOlB1N,EAPF2N,mBACaC,EAMX5N,EANF6N,YACeC,EAKb9N,EALF+N,cAA2B9O,EAKzBe,EALyBf,QACf+O,EAIVhO,EAJFiO,WACA3N,EAGEN,EAHFM,OACA4N,EAEElO,EAFFkO,SACApN,EACEd,EADFc,OAEE5D,EAAO,GACPuF,EAAW,GACf,OAAQyL,GACN,IAAK,SACHzL,EAAW,CAACgJ,YAAsBzL,IAClC,MACF,IAAK,QACHyC,EAAW0L,YAAwBnO,GACnC9C,EAAO8C,EAAKkO,GACZ,MACF,IAAK,QACHhR,EAAOwD,0BAAgBV,EAAKkO,IAC5B,MACF,IAAK,YACL,IAAK,OACHhR,EAAO,CAAC4D,EAAQE,kBAAQhB,EAAKkO,KAAYpM,OAAOZ,UAAQM,KAAK,KAC7D,MACF,IAAK,aACHtE,EAAOwD,0BAAgBV,EAAKkO,IAC5BzL,EAAW,CAAC2L,YAAsBV,IAClC,MACF,IAAK,MACHxQ,EAAOwD,0BAAgBV,EAAKkO,IAehC,MAVmB,CACjBlN,kBAAQ9B,GACR8B,kBAAQ/B,GACR+B,kBAAQ8M,GACRE,GAAavK,YAAeuK,GAC5BhN,kBAAQV,GACRpD,EACAuF,EAASX,OAAOZ,UAAQM,KAAK,KAC7BoM,GAAc,GAAJ,OAAO5M,kBAAQ4M,EAAW3O,SAA1B,YAAsCwE,YAAemK,EAAWrD,UAE1DzI,OAAOZ,UAAQM,KAAK,O,i6BCvDxC,SAAS6M,EAAeC,GACtB,IAAKA,EAAW,MAAO,GADU,IAEzBrP,EAAkBqP,EAAlBrP,QAASH,EAASwP,EAATxP,KACjB,MAAO,CAACG,EAAQG,cAAeN,EAAKM,eAGtC,SAASmP,EAAiBC,GACxB,GAAKA,EAAL,CADkC,IAE1B1P,EAAuB0P,EAAvB1P,KAAMkB,EAAiBwO,EAAjBxO,KAAMc,EAAW0N,EAAX1N,OACd2N,EAAY3P,EAAKM,cACjBsP,EAAgB,GAEtB,OADAA,EAAc3N,KAAK0N,GACXA,GACN,IAAK,iBACC3N,GAAQ4N,EAAc3N,KAAKD,GAC/B4N,EAAc3N,KAAKI,uBAAanB,IAChC,MACF,IAAK,QACL,IAAK,OACH0O,EAAc3J,OAAS,EACvB2J,EAAc3N,KAAd,MAAA2N,EAAa,EAASL,EAAeG,KACrC,MACF,IAAK,cACHE,EAAc3N,KAAKf,GACnB,MACF,IAAK,UACL,IAAK,YACH,MACF,IAAK,UACH0O,EAAcC,QACdD,EAAc3N,KAAKiC,uBAAawL,IAChC,MACF,IAAK,mBACHE,EAAc3N,KAAKD,EAAQE,kBAAQhB,EAAKpC,OAAQuE,4BAAkBnC,EAAKgK,KACvE,MACF,QACE0E,EAAc3N,KAAKD,EAAQK,uBAAanB,IAG5C,OAAO0O,EAAc5M,OAAOZ,UAAQM,KAAK,MAG3C,SAASoN,EAAqBC,GAC5B,OAAKA,EACEA,EAAanP,IAAI6O,GADE,GAI5B,SAASJ,EAAwBW,GAAiB,IAE7BC,EAIfD,EAJFE,gBACYV,EAGVQ,EAHFG,WAH8C,EAM5CH,EAFFI,cAAeC,OAJ+B,MAIhB,GAJgB,EAK9CzM,EACEoM,EADFpM,WAEID,EAAW,GAEjB,GADAA,EAAS1B,KAAT,MAAA0B,EAAQ,EAAS4L,EAAeC,KAC5B5L,GAAcA,EAAWqC,OAAQ,CACnC,IAAMqK,EAA4C,UAA5BpO,kBAAQ+N,GAAR,WAA0CnK,YAAUlC,EAAW,IAA/D,gBAA4EA,EAAWhD,KAAI,SAAAiF,GAAG,OAAIjE,0BAAgBiE,MAAMnD,KAAK,MAA7H,KACtBiB,EAAS1B,KAAKqO,GAGhB,OADA3M,EAAS1B,KAAK6N,EAAqBO,GAAc3N,KAAK,MAC/CiB,EAGT,SAAS4M,EAAqBP,GAC5B,IAAMQ,EAAW,GAEfrQ,EAEE6P,EAFF7P,QACAsQ,EACET,EADFS,MAKF,OAHAD,EAASvO,KAAKC,kBAAQ/B,IACtBqQ,EAASvO,KAAKwO,GACdD,EAASvO,KAAT,MAAAuO,EAAQ,EAASnB,EAAwBW,KAClCQ,EAASxN,OAAOZ,UAAQM,KAAK,O,6BCnFtC,+HAcA,SAASoF,EAAU5G,GAAM,IACfuB,EAA+DvB,EAA/DuB,QAASiO,EAAsDxP,EAAtDwP,OAAcC,EAAwCzP,EAA9CA,KAAkBc,EAA4Bd,EAA5Bc,OAAY4O,EAAgB1P,EAApB4I,GAAW+G,EAAS3P,EAAT2P,KACtD5K,EAAyCyK,EAAzCzK,OAAQtC,EAAiC+M,EAAjC/M,SAAUpB,EAAuBmO,EAAvBnO,YAAauJ,EAAU4E,EAAV5E,MACnCtL,EAAM,GACI,MAAVyF,IAAgBzF,EAAMsL,EAAQ,GAAH,OAAM7F,EAAN,aAAiB6F,GAAU7F,GACtD1D,IAAa/B,EAAM,IAAH,OAAOA,EAAP,MACpB,IAAIgB,EAASsE,YAAU6K,GACnBG,EAAa,KACbtO,EAAS,GACE,OAAXR,IACFR,EAAS,QAAH,OAAWA,GACjBgB,EAAS,IACTsO,EAAa,IAAH,OAAO9O,EAAO1B,cAAd,MAERuQ,IAAMrO,GAAU,IAAJ,OAAQqO,EAAK9P,SAAb,YAAyB+E,YAAU+K,EAAK3P,QACpD0P,IAAOpO,GAAU,OAAJ,OAAWZ,0BAAgBgP,KACxCnO,IAASD,GAAU,IAAJ,OAAQV,0BAAgBW,GAASC,KAAK,OACzD,IAAMqO,EA3BR,SAAgCL,GAC9B,IAAKA,IAAWA,EAAOM,MAAO,MAAO,GACrC,OAAQN,EAAOM,OACb,IAAK,MACH,MAAO,KACT,IAAK,MACH,MAAO,QAqBYC,CAAuBP,GAC9C,gBAAUlP,GAAV,OAAmBsP,GAAnB,OAAgCnN,GAAhC,OAA2CoN,GAA3C,OAA4DvQ,GAA5D,OAAkEgC,GAGpE,SAASyF,EAAgBoG,GAAM,IACrB7J,EAAe6J,EAAf7J,KAAMxE,EAASqO,EAATrO,KACN+D,EAAuCS,EAAvCT,MAAkBmN,EAAqB1M,EAAhC2M,UAAqBC,EAAW5M,EAAX4M,OAC9BrP,EAAS,CAAC,GAAD,OAAIG,kBAAQlC,GAAZ,YAAqBkC,kBAAQ6B,IAAU,OAAQ7B,kBAAQgP,GAAWpL,YAAUsL,IAC3F,gBAAUrP,EAAOiB,OAAOZ,UAAQM,KAAK,KAArC,KAGF,SAASyF,EAAUjH,GAAM,IACfsD,EAAetD,EAAfsD,KAAMpG,EAAS8C,EAAT9C,KACNmE,EAA+BrB,EAA/BqB,YAAa+D,EAAkBpF,EAAlBoF,KAAM7D,EAAYvB,EAAZuB,QACrB4O,EAAavP,0BAAgBW,GAASC,KAAK,KAC3CgE,EAAUC,YAAUL,GAC1B,IAAK9B,EAAM,MAAO,CAACpG,EAAMsI,GAAS1D,OAAOZ,UAAQM,KAAK,KACtD,IAAMlC,EAAM,GAAH,OAAMpC,EAAN,YAAc0H,YAAUtB,GAAM9B,KAAK,MAAnC,KACT,MAAO,CAACH,EAAc,IAAH,OAAO/B,EAAP,KAAgBA,EAAK6Q,EAAY3K,GAAS1D,OAAOZ,UAAQM,KAAK,O,ojDCpCnF,SAAS4O,EAAejD,GAAM,IACpBrO,EAAwBqO,EAAxBrO,KAAMG,EAAkBkO,EAAlBlO,QAAS/B,EAASiQ,EAATjQ,KACjB4M,EAAU,CAAC9I,kBAAQlC,GAAOkC,kBAAQ/B,IACxC,OAAQA,GACN,IAAK,QACH6K,EAAQ/I,KAAK4I,YAAYzM,IACzB,MACF,IAAK,YACH4M,EAAQ/I,KAAKL,0BAAgBxD,IAC7B,MACF,IAAK,QACH4M,EAAQ/I,KACN0C,YAAevG,GACf,KACAuL,YAAW0E,EAAKnE,OAChBmE,EAAKkD,SAAWlD,EAAKkD,QAAQ3Q,IAAIwF,KAAgBpD,OAAOZ,UAAQM,KAAK,MAM3E,OAAOsI,EAAQhI,OAAOZ,UAAQM,KAAK,KA+CrC,SAAS8O,EAAgBnD,GAAM,IACrBrO,EAA0BqO,EAA1BrO,KAAMG,EAAoBkO,EAApBlO,QAAS2K,EAAWuD,EAAXvD,OACjB/I,EAAS,CAAC/B,EAAKM,cAAe4B,kBAAQ/B,IAC5C,GAA2B,WAAvBH,EAAKM,cAA4B,OAAOyB,EAAOW,KAAK,KACxD,IAJ6B,EAIvB+O,EAAY,GAJW,IAKL3G,GALK,yBAKlBlB,EALkB,QAMnBM,EAA+BN,EAA/BM,MAAkBwH,EAAa9H,EAAxB+H,UACTC,EAAgB,CAACjI,YAAWO,IAClC,GAAIwH,EAAU,CAEZE,EAAc3P,KADM,CAAC,SAAU,OAAQ,UACRrB,KAAI,SAAAxB,GAAG,OAAI8C,kBAAQwP,EAAStS,OAAO4D,OAAOZ,UAAQM,KAAK,MAExF+O,EAAUxP,KAAK2P,EAAclP,KAAK,OAPpC,2BAAgC,IALH,8BAe7B,OADAX,EAAOE,KAAP,MAAAF,EAAM,CAAM0P,EAAU/O,KAAK,OAArB,SAzBR,SAAgB2L,GAAM,IACDwD,EAAqBxD,EAAhCyD,UAAqBC,EAAW1D,EAAX0D,OACvBC,EAAW,GACjB,GAAIH,EAAU,KACJ7S,EAAS6S,EAAT7S,KACRgT,EAAS/P,KAAKjD,EAAKsB,eAGrB,OADIyR,GAAQC,EAAS/P,KAAK8P,EAAOzR,eAC1B0R,EAiB8BC,CAAO5D,MACrCtM,EAAOiB,OAAOZ,UAAQM,KAAK,K,wBCzE9BwP,EAAc,CAClB/L,MAAWwI,IACXwD,QCrBF,SAAsB9D,GAAM,IAClBrO,EAAgBqO,EAAhBrO,KAAMkK,EAAUmE,EAAVnE,MAGd,MAAO,CAFQhI,kBAAQlC,GACL2J,YAAWO,IACFxH,KAAK,MDkBhC0P,OCfF,SAAqB/D,GAAM,IACjBrO,EAAqCqO,EAArCrO,KAAMF,EAA+BuO,EAA/BvO,SAAUoB,EAAqBmN,EAArBnN,KAAM4I,EAAeuE,EAAfvE,GAAIM,EAAWiE,EAAXjE,OAClC,MAAO,CAAClI,kBAAQlC,GAAOkC,kBAAQpC,GAAWgG,YAAU5E,GAAOgB,kBAAQ4H,GAAKlI,0BAAgBwI,IAASpH,OAAOZ,UAAQM,KAAK,MDcrHvD,OAAWkT,IACXjJ,OAAWG,IACX+I,OEvBF,SAAqBjE,GACnB,IAAMrD,EAAU,CAAC,UACTtG,EAAgD2J,EAAhD3J,QAAS6N,EAAuClE,EAAvCkE,KAAMrI,EAAiCmE,EAAjCnE,MAAOsI,EAA0BnE,EAA1BmE,MAAOjM,EAAmB8H,EAAnB9H,QAASgI,EAAUF,EAAVE,MACxCkE,EAAahN,YAAaf,EAAS6N,GASzC,OARAvH,EAAQ/I,KAAKwQ,GACT/R,MAAMC,QAAQuJ,KACO,IAAjBA,EAAMjE,SAAsC,IAAtBiE,EAAM,GAAGwI,UAAoB1H,EAAQ/I,KAAK4I,YAAYX,KAEpFc,EAAQ/I,KAAK/B,gCAAsB,OAAQ2K,IAAa0H,IACxDvH,EAAQ/I,KAAK/B,gCAAsB,QAAS4F,IAAW0M,IACvDxH,EAAQ/I,KAAK6E,YAAwBP,EAAS,aAC9CyE,EAAQ/I,KAAKqM,YAAWC,IACjBvD,EAAQhI,OAAOZ,UAAQM,KAAK,MFYnCiQ,OAAWC,IACXC,OAAWC,IACXC,KAAWzB,EACX0B,SAAW1B,EACX2B,QAAWH,IACXI,QDgEF,SAAsB7E,GAAM,IAClBrO,EAAkBqO,EAAlBrO,KAAMkT,EAAY7E,EAAZ6E,QACRnR,EAAS,CAACG,kBAAQlC,IAClBiJ,EAAOiK,EAAQtS,KAAI,SAAAuS,GAAO,IACtBC,EAA8CD,EAA9CC,GAAIhV,EAA0C+U,EAA1C/U,KAAM0L,EAAoCqJ,EAApCrJ,GAAItI,EAAgC2R,EAAhC3R,OAAQoC,EAAwBuP,EAAxBvP,WAAYzD,EAAYgT,EAAZhT,QACpCkT,EAAc,CAAC,GAAD,OAAID,GAAJ,OAAShV,GAAQ8D,kBAAQ4H,IAC7C,OAAQ3J,GACN,IAAK,WACHkT,EAAYpR,KAAK4J,YAAerK,IAC5BoC,GAAYyP,EAAYpR,KAAK,IAAK6D,YAAUlC,IAChD,MACF,IAAK,SACHyP,EAAYpR,KAAKC,kBAAQV,IACzB,MACF,IAAK,QACH6R,EAAYpR,KAAKC,kBAAQV,GAAzB,WAAsCoC,EAAWhD,IAAI0O,KAAuB5M,KAAK,MAAjF,MAKJ,OAAO2Q,EAAYrQ,OAAOZ,UAAQM,KAAK,QACtCA,KAAK,MAER,OADAX,EAAOE,KAAKgH,GACLlH,EAAOW,KAAK,MCtFnB4Q,IDoBF,SAAkBjF,GAAM,IACdrO,EAAaqO,EAAbrO,KAAMmK,EAAOkE,EAAPlE,GACR/J,EAAS8B,kBAAQlC,GACjBF,EAAW8B,0BAAgBuI,GACjC,gBAAU/J,EAAV,YAAoBN,ICvBpByT,ODMF,SAAqBlF,GAAM,IACjBrO,EAAgBqO,EAAhBrO,KAAMkK,EAAUmE,EAAVnE,MACRc,EAAU,GACVxJ,EAAS,GAAH,OAAMxB,GAAQA,EAAKM,cAAnB,UACZ,GAAI4J,EAAO,WACYA,GADZ,IACT,2BAA4B,KACpBsJ,EADoB,QACA5S,IAAI+I,KAC9BqB,EAAQ/I,KAAKuR,EAAW9Q,KAAK,UAHtB,+BAMX,gBAAUlB,EAAV,YAAoBwJ,EAAQtI,KAAK,QCfjC1E,KD/BF,SAAmBqQ,GACjB,IACMoF,EAAmB3N,YAAUuI,EAAKnN,MACxC,gBAFa,OAEb,YAAkBuS,IC6BlBC,KDFF,SAAmBrF,GAAM,IACfrO,EAAgBqO,EAAhBrO,KAAMkK,EAAUmE,EAAVnE,MACR9J,EAAS8B,kBAAQlC,GACvB,gBAAUI,EAAV,YAAoBwB,0BAAgBsI,KCApCyJ,IDuBF,SAAqBtF,GAAM,IACjBnN,EAASmN,EAATnN,KAEFiB,EAAM2D,YAAU5E,GACtB,gBAFe,MAEf,YAAoBiB,IC1BpByR,KAAWpC,EACXqC,OAAWrC,EACXjJ,KAAWC,KAGb,SAASc,EAAW+E,GAIlB,IAHA,IAAMyF,EAAM5B,EAAY7D,EAAKrO,MACvByH,EAAM,CAACqM,EAAIzF,IAFO,EAGKA,EAArB0F,EAHgB,EAGhBA,SAAUC,EAHM,EAGNA,OACX3F,EAAKhF,OAAO,CACjB,IAAM4K,GAAgB5F,EAAK6F,OAAS,SAAS5T,cAC7CmH,EAAIxF,KAAKgS,EAAcH,EAAIzF,EAAKhF,QAChCgF,EAAOA,EAAKhF,MAGd,OADA5B,EAAIxF,KAAK6E,YAAwBiN,EAAU,YAAazF,YAAW0F,IAC5DvM,EAAIzE,OAAOZ,UAAQM,KAAK,KAGjC,SAASyR,EAAc9F,GAAM,IACb+F,EAAkD/F,EADrC,KACH9L,EAAwC8L,EAAxC9L,YAAa6G,EAA2BiF,EAA3BjF,OAAQ7C,EAAmB8H,EAAnB9H,QAASgI,EAAUF,EAAVE,MAChDxM,EAAS,CAACsS,YAAUD,GAAW7R,GAAe,IAAK+G,EAAWF,GAAS7G,GAAe,KAG5F,OADAR,EAAOE,KAAK6E,YAAwBP,EAAS,YAAa+H,YAAWC,IAC9DxM,EAAOiB,QAAO,SAAAb,GAAG,OAAIA,KAAKO,KAAK,KAGxC,SAAS4R,EAAcjG,GAErB,IADA,IAAM5G,EAAM,GACHhK,EAAI,EAAGkK,EAAM0G,EAAKpI,OAAQxI,EAAIkK,IAAOlK,EAAG,CAC/C,IAAI8W,EAAUlG,EAAK5Q,IAAM4Q,EAAK5Q,GAAGmF,IAC5B2R,IAASA,EAAUlG,EAAK5Q,IAC7BgK,EAAIxF,KAAKqH,EAAWiL,IAEtB,OAAO9M,EAAI/E,KAAK,S,6BG1ElB,4DAIA,SAASiE,EAAUL,GACjB,GAAKA,EAAL,CADuB,IAEUkO,EAAsClO,EAA/DmO,wBAAuCvT,EAAwBoF,EAAxBpF,KAAMf,EAAkBmG,EAAlBnG,QAASH,EAASsG,EAATtG,KACxD2P,EAAYzN,kBAAQlC,GAC1B,GAAkB,WAAd2P,EAAwB,MAAO,QAAP,OAAe+E,YAAkBF,IAC7D,GAAkB,cAAd7E,EAA2B,CAC7B,IAAItD,EAAW,GAAH,OAAMnK,kBAAQlC,GAAd,YAAuBkC,kBAAQ/B,IACrCqE,EAAOsB,YAAU5E,GAEvB,OADIsD,IAAM6H,EAAW,GAAH,OAAMA,EAAN,YAAkB7H,EAAK9B,KAAK,MAA5B,MACX2J,EAET,MAAM,IAAIxL,MAAM,wB,6BCflB,iFA8BA,SAAS0I,EAAY8E,GAAM,IAERsG,EACbtG,EADFuG,cAA4BlQ,EAC1B2J,EAD0B3J,QAASkC,EACnCyH,EADmCzH,SAAU2L,EAC7ClE,EAD6CkE,KAFxB,EAGrBlE,EADmDwG,mBAAoBC,OAFlD,MAE8D,GAF9D,EAE8EC,EACnG1G,EADuF2G,WAAuBC,EAC9G5G,EAD8G4G,QAASC,EACvH7G,EADuH6G,OAAQ3G,EAC/HF,EAD+HE,MAAOgD,EACtIlD,EADsIkD,QAAShL,EAC/I8H,EAD+I9H,QAA6BhE,EAC5K8L,EADwJ8G,mBAAiCC,EACzL/G,EADyL+G,IAAaC,EACtMhH,EAD8L3Q,OAA0B4X,EACxNjH,EAHqB,KAE6MmE,EAClOnE,EADkOmE,MAEhOxH,EAAU,CAACqJ,YAAUiB,GAAW,SAAUpT,kBAAQyS,IACxD3J,EAAQ/I,KAAKX,mBAAS8T,IAClB1U,MAAMC,QAAQ4Q,IAAUvG,EAAQ/I,KAAKsP,EAAQ7O,KAAK,MACtDsI,EAAQ/I,KA9BV,SAAuB2E,GACrB,GAAKA,EAAL,CACA,GAAwB,iBAAbA,EAAuB,OAAOA,EAFV,IAGvB5G,EAAkB4G,EAAlB5G,KAAM0E,EAAYkC,EAAZlC,QACR3C,EAAS,CAACG,kBAAQlC,IAExB,OADI0E,GAAS3C,EAAOE,KAAP,WAAgByC,EAAQ9D,IAAI+D,KAAgBjC,KAAK,MAAjD,MACNX,EAAOiB,OAAOZ,UAAQM,KAAK,MAwBrB6S,CAAc3O,GAAWnB,YAAaf,EAAS6N,IAE5DvH,EAAQ/I,KAAK/B,gCAAsB,OAAQ2K,IAAa0H,IAT/B,MAUCuC,GAAa,GAA/B3U,EAViB,EAUjBA,QAASe,EAVQ,EAURA,KACjB8J,EAAQ/I,KAAK/B,gCAAsBC,EAAS2F,IAAW5E,IACvD8J,EAAQ/I,KAAK/B,gCAAsB,QAAS4F,IAAW0M,IACvDxH,EAAQ/I,KAAK1B,oBAAU,WAAYuI,YAAemM,GAASvS,KAAK,QAChEsI,EAAQ/I,KAAK/B,gCAAsB,SAAU4F,IAAWoP,IACxDlK,EAAQ/I,KAAK/B,gCAAsB,SAAU4F,IAAWuP,IACxDrK,EAAQ/I,KAAK6E,YAAwBP,EAAS,aAC9CyE,EAAQ/I,KAAKqM,YAAWC,IACxBvD,EAAQ/I,KAAKC,kBAAQ6S,IACrB,IAAMzJ,EAAMN,EAAQhI,OAAOZ,UAAQM,KAAK,KACxC,OAAOH,EAAc,IAAH,OAAO+I,EAAP,KAAgBA,I,+4BCxCpC,SAASgE,EAAsB1L,GAC7B,IAAKA,EAAY,MAAO,GADiB,IAEjCwL,EAAaxL,EAAbwL,SACR,OAAQA,GACN,IAAK,SACH,OAAOzC,YAAsB/I,GAC/B,IAAK,QACH,OAAO2M,YAAqB3M,GAC9B,IAAK,aACH,OAAOgK,YAA0BhK,GACnC,IAAK,WACH,MAAO,CAAC1B,kBAAQ0B,EAAWpC,QAASsE,YAAUlC,EAAW9E,QAAQkE,OAAOZ,UAAQM,KAAK,KACvF,QACE,MAAM,IAAI7B,MAAJ,6BAAgCuO,EAAhC,WA8HZ,SAASiD,EAAYhE,GAAM,IACjBlO,EAAYkO,EAAZlO,QACJmL,EAAM,GACV,OAAQnL,EAAQwB,eACd,IAAK,QACH2J,EA/HN,SAA0B+C,GAAM,IAE5BrO,EAMEqO,EANFrO,KAAMG,EAMJkO,EANIlO,QAAS+J,EAMbmE,EANanE,MAAOsL,EAMpBnH,EANoBmH,KAAM1L,EAM1BuE,EAN0BvE,GAAI2L,EAM9BpH,EAN8BoH,UACjBzG,EAKbX,EALFY,cACoBL,EAIlBP,EAJFQ,mBACe6G,EAGbrH,EAHFsH,cACgBC,EAEdvH,EAFFwH,eACYC,EACVzH,EADF0H,WAEIzK,EAAM,CAACpJ,kBAAQlC,GAAOkC,kBAAQuT,GAAYvT,kBAAQ/B,GAAU+B,kBAAQ8M,GAAcnE,YAAYX,IACpG,GAAIsL,EAAM,KACMQ,EAA+BR,EAArCxV,KAAuBiW,EAAcT,EAArBtL,MAClBgM,EAAgBrL,YAAYoL,GAElC,OADA3K,EAAIrJ,KAAKC,kBAAQ8T,GAAWE,GACrB5K,EAAItI,OAAOZ,UAAQM,KAAK,KAUjC,OARIkM,GACFtD,EAAIrJ,KAAJ,WAAa2M,EAAiBhO,IAAI0O,GAAuB5M,KAAK,MAA9D,MAEEgT,GACFpK,EAAIrJ,KAAKyT,EAAa9U,IAAIwK,KAAkB1I,KAAK,MAEnD4I,EAAIrJ,KAAKC,kBAAQ0T,GAAgB1T,kBAAQ4H,IACrCgM,GAAWxK,EAAIrJ,KAAKqH,YAAWwM,IAC5BxK,EAAItI,OAAOZ,UAAQM,KAAK,KAuGrByT,CAAiB9H,GACvB,MACF,IAAK,UACH/C,EAvGN,SAA4B+C,GAAM,IAE9B+H,EAQE/H,EARF+H,WAA2BC,EAQzBhI,EARUiI,cACZC,EAOElI,EAPFkI,WACAlS,EAMEgK,EANFhK,OAAQmS,EAMNnI,EANMmI,QACEvT,EAKRoL,EALFoI,SAAmBlE,EAKjBlE,EALiBkE,KACnBmE,EAIErI,EAJFqI,SACAvW,EAGEkO,EAHFlO,QACAH,EAEEqO,EAFFrO,KAAMkK,EAEJmE,EAFInE,MACNyM,EACEtI,EADFsI,KAEIrL,EAAM,CAACpJ,kBAAQlC,GAAOkC,kBAAQmU,GAAenU,kBAAQ/B,GAAUyB,0BAAgBwU,GAAalU,kBAAQwU,IACpGpS,EAAQF,4BAAkBC,GAMhC,OALAiH,EAAIrJ,KAAKqC,EAAO,KAAMqF,YAAWO,IAC7BqI,GAAMjH,EAAIrJ,KAAK,OAAQ0H,YAAW4I,IACtCjH,EAAIrJ,KAAJ,MAAAqJ,EAAG,EAASxG,iCAAuByR,IAAhC,SAAgDzR,iCAAuB7B,MACtE0T,GAAMrL,EAAIrJ,KAAKC,kBAAQyU,EAAK3W,MAAO8F,YAAU6Q,EAAK/O,OACtD0D,EAAIrJ,KAAKC,kBAAQsU,EAAQrW,SAAUgI,YAAUqO,EAAQtV,OAC9CoK,EAAItI,OAAOZ,UAAQM,KAAK,KAqFrBkU,CAAmBvI,GACzB,MACF,IAAK,YACH/C,EArFN,SAA8B+C,GAAM,IAEhCwI,EAEExI,EAFFwI,UAAWtE,EAETlE,EAFSkE,KAAqBvD,EAE9BX,EAFeY,cACjB9O,EACEkO,EADFlO,QAASiK,EACPiE,EADOjE,OAAQpK,EACfqO,EADerO,KAAY8W,EAC3BzI,EAJ8B,KAGO0I,EACrC1I,EADqC0I,QAYzC,MAVY,CACV7U,kBAAQlC,GACRkC,kBAAQ/B,GACR+B,kBAAQ8M,GACR3M,uBAAawU,GACb3U,kBAAQ4U,GACR5W,gCAAsB,SAAUmC,eAAc+H,GAC9ClK,gCAAsB,UAAWmC,eAAc0U,GAC/C7W,gCAAsB,OAAQmC,eAAckQ,IAEnCvP,OAAOZ,UAAQM,KAAK,KAsErBsU,CAAqB3I,GAC3B,MACF,IAAK,QACH/C,EAtEN,SAA0B+C,GAAM,IAE5B4I,EAGE5I,EAHF4I,aAA6BC,EAG3B7I,EAHY8I,cAA2BhX,EAGvCkO,EAHuClO,QAASiX,EAGhD/I,EAHgD+I,QAAwBC,EAGxEhJ,EAHyDiJ,cAC/C9H,EAEVnB,EAFF8B,WAAoCoH,EAElClJ,EAFqBmJ,YAAyB/G,EAE9CpC,EAF8CoC,MAAOvF,EAErDmD,EAFqDnD,GAAmBwE,EAExErB,EAFyD+B,cAA2CqH,EAEpGpJ,EAFkFqJ,iBAA6CC,EAE/HtJ,EAFkHuJ,YAA6BC,EAE/IxJ,EAFwIyJ,MAAa5N,EAErJmE,EAFqJnE,MAAO6N,EAE5J1J,EAF4J0J,WAAY/X,EAExKqO,EAFwKrO,KAAMwS,EAE9KnE,EAF8KmE,MAC1K4B,EACJ/F,EAL0B,KAIO2J,EACjC3J,EADc4J,kBAEZC,EAAe9D,GAAY,SAAJ,OAAatE,YAAqBsE,GAAU1R,KAAK,MAAjD,KACvByV,EAAiBf,GAAW,GAAJ,OAAOlV,kBAAQkV,EAAQjX,SAAvB,aAAoCiX,EAAQ1S,QAAQ9D,KAAI,SAAAiF,GAAG,OAAIjE,0BAAgBiE,MAAMnD,KAAK,MAA1F,KACxB4I,EAAM,CACVpJ,kBAAQlC,GAAOkC,kBAAQsN,GAAYtN,kBAAQ/B,GAAU+B,kBAAQ+U,GAC7DrV,0BAAgB6O,GAAQvO,kBAAQ2V,GAAOlO,YAAWO,IAF3C,SAEsDqF,YAAegI,IAFrE,YAGHpS,+BAAqBkS,GAHlB,KAGoCc,EAAgBrI,YAAqBJ,GAAUhN,KAAK,KAAM0D,YAAeqR,GAAerR,YAAeuR,GAClJzX,gCAAsB,aAAcmC,eAAc0V,KAQpD,OANIC,EACF1M,EAAIrJ,KAAKiW,EAAchY,gCAAsB,QAAS4F,IAAW0M,IAEjElH,EAAIrJ,KAAK/B,gCAAsB,QAAS4F,IAAW0M,GAAQ0F,GAE7D5M,EAAIrJ,KAAK/B,gCAAsB,KAAM4F,IAAWoF,GAAKhL,gCAAsB,gBAAiBmC,eAAc6U,IACnG5L,EAAItI,OAAOZ,UAAQM,KAAK,KAkDrB0V,CAAiB/J,GACvB,MACF,IAAK,WACH/C,EAlDN,SAA6B+C,GAAM,IAE/BrO,EAGEqO,EAHFrO,KAAMG,EAGJkO,EAHIlO,QAASkY,EAGbhK,EAHagK,SAAU5C,EAGvBpH,EAHuBoH,UACVzG,EAEbX,EAFFY,cACoBL,EAClBP,EADFQ,mBAEIvD,EAAM,CACVpJ,kBAAQlC,GACRkC,kBAAQuT,GACRvT,kBAAQ/B,GACR+B,kBAAQ8M,GACRnE,YAAYwN,IAGd,OADIzJ,GAAkBtD,EAAIrJ,KAAK2M,EAAiBhO,IAAI0O,GAAuB5M,KAAK,MACzE4I,EAAItI,OAAOZ,UAAQM,KAAK,KAoCrB4V,CAAoBjK,GAC1B,MACF,IAAK,WACH/C,EApCN,SAA6B+C,GAAM,IAE/BrO,EAGEqO,EAHFrO,KAAMG,EAGJkO,EAHIlO,QAASL,EAGbuO,EAHavO,SACAkP,EAEbX,EAFFY,cACoBL,EAClBP,EADFQ,mBAEIvD,EAAM,CACVpJ,kBAAQlC,GACRkC,kBAAQ/B,GACR+B,kBAAQ8M,GACRvN,gCAAsB3B,IAGxB,OADI8O,GAAkBtD,EAAIrJ,KAAK2M,EAAiBhO,IAAIwK,KAAkB1I,KAAK,MACpE4I,EAAItI,OAAOZ,UAAQM,KAAK,KAuBrB6V,CAAoBlK,GAC1B,MACF,QACE,MAAM,IAAIxN,MAAJ,kCAAqCV,IAE/C,OAAOmL,I,6BC9KT,+HAoBA,SAASoJ,EAAkBF,GACzB,GAA4B,iBAAjBA,EAA2B,OAAOA,EADN,IAETgE,EAAehE,EAArCiE,qBACR,iBAnBF,SAAkCD,GAAY,IAE1Cpa,EAIEoa,EAJFpa,KACAsa,EAGEF,EAHFE,YACAnS,EAEEiS,EAFFjS,QACqBoS,EACnBH,EADFI,oBAQF,MANe,CACbxa,EACA0I,YAAwB4R,EAAa,gBACrC5R,YAAwBP,EAAS,YACjCrE,kBAAQyW,IAEI3V,OAAOZ,UAAQM,KAAK,KAMvBmW,CAAyBL,GAApC,KAGF,SAASM,EAAqBC,GAAiB,IACrC3a,EAAgD2a,EAAhD3a,KAA+BoW,EAAiBuE,EAA1CtE,wBACd,gBAAUrW,EAAV,eAAqBsW,EAAkBF,IAGzC,SAAS9L,EAAyBsQ,GAEhC,OADiBA,EAAT9X,KACIN,IAAIkY,GAAsBpW,KAAK,MAe7C,SAASuW,EAAkB/X,GAAM,IACvBsD,EAAoCtD,EAApCsD,KAAMpG,EAA8B8C,EAA9B9C,KADiB,EACa8C,EAAxBgY,sBADW,MACM,GADN,EAEzBC,EAAW3U,EAAOsB,YAAUtB,GAAM9B,KAAK,MAAQ,GAE/C0W,EAhBR,SAA+B3S,GAE7B,OAAQvE,kBAAQuE,IACd,IAAK,YACL,IAAK,OACL,IAAK,MACH,OAAO,EACT,QACE,OAAO,GAQa4S,CAAsBjb,GAE9C,MADe,CAACA,EAAM,IAAK+a,GAAWC,GAAmB,IAAKF,GAAkB,IAAKA,EAAgBE,GAAmB,KAC1GpW,OAAOZ,UAAQM,KAAK,IAGpC,SAASuE,EAAgB/F,GAAM,IACrBoF,EAASpF,EAAToF,KAGR,MAAO,CAFK2S,EAAkB/X,GACdyF,YAAUL,IACJtD,OAAOZ,UAAQM,KAAK,O,6BC7D5C,6GAUA,SAASgI,EAAYF,GACnB,GAAoB,WAAhBA,EAAOxK,KAAmB,OAAOuJ,YAAYiB,GACjD,IAAMQ,EAAUR,EAAO5J,IAAIkF,KAC3B,iBAAWkF,EAAQtI,KAAK,QAAxB,KAGF,SAAS4W,EAAe/V,GACtB,IAAKA,EAAW,MAAO,GACvB,IAAMgW,EAAe,CAAC,YAAa,KACnC,GAAI7Y,MAAMC,QAAQ4C,GAChBgW,EAAatX,KAAKsB,EAAU3C,IAAIgB,mBAAiBc,KAAK,WACjD,KACG5D,EAAUyE,EAAVzE,MACRya,EAAatX,KAAKnD,EAAM8B,IAAIkF,KAAWpD,KAAK,OAG9C,OADA6W,EAAatX,KAAK,KACXsX,EAAavW,OAAOZ,UAAQM,KAAK,IAG1C,SAASoQ,EAAYzE,GAAM,IAEvBnE,EAUEmE,EAVFnE,MACAlK,EASEqO,EATFrO,KAHuB,EAYrBqO,EARF7M,cAJuB,MAId,OAJc,EAKvBkD,EAOE2J,EAPF3J,QACA8F,EAME6D,EANF7D,OACAgI,EAKEnE,EALFmE,MACqBgH,EAInBnL,EAJFoL,oBACAlW,EAGE8K,EAHF9K,UACAsB,EAEEwJ,EAFFxJ,UACA8O,EACEtF,EADFsF,IAXuB,EAac6F,GAAqB,GAApDrZ,EAbiB,EAajBA,QAAcuZ,EAbG,EAaR/F,IACX3I,EAAU,CAAC9I,kBAAQlC,GAAOkC,kBAAQV,GAASqJ,YAAYX,GAAQoP,EAAe/V,IAOpF,OANI7C,MAAMC,QAAQ+D,IAAUsG,EAAQ/I,KAAR,WAAiByC,EAAQ9D,IAAIgB,mBAAiBc,KAAK,MAAnD,MAC5BsI,EAAQ/I,KAAK/B,gCAAsBQ,MAAMC,QAAQ6J,GAAU,SAAW,GAAIE,EAAaF,IACvFQ,EAAQ/I,KAAK/B,gCAAsB,MAAOyZ,IAAUhG,IACpD3I,EAAQ/I,KAAK/B,gCAAsB,QAAS4F,IAAW0M,IACvDxH,EAAQ/I,KAAK2C,yBAAeC,IAC5BmG,EAAQ/I,KAAK/B,gCAAsBC,EAASwZ,IAAUD,IAC/C1O,EAAQhI,OAAOZ,UAAQM,KAAK,O,kpCCzCrC,SAASiX,EAASC,GAChB,IAAKA,GAAwB,IAAhBA,EAAK3T,OAAc,MAAO,GACvC,IAFsB,EAEhB+E,EAAU,GAFM,IAGJ4O,GAHI,IAGtB,2BAAwB,KAAbjG,EAAa,QACdzJ,EAAyByJ,EAAzBzJ,MAAOuB,EAAkBkI,EAAlBlI,OAAQ3M,EAAU6U,EAAV7U,MAEjB+a,EAAU,CADJ,CAAC3P,EAAOuB,GAAQzI,OAAOZ,UAAQxB,KAAI,SAAAqI,GAAI,OAAIrH,0BAAgBqH,MAAOvG,KAAK,MAE/EP,EAAM,GACNrD,IACFqD,EAAM2D,YAAUhH,GAChB+a,EAAQ5X,KAAK,IAAKE,IAEpB6I,EAAQ/I,KAAK4X,EAAQ7W,OAAOZ,UAAQM,KAAK,OAZrB,8BActB,OAAOsI,EAAQtI,KAAK,MAGtB,SAASkQ,EAAYvE,GAAM,IACjBnE,EAAiDmE,EAAjDnE,MAAOyJ,EAA0CtF,EAA1CsF,IAAKnB,EAAqCnE,EAArCmE,MAAOjM,EAA8B8H,EAA9B9H,QAASgI,EAAqBF,EAArBE,MAAO1J,EAAcwJ,EAAdxJ,UAU3C,MATgB,CACd,SACAgG,YAAYX,GACZhK,gCAAsB,MAAOyZ,EAAUhG,GACvCzT,gCAAsB,QAAS4F,IAAW0M,GAC1C1L,YAAwBP,EAAS,YACjC+H,YAAWC,GACX3J,yBAAeC,IAEF7B,OAAOZ,UAAQM,KAAK,O,k0BC7BrC,SAASkL,EAA0BkM,GACjC,GAAKA,EAAL,CADuD,IAGrD1D,EAME0D,EANF1D,WACiBnG,EAKf6J,EALF5J,gBACA6J,EAIED,EAJFC,SACAtJ,EAGEqJ,EAHFrJ,MACAtQ,EAEE2Z,EAFF3Z,QACsB6L,EACpB8N,EADFnM,qBAEIqM,EAAgB,GAQtB,OAPAA,EAAc/X,KAAKC,kBAAQ/B,IAC3B6Z,EAAc/X,KAAKL,0BAAgBwU,IACnC4D,EAAc/X,KAAKC,kBAAQ+N,IAC3B+J,EAAc/X,KAAKL,0BAAgB6O,IACnCuJ,EAAc/X,KAAd,MAAA+X,EAAa,EAAS3K,YAAwByK,KAC9CE,EAAc/X,KAAd,MAAA+X,EAAa,EAASjO,YAA+BC,KACrDgO,EAAc/X,KAAKC,kBAAQ6X,IACpBC,EAAchX,OAAOZ,UAAQM,KAAK,Q,6BC1B3C,oDAMA,SAAS2R,EAAUD,GACjB,GAAKA,GAAgC,IAApBA,EAASnO,OAA1B,CACA,IAAMgU,EAAc7F,EAAS,GAAG8F,UAAY,aAAe,GACrDC,EAAc/F,EAASxT,KAAI,SAAAwZ,GAAO,IAC9Bhc,EAAwBgc,EAAxBhc,KAAMiQ,EAAkB+L,EAAlB/L,KAAM3J,EAAY0V,EAAZ1V,QACd+G,EAAS/K,MAAMC,QAAQ+D,GAAd,WAA6BA,EAAQhC,KAAK,MAA1C,KAAqD,GACpE,gBAAUL,uBAAajE,IAAvB,OAA+BqN,EAA/B,gBAA6C3F,YAAUuI,GAAvD,QACC3L,KAAK,MAER,qBAAeuX,GAAf,OAA6BE,M,6BCf/B,kEA+BA,SAAS3R,EAAU6R,GAAU,IA1BLC,EACVC,EAAUhI,EAAOhE,EA0BrB/L,EAAoB6X,EAApB7X,OAAQrC,EAAYka,EAAZla,QACZK,EAAM,GACV,OAAQ0B,kBAAQ/B,IACd,IAAK,SA7BKoa,GADUD,EA+BGD,GA/BY,GACf9H,EAAiB+H,EAAjB/H,KAAOhE,EAAU+L,EAAV/L,MA8BzB/N,EA7BG,CACLN,gCAAsB,KAAMmC,eAAckY,GAAYA,EAAStZ,OAC/Df,gCAAsB,OAAQ2K,IAAa0H,GAC3CjE,YAAWC,IACXvL,OAAOZ,UAAQM,KAAK,KA0BlB,MACF,IAAK,YACL,IAAK,YACHlC,EA1BN,SAA+Bga,GAAsB,IAC3CtZ,EAASsZ,EAATtZ,KACR,GAAKA,EAAL,CAFmD,IAG3CuZ,EAAOvZ,EAAPuZ,GACR,MAAoB,SAAhBvY,kBAAQuY,GAAuBva,gCAAsB,OAAQmC,eAAcnB,EAAKD,OAC7Ef,gCAAsB,QAAS4F,IAAW5E,IAqBvCwZ,CAAsBL,GAC5B,MACF,IAAK,SACH7Z,EArBN,SAA2Bma,GAAmB,IAC/BC,EAAYD,EADmB,IAE5C,GAAKC,EAAL,CAF4C,IAGpCC,EAA0BD,EAA1BC,KAAMC,EAAoBF,EAApBE,KAAMC,EAAcH,EAAdG,UAChBC,EAAc,IAAH,OAAOH,EAAP,KAEf,OADIC,IAAME,GAAe,KAAJ,OAASF,EAAT,MACd,CAAC,MAAOE,EAAaD,GAAa,QAASA,GAAaA,EAAUna,KAAI,SAAAqa,GAAI,iBAAQA,EAAR,QAAiBvY,KAAK,OAAOM,OAAOZ,UAAQM,KAAK,MAexHwY,CAAkBb,GAM5B,MADe,CAAC,OAAQnY,kBAAQ/B,GAAU+B,kBAAQM,GAAShC,GAC7CwC,OAAOZ,UAAQM,KAAK,O,yCC/CrB,I,MAAA,G,EAAA,G,EACZ3C,W,EAAeoD,Q,uGCDZgY,EAAiB,CAAC,UAAW,SAAU,SAAU,SAAU,SAAU,SAAU,OAAQ,SAAU,WAAY,OAAQ,OAAQ,MAAO,QAAS,MAAO,SAAU,OAAQ,SAAU,WAAY,UAAW,OAAQ,WAErN,SAASC,EAAela,GACtB,IAAM0B,EAAM1B,GAAQA,EAAK0B,IAAM1B,EAAK0B,IAAM1B,EAC1C,IAAKia,EAAeE,SAASzY,EAAI5C,MAAO,MAAM,IAAIa,MAAJ,UAAa+B,EAAI5C,KAAjB,4CAGhD,SAASsb,EAAM1Y,GACb,OAAIlC,MAAMC,QAAQiC,IAChBA,EAAIK,QAAQmY,GACL9G,YAAc1R,KAEvBwY,EAAexY,GAEF,aADIA,EAAT5C,KACwBmU,YAAcvR,GACvC0G,YAAW1G,IAUL,SAAS2Y,EAAS3Y,GAC/B,MAAe,OAAXA,EAAI4Y,GARV,SAASC,EAAQpN,GACf,IAAKA,GAAwB,IAAhBA,EAAKpI,OAAc,MAAO,GACvC,IAAMwB,EAAM,CAAC6T,EAAMjN,EAAKzL,MAExB,OADIyL,EAAKqN,SAASjU,EAAIxF,KAAKoM,EAAKmN,GAAGlb,cAAemb,EAAQpN,EAAKqN,UACxDjU,EAAIzE,QAAO,SAAA2Y,GAAO,OAAIA,KAASjZ,KAAK,KAIf+Y,CAAQ7Y,GAC7B0Y,EAAM1Y,G,ssCCzBTgZ,E,oLACGtQ,GAAwB,IAAnBjL,EAAmB,uDAAbR,cACV0U,EAAUsH,KAAK1Y,MAAMmI,EAAKjL,GAChC,OAAOkU,GAAWA,EAAQ3R,M,6BAGrBA,GAAwB,IAAnBvC,EAAmB,uDAAbR,cAEhB,OADAwB,uBAAahB,GACNkb,EAAS3Y,K,4BAGZ0I,GAAwB,IAAnBjL,EAAmB,uDAAbR,cAAa,EACoBQ,EAAxCP,gBADoB,MACRC,WADQ,EAE5BsB,uBAAahB,GACb,IAAMyb,EAAWhc,EAAS6B,cAC1B,GAAIoa,EAAQD,GAAW,OAAOC,EAAQD,GAAUxQ,EAAI0Q,QACpD,MAAM,IAAInb,MAAJ,UAAaf,EAAb,kC,qCAGOwL,EAAK2Q,GAA8B,IAAnB5b,EAAmB,uDAAbR,cACnC,GAAKoc,GAAkC,IAArBA,EAAUhW,OAA5B,CADgD,MAErB5F,EAAnBL,YAFwC,MAEjC,QAFiC,EAGhD,IAAK6b,KAAK,GAAL,OAAQ7b,EAAR,UAAsD,mBAAxB6b,KAAK,GAAL,OAAQ7b,EAAR,SAAoC,MAAM,IAAIa,MAAJ,UAAab,EAAb,6BAC7E,IAJgD,EAI1Ckc,EAAWL,KAAK,GAAL,OAAQ7b,EAAR,SAAoBX,KAAKwc,MACpCM,EAAgBD,EAAS5Q,EAAKjL,GAChC+b,GAAe,EACfC,EAAW,GAPiC,IAQxBF,GARwB,IAQhD,2BAAuC,OAA5BG,EAA4B,QACjCC,GAA4B,EADK,IAERN,GAFQ,IAErC,2BAAwC,KAA7BO,EAA6B,QAChCC,EAAQ,IAAIC,OAAOF,EAAgB,KACzC,GAAIC,EAAMvO,KAAKoO,GAAY,CACzBC,GAA4B,EAC5B,QANiC,8BASrC,IAAKA,EAA2B,CAC9BF,EAAWC,EACXF,GAAe,EACf,QApB4C,8BAuBhD,IAAKA,EAAc,MAAM,IAAIvb,MAAJ,uBAA0Bwb,EAA1B,4BAAsDrc,EAAtD,wCAA0FsL,EAA1F,S,gCAGjBA,EAAKjL,GACb,IAAMkU,EAAUsH,KAAK1Y,MAAMmI,EAAKjL,GAChC,OAAOkU,GAAWA,EAAQoI,Y,iCAGjBrR,EAAKjL,GACd,IAAMkU,EAAUsH,KAAK1Y,MAAMmI,EAAKjL,GAChC,OAAOkU,GAAWA,EAAQqI,gB,gCAIfhB,O,6BCpDf,IAAIiB,EAAS,EAAQ,IAQrB,SAASC,EAAgBC,EAASC,EAAUC,EAAOvG,GACjDmF,KAAKkB,QAAWA,EAChBlB,KAAKmB,SAAWA,EAChBnB,KAAKoB,MAAWA,EAChBpB,KAAKnF,SAAWA,EAChBmF,KAAKzd,KAAW,cAEuB,mBAA5ByC,MAAMqc,mBACfrc,MAAMqc,kBAAkBrB,KAAMiB,IAdlC,SAAsBK,EAAOC,GAC3B,SAASC,IAASxB,KAAKyB,YAAcH,EACrCE,EAAK5d,UAAY2d,EAAO3d,UACxB0d,EAAM1d,UAAY,IAAI4d,EAexBE,CAAaT,EAAiBjc,OAE9Bic,EAAgBU,aAAe,SAASR,EAAUC,GAChD,IAAIQ,EAA2B,CACzBnb,QAAS,SAASob,GAChB,MAAO,IAAOC,EAAcD,EAAYE,MAAQ,KAGlD,MAAS,SAASF,GAChB,IACIjgB,EADAogB,EAAe,GAGnB,IAAKpgB,EAAI,EAAGA,EAAIigB,EAAYI,MAAM7X,OAAQxI,IACxCogB,GAAgBH,EAAYI,MAAMrgB,aAAciD,MAC5Cqd,EAAYL,EAAYI,MAAMrgB,GAAG,IAAM,IAAMsgB,EAAYL,EAAYI,MAAMrgB,GAAG,IAC9EsgB,EAAYL,EAAYI,MAAMrgB,IAGpC,MAAO,KAAOigB,EAAYM,SAAW,IAAM,IAAMH,EAAe,KAGlEI,IAAK,SAASP,GACZ,MAAO,iBAGTja,IAAK,SAASia,GACZ,MAAO,gBAGTQ,MAAO,SAASR,GACd,OAAOA,EAAYS,cAI3B,SAASC,EAAIC,GACX,OAAOA,EAAGC,WAAW,GAAGC,SAAS,IAAIje,cAGvC,SAASqd,EAAc/d,GACrB,OAAOA,EACJqT,QAAQ,MAAO,QACfA,QAAQ,KAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,gBAAyB,SAASoL,GAAM,MAAO,OAASD,EAAIC,MACpEpL,QAAQ,yBAAyB,SAASoL,GAAM,MAAO,MAASD,EAAIC,MAGzE,SAASN,EAAYne,GACnB,OAAOA,EACJqT,QAAQ,MAAO,QACfA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,KAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,gBAAyB,SAASoL,GAAM,MAAO,OAASD,EAAIC,MACpEpL,QAAQ,yBAAyB,SAASoL,GAAM,MAAO,MAASD,EAAIC,MA6CzE,MAAO,YAtCP,SAA0BrB,GACxB,IACIvf,EAAG+gB,EANoBd,EAKvBe,EAAe,IAAI/d,MAAMsc,EAAS/W,QAGtC,IAAKxI,EAAI,EAAGA,EAAIuf,EAAS/W,OAAQxI,IAC/BghB,EAAahhB,IATYigB,EASaV,EAASvf,GAR1CggB,EAAyBC,EAAY1d,MAAM0d,IAalD,GAFAe,EAAaC,OAETD,EAAaxY,OAAS,EAAG,CAC3B,IAAKxI,EAAI,EAAG+gB,EAAI,EAAG/gB,EAAIghB,EAAaxY,OAAQxI,IACtCghB,EAAahhB,EAAI,KAAOghB,EAAahhB,KACvCghB,EAAaD,GAAKC,EAAahhB,GAC/B+gB,KAGJC,EAAaxY,OAASuY,EAGxB,OAAQC,EAAaxY,QACnB,KAAK,EACH,OAAOwY,EAAa,GAEtB,KAAK,EACH,OAAOA,EAAa,GAAK,OAASA,EAAa,GAEjD,QACE,OAAOA,EAAaE,MAAM,GAAI,GAAGjc,KAAK,MAClC,QACA+b,EAAaA,EAAaxY,OAAS,IAQxB2Y,CAAiB5B,GAAY,QAJlD,SAAuBC,GACrB,OAAOA,EAAQ,IAAOU,EAAcV,GAAS,IAAO,eAGM4B,CAAc5B,GAAS,WAsrfrF5f,EAAOD,QAAU,CACf0hB,YAAahC,EACb3Z,MArrfF,SAAmB4b,EAAOxN,GACxBA,OAAsB,IAAZA,EAAqBA,EAAU,GAEzC,IA0tCIyN,EA1tCAC,EAAa,GAEbC,EAAyB,CAAE1b,MAAO2b,IAClCC,EAAyBD,GAkBzBE,EAASC,GAAuB,KAAK,GAErCC,EAASD,GAAuB,KAAK,GAyBrCE,EAAUF,GAAuB,aAAa,GAE9CG,EAAUH,GAAuB,UAAU,GA6B3CI,EAAU,SAASC,EAAM9O,GACnB,OAAO+O,GAAWD,EAAM9O,IAyB9BgP,EAAUP,GAAuB,OAAO,GAExCQ,EAAUR,GAAuB,eAAe,GAEhDS,EAAUT,GAAuB,MAAM,GAEvCU,EAAUV,GAAuB,MAAM,GAcvCW,EAAUX,GAAuB,WAAW,GA6D5CY,EAAUZ,GAAuB,UAAU,GAsB3Ca,EAAU,SAASR,EAAM9O,GAQnB,OAPAA,EAAKuP,QAAQT,GACb9O,EAAK5N,QAAQ2G,IACX,MAAM,MAAEM,EAAK,GAAEJ,GAAOF,EACtByW,GAAWnW,GAASA,EAChBJ,IAAIuW,GAAWvW,GAAMI,GAk6enC,SAA2B0S,GACzB,MAAMlY,EAAU4b,GAAqB1D,GACrCA,EAAW2D,QACX7b,EAAQzB,QAAQ4C,GAAO+W,EAAW4D,IAAI3a,IAp6e9B4a,CAAkB7D,MAEb/L,GA6Fb6P,EAAUpB,GAAuB,SAAS,GAE1CqB,EAAUrB,GAAuB,aAAa,GAE9CsB,EAAUtB,GAAuB,aAAa,GAE9CuB,EAAUvB,GAAuB,WAAW,GAE5CwB,EAAUxB,GAAuB,OAAO,GAKxCyB,EAAUzB,GAAuB,QAAQ,GAEzC0B,EAAU1B,GAAuB,aAAa,GAoF9C2B,EAAU,SAAStB,EAAM9O,GACnB,OAAOqQ,GAAsBvB,EAAM9O,IAGzCsQ,EAAU7B,GAAuB,KAAK,GAEtC8B,EAAU9B,GAAuB,KAAK,GAatC+B,EAAW,SAASC,GAAM,OAAOA,EAAG,GAAK,IAAMA,EAAG,IAKlDC,EAAWjC,GAAuB,MAAM,GAExCkC,EAAWlC,GAAuB,KAAK,GAEvCmC,EAAWnC,GAAuB,MAAM,GAExCoC,EAAWpC,GAAuB,MAAM,GAExCqC,EAAWrC,GAAuB,KAAK,GAEvCsC,EAAWtC,GAAuB,MAAM,GA0BxCuC,EAAWvC,GAAuB,KAAK,GAEvCwC,EAAWxC,GAAuB,KAAK,GAKvCyC,EAAWzC,GAAuB,KAAK,GAEvC0C,EAAW1C,GAAuB,KAAK,GAEvC2C,EAAW3C,GAAuB,KAAK,GAsDvC4C,EAAW,SAAS9jB,GAAQ,OAA2C,IAApC+jB,GAAY/jB,EAAKkC,gBASpD8hB,EAAW9C,GAAuB,KAAM,GACxC+C,EAAW,QACXC,EAAWC,GAAqB,CAAC,MAAO,GAAM,GAC9CC,EAAW,SAASC,GAAS,OAAOA,EAAM/f,KAAK,KAE/CggB,EAAWpD,GAAuB,KAAK,GACvCqD,EAAW,QACXC,EAAWL,GAAqB,CAAC,MAAM,GAAM,GAE7CM,EAAWvD,GAAuB,KAAK,GACvCwD,EAAW,QACXC,EAAWR,GAAqB,CAAC,MAAM,GAAM,GAM7CS,GAAW,SAASxf,EAAOsa,GAAS,OAAOta,EAAQsa,EAAMpb,KAAK,KAC9DugB,GAAW,aACXC,GAAWX,GAAqB,CAAC,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,MAAM,GAAO,GACtEY,GAAW,gBACXC,GAAWb,GAAqB,CAAC,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,MAAM,GAAO,GAClFc,GAAW,iBACXC,GAAWf,GAAqB,CAAC,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,IAAK,MAAM,GAAO,GAEvFgB,GAAWjE,GAAuB,KAAK,GAcvCkE,GAAWlE,GAAuB,UAAU,GAuE5CmE,GAAWnE,GAAuB,WAAW,GAE7CoE,GAAWpE,GAAuB,OAAO,GAEzCqE,GAAWrE,GAAuB,UAAU,GAE5CsE,GAAWtE,GAAuB,OAAO,GAEzCuE,GAAWvE,GAAuB,OAAO,GAEzCwE,GAAWxE,GAAuB,SAAS,GAE3CyE,GAAWzE,GAAuB,QAAQ,GAE1C0E,GAAW1E,GAAuB,UAAU,GAE5C2E,GAAW3E,GAAuB,WAAW,GAE7C4E,GAAW5E,GAAuB,gBAAgB,GAElD6E,GAAW7E,GAAuB,cAAc,GAEhD8E,GAAW9E,GAAuB,gBAAgB,GAElD+E,GAAW/E,GAAuB,UAAU,GAE5CgF,GAAWhF,GAAuB,SAAS,GAE3CiF,GAAWjF,GAAuB,WAAW,GAE7CkF,GAAWlF,GAAuB,UAAU,GAE5CmF,GAAWnF,GAAuB,YAAY,GAE9CoF,GAAWpF,GAAuB,iBAAiB,GAEnDqF,GAAWrF,GAAuB,mBAAmB,GAErDsF,GAAWtF,GAAuB,QAAQ,GAE1CuF,GAAWvF,GAAuB,QAAQ,GAoE1CwF,GAAWxF,GAAuB,KAAK,GAavCyF,GAAW,SAAS/kB,EAAMglB,GACpB,MAAO,CACLhlB,KAAMA,EAAK2B,cACX7C,MAAOkmB,EAAG,GAAGtiB,KAAK,MAG1BuiB,GAAW,qBACXC,GAAW3C,GAAqB,CAAC,IAAM,KAAM,CAAC,KAAM,KAAS,MAAS,GAAM,GAC5E4C,GAAW,UACXC,GAAW7C,GAAqB,CAAC,IAAK,OAAO,GAAM,GAEnD8C,GAAW/F,GAAuB,OAAO,GAGzCgG,GAAWhG,GAAuB,OAAQ,GAG1CiG,GAAWjG,GAAuB,QAAQ,GAG1CkG,GAAWlG,GAAuB,OAAO,GAGzCmG,GAAWnG,GAAuB,OAAO,GAGzCoG,GAAWpG,GAAuB,OAAO,GAGzCqG,GAAWrG,GAAuB,OAAO,GAGzCsG,GAAWtG,GAAuB,OAAO,GAGzCuG,GAAWvG,GAAuB,OAAO,GAGzCwG,GAAWxG,GAAuB,OAAO,GAKzCyG,GAAWzG,GAAuB,MAAM,GAExC0G,GAAW,UACXC,GAAW1D,GAAqB,CAAC,KAAM,OAAO,GAAO,GAqCrD2D,GAAW5G,GAAuB,KAAK,GAIvC6G,GAAW,SACXC,GAAW7D,GAAqB,CAAC,CAAC,IAAK,OAAO,GAAO,GACrD8D,GAAW,eACXC,GAAW/D,GAAqB,CAAC,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,OAAO,GAAO,GAC7EgE,GAAW,QACXC,GAAWjE,GAAqB,CAAC,IAAK,MAAM,GAAO,GACnDkE,GAAW,SACXC,GAAWnE,GAAqB,CAAC,IAAK,MAAM,GAAO,GAGnDoE,GAAWrH,GAAuB,QAAQ,GAM1CsH,IAJWtH,GAAuB,WAAW,GAElCA,GAAuB,YAAY,GAEnCA,GAAuB,QAAQ,IAI1CuH,IAFWvH,GAAuB,MAAM,GAE7BA,GAAuB,SAAS,IAO3CwH,IALWxH,GAAuB,QAAQ,GAG/BA,GAAuB,OAAO,GAE9BA,GAAuB,UAAU,IAU5CyH,IARWzH,GAAuB,iBAAiB,GAExCA,GAAuB,aAAa,GAEpCA,GAAuB,UAAU,GAEjCA,GAAuB,WAAW,GAElCA,GAAuB,aAAa,IAK/C0H,IAFW1H,GAAuB,QAAQ,GAE/BA,GAAuB,QAAQ,IAiB1C2H,IAfW3H,GAAuB,OAAO,GAE9BA,GAAuB,UAAU,GAEjCA,GAAuB,QAAQ,GAE/BA,GAAuB,SAAS,GAGhCA,GAAuB,UAAU,GAGjCA,GAAuB,WAAW,GAGlCA,GAAuB,MAAM,IAExC4H,GAAW5H,GAAuB,QAAQ,GAE1C6H,GAAW7H,GAAuB,SAAS,GAE3C8H,GAAW9H,GAAuB,QAAQ,GAE1C+H,GAAW/H,GAAuB,SAAS,GAE3CgI,GAAWhI,GAAuB,SAAS,GAE3CiI,GAAWjI,GAAuB,QAAQ,GAE1CkI,GAAWlI,GAAuB,SAAS,GAE3CmI,GAAWnI,GAAuB,QAAQ,GAE1CoI,GAAWpI,GAAuB,SAAS,GAE3CqI,GAAWrI,GAAuB,SAAS,GAK3CsI,IAFWtI,GAAuB,UAAU,GAEjCA,GAAuB,SAAS,IAE3CuI,GAAWvI,GAAuB,SAAS,GAE3CwI,GAAWxI,GAAuB,QAAQ,GAE1CyI,GAAWzI,GAAuB,SAAS,GAE3C0I,GAAW1I,GAAuB,MAAM,GAExC2I,GAAW3I,GAAuB,SAAS,GAE3C4I,GAAW5I,GAAuB,UAAU,GAE5C6I,GAAW7I,GAAuB,UAAU,GAE5C8I,GAAW9I,GAAuB,WAAW,GAG7C+I,GAAW/I,GAAuB,SAAS,GAE3CgJ,GAAWhJ,GAAuB,UAAU,GAG5CiJ,GAAWjJ,GAAuB,OAAO,GAGzCkJ,GAAWlJ,GAAuB,QAAQ,GAG1CmJ,GAAWnJ,GAAuB,OAAO,GAGzCoJ,GAAWpJ,GAAuB,YAAY,GAG9CqJ,GAAWrJ,GAAuB,WAAW,GAG7CsJ,GAAWtJ,GAAuB,MAAM,GAGxCuJ,GAAWvJ,GAAuB,MAAM,GAGxCwJ,GAAWxJ,GAAuB,QAAQ,GAG1CyJ,GAAWzJ,GAAuB,UAAU,GAG5C0J,GAAW1J,GAAuB,OAAO,GAGzC2J,GAAW3J,GAAuB,OAAO,GAGzC4J,GAAW5J,GAAuB,MAAM,GAGxC6J,GAAW7J,GAAuB,SAAS,GAG3C8J,GAAW9J,GAAuB,OAAO,GAGzC+J,GAAW/J,GAAuB,OAAO,GAGzCgK,GAAWhK,GAAuB,OAAO,GAGzCiK,GAAWjK,GAAuB,OAAO,GAGzCkK,GAAWlK,GAAuB,WAAW,GAM7CmK,IAHWnK,GAAuB,QAAQ,GAG/BA,GAAuB,QAAQ,IAE1CoK,GAAWpK,GAAuB,QAAQ,GAE1CqK,GAAWrK,GAAuB,QAAQ,GAE1CsK,GAAWtK,GAAuB,QAAQ,GAE1CuK,GAAWvK,GAAuB,OAAO,GAEzCwK,GAAWxK,GAAuB,QAAQ,GAE1CyK,GAAWzK,GAAuB,SAAS,GAG3C0K,GAAW1K,GAAuB,SAAS,GAG3C2K,GAAW3K,GAAuB,QAAQ,GAM1C4K,IAHW5K,GAAuB,QAAQ,GAG/BA,GAAuB,aAAa,IAM/C6K,IAHW7K,GAAuB,WAAW,GAGlCA,GAAuB,WAAW,IAG7C8K,GAAW9K,GAAuB,WAAW,GAG7C+K,GAAW/K,GAAuB,UAAU,GAG5CgL,GAAWhL,GAAuB,YAAY,GAG9CiL,GAAWjL,GAAuB,SAAS,GAM3CkL,IAHWlL,GAAuB,YAAY,GAGnCA,GAAuB,WAAW,IAS7CmL,IANWnL,GAAuB,QAAQ,GAG/BA,GAAuB,YAAY,GAGnCA,GAAuB,UAAU,IAG5CoL,GAAWpL,GAAuB,UAAU,GAqB5CqL,IAlBWrL,GAAuB,WAAW,GAGlCA,GAAuB,YAAY,GAGnCA,GAAuB,QAAQ,GAG/BA,GAAuB,cAAc,GAGrCA,GAAuB,YAAY,GAGnCA,GAAuB,UAAU,GAGjCA,GAAuB,WAAW,IAM7CsL,IAHWtL,GAAuB,UAAU,GAGjCA,GAAuB,QAAQ,IAG1CuL,GAAWvL,GAAuB,YAAY,GAG9CwL,GAAWxL,GAAuB,QAAQ,GAG1CyL,GAAWzL,GAAuB,aAAa,GAS/C0L,IANW1L,GAAuB,YAAY,GAGnCA,GAAuB,QAAQ,GAG/BA,GAAuB,gBAAgB,IAMlD2L,IAHW3L,GAAuB,WAAW,GAGlCA,GAAuB,YAAY,IAS9C4L,GAAW5L,GAAuB,gBAAgB,GAGlD6L,GAAW7L,GAAuB,qBAAqB,GA6CvD8L,IA1CW9L,GAAuB,UAAU,GAGjCA,GAAuB,WAAW,GAGlCA,GAAuB,SAAS,GAGhCA,GAAuB,WAAW,GAGlCA,GAAuB,gBAAgB,GAGvCA,GAAuB,OAAO,GAG9BA,GAAuB,UAAU,GAGjCA,GAAuB,SAAS,GAGhCA,GAAuB,OAAO,GAG9BA,GAAuB,YAAY,GAGnCA,GAAuB,UAAU,GAGjCA,GAAuB,WAAW,GAGlCA,GAAuB,cAAc,GAGrCA,GAAuB,cAAc,GAGrCA,GAAuB,KAAK,IAEvC+L,GAAW/L,GAAuB,KAAK,GAEvCgM,GAAWhM,GAAuB,KAAK,GAEvCiM,GAAWjM,GAAuB,KAAK,GAEvCkM,GAAWlM,GAAuB,MAAM,GAExCmM,GAAWnM,GAAuB,MAAM,GAExCoM,GAAWpM,GAAuB,MAAM,GAExCqM,GAAWrM,GAAuB,MAAM,GAExCsM,GAAWtM,GAAuB,MAAM,GAExCuM,GAAWvM,GAAuB,KAAK,GACvCwM,GAyEK,CAAE9rB,KAAM,OAxEb+rB,GAAW,aACXC,GAAWzJ,GAAqB,CAAC,IAAK,KAAM,KAAM,OAAO,GAAO,GAWhE0J,GAAW,SAASltB,GAAK,MAAO,CAAE4E,SAAU5E,IAE5CmtB,GAAW,SAASntB,EAAGvB,GACnB,MAAO,CACLmG,SAAU5E,EACV6E,WAAYpG,EACZqG,cAAc,IAIpBsoB,GAAuB,EAEvBC,GAAuB,CAAC,CAAEC,KAAM,EAAG5gB,OAAQ,IAC3C6gB,GAAuB,EACvBC,GAAuB,GACvBC,GAAuB,EAI3B,GAAI,cAAejb,EAAS,CAC1B,KAAMA,EAAQkb,aAAavN,GACzB,MAAM,IAAIre,MAAM,mCAAqC0Q,EAAQkb,UAAY,MAG3ErN,EAAwBF,EAAuB3N,EAAQkb,WA2BzD,SAASnN,GAAuB1B,EAAM8O,GACpC,MAAO,CAAE1sB,KAAM,UAAW4d,KAAMA,EAAM8O,WAAYA,GAGpD,SAASnK,GAAqBzE,EAAOE,EAAU0O,GAC7C,MAAO,CAAE1sB,KAAM,QAAS8d,MAAOA,EAAOE,SAAUA,EAAU0O,WAAYA,GAexE,SAASC,GAAsBC,GAC7B,IAAwCjtB,EAApCktB,EAAUT,GAAoBQ,GAElC,GAAIC,EACF,OAAOA,EAGP,IADAltB,EAAIitB,EAAM,GACFR,GAAoBzsB,IAC1BA,IASF,IALAktB,EAAU,CACRR,MAFFQ,EAAUT,GAAoBzsB,IAEZ0sB,KAChB5gB,OAAQohB,EAAQphB,QAGX9L,EAAIitB,GACmB,KAAxB7N,EAAMT,WAAW3e,IACnBktB,EAAQR,OACRQ,EAAQphB,OAAS,GAEjBohB,EAAQphB,SAGV9L,IAIF,OADAysB,GAAoBQ,GAAOC,EACpBA,EAIX,SAASC,GAAoBC,EAAUC,GACrC,IAAIC,EAAkBN,GAAsBI,GACxCG,EAAkBP,GAAsBK,GAE5C,MAAO,CACLxpB,MAAO,CACLkI,OAAQqhB,EACRV,KAAQY,EAAgBZ,KACxB5gB,OAAQwhB,EAAgBxhB,QAE1BhI,IAAK,CACHiI,OAAQshB,EACRX,KAAQa,EAAcb,KACtB5gB,OAAQyhB,EAAczhB,SAK5B,SAAS0hB,GAASnQ,GACZmP,GAAcG,KAEdH,GAAcG,KAChBA,GAAiBH,GACjBI,GAAsB,IAGxBA,GAAoBtqB,KAAK+a,IAO3B,SAASoQ,GAAyBpQ,EAAUC,EAAOvG,GACjD,OAAO,IAAIoG,EACTA,EAAgBU,aAAaR,EAAUC,GACvCD,EACAC,EACAvG,GAIJ,SAASyI,KACP,IAAIkO,EAAQC,EAsBZ,OApBAD,EAAKlB,GACAoB,OACMtO,IACTqO,EAoBJ,WACE,IAAID,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKM,QACM7O,EAAY,CA6BrB,GA5BAqO,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAKI,QACM9O,IACT2O,EAAKL,QACMtO,IACT4O,EAAKC,QACM7O,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAKxO,GAEHwO,IAAOxO,EACT,KAAOwO,IAAOxO,GACZqO,EAAGrrB,KAAKwrB,GACRA,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAKI,QACM9O,IACT2O,EAAKL,QACMtO,IACT4O,EAAKC,QACM7O,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAKxO,QAITqO,EAAKrO,EAEHqO,IAAOrO,GACMoO,EACfG,EAn7CO,SAAS7N,EAAM9O,GAClB,MAAMmd,EAAM,CAACrO,GAAQA,EAAK/c,KAAO+c,GACjC,IAAK,IAAIliB,EAAI,EAAGA,EAAIoT,EAAK5K,OAAQxI,IAC3BoT,EAAKpT,GAAG,IAA4B,IAAtBoT,EAAKpT,GAAG,GAAGwI,QAC7B+nB,EAAI/rB,KAAK4O,EAAKpT,GAAG,IAAMoT,EAAKpT,GAAG,GAAGmF,KAAOiO,EAAKpT,GAAG,IAEnD,MAAO,CACLkf,UAAWjc,MAAM6R,KAAKoK,IACtBC,WAAY0D,GAAqB1D,IACjCha,IAAKorB,GA06CNC,CAAOT,EAAIF,GAChBD,EAAKG,IAELrB,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,EAGP,OAAOoO,EArGAa,MACMjP,IACTqO,EAAKQ,MAEHR,IAAOrO,GACMoO,EAEfA,EADYC,IAGZnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAuFT,SAASS,KACP,IAAIT,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAyD5B,OAvDAP,EA0DF,WACE,IAAIA,EAAIG,EAAQC,EAAQE,EAAQE,EAAQM,EAExCd,EAAKlB,IACLqB,EAAKY,QACMnP,IACTuO,EAAK,MAEHA,IAAOvO,GACJsO,OACMtO,IACTwO,EAAKY,QACMpP,GACJsO,OACMtO,IACT0O,EAAKW,QACMrP,IACT0O,EAAK,MAEHA,IAAO1O,GACJsO,OACMtO,IACT4O,EAAKU,QACMtP,IACT4O,EAAK,MAEHA,IAAO5O,GACJsO,OACMtO,IACTkP,EAAKJ,QACM9O,IACTkP,EAAK,MAEHA,IAAOlP,GACMoO,EA1gDbjT,EA2gDUoT,EA3gDL5tB,EA2gDS6tB,EA3gDNnvB,EA2gDUqvB,EA3gDP7vB,EA2gDW+vB,EAAxBL,EA1gDL,CACL7Q,UAAWjc,MAAM6R,KAAKoK,IACtBC,WAAY0D,GAAqB1D,IACjCha,IAAK,CACH5C,KAAM,WACNwuB,KAAMpU,EACNhR,OAAQxJ,GAAKA,EAAEgD,IACf2D,QAASjI,EACTiQ,MAAOzQ,EACPyE,YAAa3C,GAAKA,EAAE2C,cAAe,IAkgD3B8qB,EAAKG,IAELrB,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,KAebkN,GAAckB,EACdA,EAAKpO,GA/iDI,IAAS7E,EAAKxa,EAAGtB,EAAGR,EAkjD/B,OAAOuvB,EApIFoB,MACMxP,IACToO,EAAKlB,GACLqB,EAAKrB,GACiC,KAAlCpN,EAAMT,WAAW6N,KACnBmB,EA77CO,IA87CPnB,OAEAmB,EAAKrO,EACmB,IAApBuN,IAAyBW,GAAS9N,IAEpCiO,IAAOrO,IACTwO,EAAKF,QACMtO,IACTyO,EAAKgB,QACMzP,IACT0O,EAAKJ,QACMtO,GAC6B,KAAlCF,EAAMT,WAAW6N,KACnByB,EAz8CD,IA08CCzB,OAEAyB,EAAK3O,EACmB,IAApBuN,IAAyBW,GAAS5N,IAEpCqO,IAAO3O,EAETuO,EADAF,EAAK,CAACA,EAAIG,EAAIC,EAAIC,EAAIC,IAGtBzB,GAAcqB,EACdA,EAAKvO,KAebkN,GAAcqB,EACdA,EAAKvO,GAEHuO,IAAOvO,IACMoO,EACfG,EAr+CW,IAq+CCA,EAp+CD,GACLjrB,aAAa,IAq+CrB8qB,EAAKG,GAGAH,EAgFT,SAASsB,KACP,IAAItB,EAAIG,EAAQC,EAxiDO7tB,EA8mDvB,OApEAytB,EAAKlB,IACLqB,EAo2SF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAthUQ,UAuhUTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASzF,KAEpC8F,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAt4SFyB,MACM7P,GACJsO,OACMtO,IACTwO,EAAKsB,QACM9P,IACTwO,EAAKuB,MAEHvB,IAAOxO,IACTwO,EAAK,MAEHA,IAAOxO,GACMoO,EAEfA,EADAG,GAxjDiB5tB,EAwjDD6tB,GAvjDL,SAAS7tB,EAAE+B,cAAkB,UA0jDxCwqB,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,GApkDI,cAqkDLpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS3N,IAEpCgO,IAAOvO,IA1kDD,WA2kDJF,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS1N,KAGtC+N,IAAOvO,GACJsO,OACMtO,IACTwO,EAAKuB,QACM/P,GACMoO,EAEfA,EADAG,EAvlDI,SAASyB,EAAGrvB,GAClB,MAAO,GAAGqvB,EAAEttB,iBAAiB/B,EAAE+B,gBAslDxButB,CAAQ1B,EAAIC,KAWrBtB,GAAckB,EACdA,EAAKpO,IAIFoO,EAGT,SAASgB,KACP,IAAIhB,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAyD5B,OAvDAP,EAAK8B,QACMlQ,IACToO,EAAKlB,GACLqB,EAAKrB,GACiC,KAAlCpN,EAAMT,WAAW6N,KACnBmB,EAjpDO,IAkpDPnB,OAEAmB,EAAKrO,EACmB,IAApBuN,IAAyBW,GAAS9N,IAEpCiO,IAAOrO,IACTwO,EAAKF,QACMtO,IACTyO,EAAKyB,QACMlQ,IACT0O,EAAKJ,QACMtO,GAC6B,KAAlCF,EAAMT,WAAW6N,KACnByB,EA7pDD,IA8pDCzB,OAEAyB,EAAK3O,EACmB,IAApBuN,IAAyBW,GAAS5N,IAEpCqO,IAAO3O,EAETuO,EADAF,EAAK,CAACA,EAAIG,EAAIC,EAAIC,EAAIC,IAGtBzB,GAAcqB,EACdA,EAAKvO,KAebkN,GAAcqB,EACdA,EAAKvO,GAEHuO,IAAOvO,IACMoO,EACfG,EA3pDW,IA2pDEA,EA1pDF,GACLjrB,aAAa,IA2pDrB8qB,EAAKG,GAGAH,EAGT,SAAS8B,KACP,IAAI9B,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKkB,QACMzP,EAAY,CAgCrB,IA/BAqO,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAKgB,QACM1P,IACT0O,EAAK,MAEHA,IAAO1O,IACT2O,EAAKL,QACMtO,IACT4O,EAAKa,QACMzP,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAWtB1B,GAAcsB,EACdA,EAAKxO,KAGPkN,GAAcsB,EACdA,EAAKxO,GAEAwO,IAAOxO,GACZqO,EAAGrrB,KAAKwrB,GACRA,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAKgB,QACM1P,IACT0O,EAAK,MAEHA,IAAO1O,IACT2O,EAAKL,QACMtO,IACT4O,EAAKa,QACMzP,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAWtB1B,GAAcsB,EACdA,EAAKxO,KAGPkN,GAAcsB,EACdA,EAAKxO,GAGLqO,IAAOrO,GACMoO,EAEfA,EADAG,EAtuDQ,SAAS7N,EAAM9O,GACnB,IAAImd,EAAMrO,EACV,IAAK,IAAIliB,EAAI,EAAGA,EAAIoT,EAAK5K,OAAQxI,IAC/BuwB,EAAI3kB,MAAQwH,EAAKpT,GAAG,GACpBuwB,EAAI9Z,MAAQrD,EAAKpT,GAAG,GACpBuwB,EAAMA,EAAI3kB,MAEZ,MAAO,CACLsT,UAAWjc,MAAM6R,KAAKoK,IACtBC,WAAY0D,GAAqB1D,IACjCha,IAAK+c,GA4tDNyP,CAAQ5B,EAAIF,KAGjBnB,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,EAGP,OAAOoO,EAGT,SAASqB,KACP,IAAIrB,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAyD5B,OAvDAP,EA0NF,WACE,IAAIA,EAAIG,EAAIF,EAAgBM,EAAQyB,EAAQC,EAAUC,EAAUC,EAAUC,EAAUC,EAAUC,EAAUC,EAAUC,EAAUC,EAE5HzC,EAAKlB,IACLqB,EAAKD,QACMtO,IACTqO,EAAKc,QACMnP,IACTqO,EAAK,MAEHA,IAAOrO,GACJsO,OACMtO,GAsiQjB,WACE,IAAIoO,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA5sSQ,WA6sSTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASrG,KAEpC0G,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAvkQI0C,KACM9Q,GACJ+Q,OACM/Q,IACT2O,EAmRZ,WACE,IAAIP,EAAIG,EAAQC,EAEhBJ,EAAKlB,IACLqB,EAAKyC,QACMhR,GACJsO,OACMtO,IACTwO,EAAKyC,QACMjR,IACTwO,EAqqRR,WACE,IAAIJ,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAzjUQ,UA0jUTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASxF,KAEpC6F,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EA5kU6B,UA+kU7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAxsRI8C,IAEH1C,IAAOxO,GACMoO,EAxsEG+C,EAysED3C,EAAjBD,EAxsEO,GAwsEMA,EAxsED,GAAG7rB,iBAAiByuB,EAAEzuB,gBAysElC0rB,EAAKG,IAELrB,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,GArtEK,IAAYmR,EAwtExB,OAAO/C,EAhTQgD,MACMpR,IACT2O,EAAK,MAEHA,IAAO3O,GACJsO,OACMtO,IACToQ,EAAKN,QACM9P,IACToQ,EAAKL,MAEHK,IAAOpQ,IACToQ,EAAK,MAEHA,IAAOpQ,GACJsO,OACMtO,IACTqQ,EAAMgB,QACMrR,GACJsO,OACMtO,IACVsQ,EAu8BxB,WACE,IAAIlC,EAAYI,EAEhBJ,EAAKlB,GACAoE,OACMtR,GACJsO,OACMtO,IACTwO,EA0LN,WACE,IAAIJ,EAAIG,EAAIF,EAAIG,EAIhB,GAFAJ,EAAKlB,IACLqB,EAAKgD,QACMvR,EAAY,CAGrB,IAFAqO,EAAK,GACLG,EAAKgD,KACEhD,IAAOxO,GACZqO,EAAGrrB,KAAKwrB,GACRA,EAAKgD,KAEHnD,IAAOrO,GACMoO,EACfG,EAAKrN,EAAQqN,EAAIF,GACjBD,EAAKG,IAELrB,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,EAGP,OAAOoO,EAnNEqD,MACMzR,GACMoO,EAEfA,EADaI,IAWjBtB,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAj+BqBsD,MACM1R,IACVsQ,EAAM,MAEJA,IAAQtQ,GACJsO,OACMtO,IACVuQ,EA8J5B,WACE,IAAInC,EAAIG,EAAQC,EAAQE,EAAQE,EAAQM,EAExCd,EAAKlB,GAnnEO,QAonERpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAStN,IAEpC2N,IAAOvO,GACJsO,OACMtO,GA3nED,gBA4nEJF,EAAM6P,OAAOzC,GAAa,IAAIxqB,eAChC8rB,EAAK1O,EAAM6P,OAAOzC,GAAa,IAC/BA,IAAe,KAEfsB,EAAKxO,EACmB,IAApBuN,IAAyBW,GAASrN,IAEpC2N,IAAOxO,GACJsO,OACMtO,GAnoEL,OAooEAF,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/BgsB,EAAK5O,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfwB,EAAK1O,EACmB,IAApBuN,IAAyBW,GAASpN,IAEpC4N,IAAO1O,GACJsO,OACMtO,GA3oET,OA4oEIF,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/BksB,EAAK9O,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEf0B,EAAK5O,EACmB,IAApBuN,IAAyBW,GAASnN,IAEpC6N,IAAO5O,GACJsO,OACMtO,IACTkP,EAAKyC,QACM3R,GACMoO,EAEfA,EADAG,EAtpEL,CACLrtB,QAAS,wBACTe,KAopEuBitB,KAWjBhC,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EApPyBwD,MACM5R,IACVuQ,EAAM,MAEJA,IAAQvQ,GACJsO,OACMtO,IACVwQ,EA62DhC,WACE,IAAIpC,EAAYI,EAEhBJ,EAAKlB,GA+pOP,WACE,IAAIkB,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAlqUQ,UAmqUTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAStF,KAEpC2F,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAhsOFyD,KACM7R,GACJsO,OACMtO,IACTwO,EAAKsD,QACM9R,GACMoO,EAEfA,EADaI,IAWjBtB,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAv4D6B2D,MACM/R,IACVwQ,EAAM,MAEJA,IAAQxQ,GACJsO,OACMtO,IACVyQ,EAm4DpC,WACE,IAAIrC,EAAIG,EAAgBG,EAExBN,EAAKlB,IACLqB,EA2sOF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAxuUQ,UAyuUTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASpF,KAEpCyF,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EA7uOF4D,MACMhS,GACJsO,OACMtO,GACJiS,OACMjS,GACJsO,OACMtO,IACT0O,EAAKwD,QACMlS,GACMoO,EACfG,EAAaG,EAnsHY7uB,MAosHzBuuB,EAAKG,IAkBbrB,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAz6DiC+D,MACMnS,IACVyQ,EAAM,MAEJA,IAAQzQ,GACJsO,OACMtO,IACV0Q,EAq6DxC,WACE,IAAItC,EAAYI,EAEhBJ,EAAKlB,GAkxOP,WACE,IAAIkB,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAj1UQ,WAk1UTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASjF,KAEpCsF,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAnzOFgE,KACMpS,GACJsO,OACMtO,IACTwO,EAAKmD,QACM3R,GACMoO,EAEfA,EADaI,IAWjBtB,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EA/7DqCiE,MACMrS,IACV0Q,EAAM,MAEJA,IAAQ1Q,GACJsO,OACMtO,IACV2Q,EAAMtB,QACMrP,IACV2Q,EAAM,MAEJA,IAAQ3Q,GACJsO,OACMtO,IACV4Q,EAAMtB,QACMtP,IACV4Q,EAAM,MAEJA,IAAQ5Q,GACJsO,OACMtO,IACV6Q,EA66DpD,WACE,IAAIzC,EAAYI,EAEhBJ,EAAKlB,GA0xOP,WACE,IAAIkB,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAp3UQ,WAq3UTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAShF,KAEpCqF,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EA3zOFkE,KACMtS,GACJsO,OACMtO,IACTwO,EAqBN,WACE,IAAIJ,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKgE,QACMvS,EAAY,CA6BrB,IA5BAqO,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAK8D,QACMxS,IACT2O,EAAKL,QACMtO,IACT4O,EAAK2D,QACMvS,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAKxO,GAEAwO,IAAOxO,GACZqO,EAAGrrB,KAAKwrB,GACRA,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAK8D,QACMxS,IACT2O,EAAKL,QACMtO,IACT4O,EAAK2D,QACMvS,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAKxO,GAGLqO,IAAOrO,GACMoO,EACfG,EAAK9N,EAAQ8N,EAAIF,GACjBD,EAAKG,IAELrB,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,EAGP,OAAOoO,EAlGEqE,MACMzS,GACMoO,EAEfA,EApwHO,CACLltB,QAAS,SACTH,KAAM,SACNkB,KAgwHWusB,KAWjBtB,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAv8DiDsE,MACM1S,IACV6Q,EAAM,MAEJA,IAAQ7Q,GACKoO,EACfG,EAphExC,SAASpT,EAAKwX,EAAIzzB,EAAGD,EAAG2zB,EAAGC,EAAIC,EAAGC,EAAGC,EAAG3zB,EAAGR,EAAGo0B,GAElD,OADGxxB,MAAMC,QAAQkxB,IAAIA,EAAE5uB,QAAQgG,GAAQA,EAAKiB,OAASyS,GAAU6D,IAAI,WAAWvX,EAAKkB,OAAOlB,EAAKiB,UACxF,CACHlK,KAAM,SACN4U,cAAegd,EACfhrB,SAAUzI,EACVuG,QAASxG,EACTqU,KAAMsf,EACNhd,mBAAoBid,EACpBtf,MAAOuf,EACPvD,KAAMpU,EACNnF,QAAS+c,EACT9c,OAAQ+c,EACR1rB,QAASjI,EACTiQ,MAAOzQ,EACPJ,OAAOw0B,GAqgEsCC,CAAQ7E,EAAIM,EAAIyB,EAAIC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,GACjEzC,EAAKG,IAELrB,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,KAebkN,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,KAebkN,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAlaF+E,MACMnT,IACToO,EAAKlB,GACLqB,EAAKrB,GACiC,KAAlCpN,EAAMT,WAAW6N,KACnBmB,EApyDO,IAqyDPnB,OAEAmB,EAAKrO,EACmB,IAApBuN,IAAyBW,GAAS9N,IAEpCiO,IAAOrO,IACTwO,EAAKF,QACMtO,IACTyO,EAAKgB,QACMzP,IACT0O,EAAKJ,QACMtO,GAC6B,KAAlCF,EAAMT,WAAW6N,KACnByB,EAhzDD,IAizDCzB,OAEAyB,EAAK3O,EACmB,IAApBuN,IAAyBW,GAAS5N,IAEpCqO,IAAO3O,EAETuO,EADAF,EAAK,CAACA,EAAIG,EAAIC,EAAIC,EAAIC,IAGtBzB,GAAcqB,EACdA,EAAKvO,KAebkN,GAAcqB,EACdA,EAAKvO,GAEHuO,IAAOvO,IACMoO,EACfG,EA3xDW,IA2xDEA,EA1xDF,GACLrY,oBAAoB,IA2xD5BkY,EAAKG,GAGAH,EAGT,SAASe,KACP,IAAIf,EAAYI,EAAIC,EAAIC,EAAIC,EAAIC,EAAIwB,EAAIlB,EAIxC,GAFAd,EAAKlB,GACAkG,OACMpT,EAET,GADKsO,OACMtO,EAET,IADAwO,EAAK6E,QACMrT,EAAY,CA6BrB,IA5BAyO,EAAK,GACLC,EAAKxB,IACLyB,EAAKL,QACMtO,IACT4O,EAAK4D,QACMxS,IACToQ,EAAK9B,QACMtO,IACTkP,EAAKmE,QACMrT,EAET0O,EADAC,EAAK,CAACA,EAAIC,EAAIwB,EAAIlB,IAexBhC,GAAcwB,EACdA,EAAK1O,GAEA0O,IAAO1O,GACZyO,EAAGzrB,KAAK0rB,GACRA,EAAKxB,IACLyB,EAAKL,QACMtO,IACT4O,EAAK4D,QACMxS,IACToQ,EAAK9B,QACMtO,IACTkP,EAAKmE,QACMrT,EAET0O,EADAC,EAAK,CAACA,EAAIC,EAAIwB,EAAIlB,IAexBhC,GAAcwB,EACdA,EAAK1O,GAGLyO,IAAOzO,GACMoO,EAEfA,EADK3N,EAAQ+N,EAAIC,KAGjBvB,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,OAGPkN,GAAckB,EACdA,EAAKpO,OAGPkN,GAAckB,EACdA,EAAKpO,EAGP,OAAOoO,EAGT,SAASiF,KACP,IAAIjF,EAAIG,EAAwBK,EAx3DXzvB,EAw7DrB,OA9DAivB,EAAKlB,IACLqB,EAAK+E,QACMtT,IACTuO,EAAKgF,MAEHhF,IAAOvO,GACJsO,OACMtO,GACJgR,OACMhR,GACJsO,OACMtO,GACJwT,OACMxT,GACJsO,OACMtO,IACT4O,EAAKQ,QACMpP,GACJsO,OACMtO,GACJyT,OACMzT,GACMoO,EA/4DP,iBADLjvB,EAi5DUovB,KAh5DKpvB,EAAO,CAAE4B,KAAM,UAAWlB,MAAOV,IAi5DnDivB,EADAG,EA/4DL,CAAEpvB,OAAMiQ,KA+4Dcwf,KAmCjC1B,GAAckB,EACdA,EAAKpO,GAGAoO,EAuWT,SAASiD,KACP,IAAIjD,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EApvEXuC,EAAGlyB,EASHyhB,EAAM9O,EAszE3B,GAzEAwc,EAAKlB,IACLqB,EAAKmF,QACM1T,IACTqO,EAAKC,QACMtO,GAv0ED,WAw0EJF,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B8rB,EAAK1O,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfsB,EAAKxO,EACmB,IAApBuN,IAAyBW,GAAS1N,IAEpCgO,IAAOxO,IApwEH,YAqwEFF,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B8rB,EAAK1O,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfsB,EAAKxO,EACmB,IAApBuN,IAAyBW,GAASlN,KAGtCwN,IAAOxO,IACTyO,EAAKH,QACMtO,IACT0O,EAAK8E,QACMxT,IACT2O,EAAKL,QACMtO,IACT4O,EAAK+E,QACM3T,GACJsO,OACMtO,GACJyT,OACMzT,GACMoO,EAxxEZ+C,EAyxEU3C,EAzxEPvvB,EAyxEW2vB,EAxxE7BjR,GAAW4D,IAAI,sBAyxEH6M,EADAG,EAvxEL,CACLhoB,UAAWtH,EACXqE,aAAa,EACbwL,KAAM,IACN/N,KAAMowB,EAAEzuB,iBA8yEVwqB,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,EAAY,CAgCrB,GA/BAoO,EAAKlB,IACLqB,EAAKuB,QACM9P,IACTuO,EAAKrB,IACLmB,EAAKqF,QACM1T,GACTwO,EAAKtB,GACLK,KACAkB,EAAKmB,KACLrC,KACIkB,IAAOzO,EACTwO,OAAK,GAELtB,GAAcsB,EACdA,EAAKxO,GAEHwO,IAAOxO,EAETuO,EADAF,EAAK,CAACA,EAAIG,IAGVtB,GAAcqB,EACdA,EAAKvO,KAGPkN,GAAcqB,EACdA,EAAKvO,GAEHuO,IAAOvO,IACTuO,EAAKmF,OAGLnF,IAAOvO,EAAY,CA6BrB,IA5BAqO,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAK8D,QACMxS,IACT2O,EAAKL,QACMtO,IACT4O,EAAKgF,QACM5T,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAKxO,GAEAwO,IAAOxO,GACZqO,EAAGrrB,KAAKwrB,GACRA,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAK8D,QACMxS,IACT2O,EAAKL,QACMtO,IACT4O,EAAKgF,QACM5T,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAKxO,GAGLqO,IAAOrO,IACTwO,EAAKF,QACMtO,IACTyO,EAAK+D,QACMxS,IACTyO,EAAK,MAEHA,IAAOzO,GACMoO,EAz5EJ1N,EA05EE6N,EA15EI3c,EA05EAyc,EAz5EnB1Q,GAAW4D,IAAI,sBA05Eb6M,EADAG,EAx5EE3c,GAAQA,EAAK5K,OAAS,GACxB0Z,EAAK,GAAK,CACRze,KAAM,CACJlB,KAAM,aACNkK,MAAO,KACPuB,OAAQ,KAEV3B,GAAI,MAEC8V,GAAWD,EAAK,GAAI9O,IAEtB8O,EAAK,KAg5EVwM,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,EAEHoO,IAAOpO,IACToO,EAAKlB,IACLqB,EAAKoF,QACM3T,IACTqO,EAAKC,QACMtO,IACTwO,EAAKgE,QACMxS,IACTwO,EAAK,MAEHA,IAAOxO,GACMoO,EAEfA,EADAG,EAAaA,IAGbrB,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,IAKX,OAAOoO,EAGT,SAASuF,KACP,IAAIvF,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKqF,QACM5T,EAAY,CA6BrB,IA5BAqO,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAK8D,QACMxS,IACT2O,EAAKL,QACMtO,IACT4O,EAAKgF,QACM5T,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAKxO,GAEAwO,IAAOxO,GACZqO,EAAGrrB,KAAKwrB,GACRA,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAK8D,QACMxS,IACT2O,EAAKL,QACMtO,IACT4O,EAAKgF,QACM5T,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAKxO,GAGLqO,IAAOrO,GACMoO,EAEfA,EADAG,EAAK9N,EAAQ8N,EAAIF,KAGjBnB,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,EAGP,OAAOoO,EAGT,SAASyF,KACP,IAAIzF,EAAIG,EAAgBG,EAAgBQ,EAwFxC,OAtFAd,EAAKlB,IACLqB,EAAKoD,QACM3R,GACJsO,OACMtO,GACJ8T,OACM9T,GACJsO,OACMtO,IACT0O,EAAKqF,QACM/T,IACT0O,EAkqRZ,WACE,IAAIN,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAv5UQ,YAw5UTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS/E,KAEpCoF,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EA16U6B,YA66U7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EArsRQ4F,IAEHtF,IAAO1O,GACJsO,OACMtO,GACJwT,OACMxT,GACJsO,OACMtO,IACTkP,EAAK+E,QACMjU,GACHsO,OACMtO,GACJyT,OACMzT,GACJsO,OACMtO,GACJkU,OACMlU,GACKoO,EAEfA,EADAG,EA3iFb,CACLtsB,KA0iF+BssB,EAziF/B9hB,OAAQ,IAyiF2BiiB,KAAIQ,EAziFpBrvB,aA4kFjBqtB,GAAckB,EACdA,EAAKpO,KAebkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAGT,SAASwF,KACP,IAAIxF,EAAIG,EAAQC,EAAIC,EAAIC,EAAIC,EAAIC,EAmGhC,OAjGAR,EAAKlB,IACLqB,EAAK4F,QACMnU,GACJsO,OACMtO,IACTwO,EAAK4F,QACMpU,GACTyO,EAAKvB,IACLwB,EAAKmF,QACM7T,IACT0O,EAAKyF,MAEHzF,IAAO1O,IACT2O,EAAKL,QACMtO,IACT4O,EAAKwF,QACMpU,EAETyO,EADAC,EAAK,CAACA,EAAIC,EAAIC,IAWlB1B,GAAcuB,EACdA,EAAKzO,GAEHyO,IAAOzO,IACTyO,EAAK,MAEHA,IAAOzO,IACT0O,EAAKJ,QACMtO,IACT2O,EAAK+E,QACM1T,GACMoO,EAEfA,EADAG,EA3oFA,SAAS8F,EAAKC,GAClB3W,GAAW4D,IAAI,WAAW8S,WAC1B,IAAI7nB,EAAS,IACb,MAAM+nB,EAAMD,GAAOA,EAAI,GAGvB,MAFmB,iBAARC,IAAkB/nB,EAAY+nB,EAAH,MAClCA,GAAOA,EAAItyB,MAAQsyB,EAAI9nB,SAAQD,EAAS,IAAK+nB,EAAKhxB,OAAQ,OACvD,CACLtB,KAAM,CACJlB,KAAM,aACNkK,MAAOopB,EACP7nB,UAEF3B,GAAI,MA+nFG2pB,CAAQjG,EAAIE,KAWrBvB,GAAckB,EACdA,EAAKpO,KAWXkN,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,IACLqB,EAAKsF,QACM7T,GACJsO,OACMtO,IACTwO,EAAKiG,QACMzU,IACTwO,EAAK,MAEHA,IAAOxO,GACMoO,EAEfA,EADAG,EAjqFK,CACHtsB,KAAM,CACJlB,KAAM,aACNkK,MAAO,KACPuB,OA6pFS+hB,GA3pFX1jB,GA2pFe2jB,KAGjBtB,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EA9gBN,WACE,IAAIA,EAAIG,EAAQC,EA4BhB,OA1BAJ,EAAKlB,IACLqB,EAAKoD,QACM3R,GACJsO,OACMtO,IACTwO,EAAKiG,QACMzU,IACTwO,EAAK,MAEHA,IAAOxO,GACMoO,EAEfA,EADAG,EAruES,CAAEtsB,KAquEEssB,EAruEO1jB,GAquEH2jB,KAGjBtB,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAifEsG,KAIFtG,EAGT,SAASqG,KACP,IAAIrG,EAAIG,EAAQC,EAoDhB,OAlDAJ,EAAKlB,IACLqB,EAAKyC,QACMhR,GACJsO,OACMtO,IACTwO,EA6nIN,WACE,IAAIJ,EAAIG,EAERH,EAAKlB,IACLqB,EAAKgF,QACMvT,GACMkN,IAx9MJ,SAAS/tB,GACd,IAAwC,IAApC+jB,GAAY/jB,EAAKkC,eAAyB,MAAM,IAAIO,MAAM,UAAWqC,KAAKE,UAAUhF,GAAM,gDAC9F,OAAO,EAu9MRw1B,CAASpG,GAEPvO,OAEA,KAEIA,GACMoO,EAEfA,EADAG,EAAcA,IAGdrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,IACLqB,EAAKqG,QACM5U,IACMoO,EACfG,EAAcA,GAEhBH,EAAKG,GAGP,OAAOH,EAhqIEyG,MACM7U,GACMoO,EAEfA,EADAG,EAAaC,IAWjBtB,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,IACLqB,EAAKyC,QACMhR,IACTuO,EAAK,MAEHA,IAAOvO,GACJsO,OACMtO,IACTwO,EAAK2F,QACMnU,GACMoO,EAEfA,EADAG,EAAaC,IAWjBtB,GAAckB,EACdA,EAAKpO,IAIFoO,EAGT,SAAS0G,KACP,IAAI1G,EAAIG,EAAgBG,EAAgBQ,EAAS6F,EAwFjD,OAtFA3G,EAAKlB,GAxuFO,WAyuFRpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASjN,IAEpCsN,IAAOvO,GACJsO,OACMtO,GACJwT,OACMxT,GACJsO,OACMtO,IACT0O,EAAKiD,QACM3R,IACT0O,EAAK,MAEHA,IAAO1O,GACJsO,OACMtO,GACJyT,OACMzT,GACJsO,OACMtO,IACTkP,EAAKuF,QACMzU,IACTkP,EAAK,MAEHA,IAAOlP,GACHsO,OACMtO,IACV+U,EAqFtB,WACE,IAAI3G,EAAoBM,EAExBN,EAAKlB,GACAkG,OACMpT,GACJsO,OACMtO,GACJ+T,OACM/T,GACJsO,OACMtO,IACT0O,EAAK+F,QACMzU,IACT0O,EAAK,MAEHA,IAAO1O,GACMoO,EAEfA,EAl2FG,CACLltB,QAAS,iBACT2J,GA+1Fe6jB,KAGbxB,GAAckB,EACdA,EAAKpO,KAebkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EA9HmB4G,MACMhV,IACV+U,EAAM,MAEJA,IAAQ/U,GACKoO,EAEfA,EADAG,EA5wFT,CACLxtB,KAAM,SACNkB,KA0wF2BysB,EAzwF3BprB,aAAa,EACbuH,GAwwF+BqkB,EAvwF/BnkB,YAuwFmCgqB,KAGrB7H,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,KAebkN,GAAckB,EACdA,EAAKpO,KAebkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAiOT,SAASoD,KACP,IAAIpD,EAAQC,EAAQI,EAiDpB,OA/CAL,EAAKlB,GACAoB,OACMtO,IACTqO,EAAKmE,QACMxS,GACJsO,OACMtO,IACTyO,EAAK8C,QACMvR,GACMoO,EAEfA,EADaK,IAenBvB,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,GACAoB,OACMtO,IACTqO,EAkBN,WACE,IAAID,EAAIG,EAAQC,EAAQE,EAAgBQ,EAAImB,EAAK0E,EAAKzE,EAAK2E,EAAK1E,EAAK2E,EAIrE,GAFA9G,EAAKlB,IACLqB,EAAK4G,QACMnV,EAET,GADKsO,OACMtO,EAET,IADAwO,EAAK+C,QACMvR,EAET,GADKsO,OACMtO,EAET,IADA0O,EAkxPV,WACE,IAAIN,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA/nUQ,UAgoUTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASvF,KAEpC4F,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EApzPMgH,MACMpV,EAET,GADKsO,OACMtO,EAET,GADKwT,OACMxT,EAET,GADKsO,OACMtO,EAET,IADAkP,EAAKqE,QACMvT,EAAY,CA6BrB,IA5BAqQ,EAAM,GACN0E,EAAM7H,IACNoD,EAAMhC,QACMtO,IACViV,EAAMzC,QACMxS,IACVuQ,EAAMjC,QACMtO,IACVkV,EAAM3B,QACMvT,EAEV+U,EADAzE,EAAM,CAACA,EAAK2E,EAAK1E,EAAK2E,IAe5BhI,GAAc6H,EACdA,EAAM/U,GAED+U,IAAQ/U,GACbqQ,EAAIrtB,KAAK+xB,GACTA,EAAM7H,IACNoD,EAAMhC,QACMtO,IACViV,EAAMzC,QACMxS,IACVuQ,EAAMjC,QACMtO,IACVkV,EAAM3B,QACMvT,EAEV+U,EADAzE,EAAM,CAACA,EAAK2E,EAAK1E,EAAK2E,IAe5BhI,GAAc6H,EACdA,EAAM/U,GAGNqQ,IAAQrQ,IACV+U,EAAMzG,QACMtO,IACVsQ,EAAMmD,QACMzT,GACKoO,EAvoGlB5S,EAwoGgB+S,EAxoGT7N,EAwoGiBwO,EAxoGXtd,EAwoGeye,GAxoGxBvwB,EAwoGgB0uB,GAvoG/B/qB,KAAO+X,EACT1b,EAAEoM,MAAQyU,GAAWD,EAAM9O,GAuoGXwc,EADAG,EAroGTzuB,IAgpGKotB,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,OAGPkN,GAAckB,EACdA,EAAKpO,OAGPkN,GAAckB,EACdA,EAAKpO,OAGPkN,GAAckB,EACdA,EAAKpO,OAGPkN,GAAckB,EACdA,EAAKpO,OAGPkN,GAAckB,EACdA,EAAKpO,OAGPkN,GAAckB,EACdA,EAAKpO,OAGPkN,GAAckB,EACdA,EAAKpO,OAGPkN,GAAckB,EACdA,EAAKpO,EAxrGK,IAASxE,EAAI1b,EAAG4gB,EAAM9O,EA0rG9Bwc,IAAOpO,IACToO,EAAKlB,IACLqB,EAAK4G,QACMnV,GACJsO,OACMtO,IACTwO,EAAK+C,QACMvR,GACJsO,OACMtO,IACT0O,EAAK2G,QACMrV,IACT0O,EAAK,MAEHA,IAAO1O,GACMoO,EACfG,EArsGA,SAAS/S,EAAI1b,EAAGmC,GAGpB,OAFAnC,EAAE2D,KAAO+X,EACT1b,EAAEmM,GAAOhK,EACFnC,EAksGEw1B,CAAQ/G,EAAIC,EAAIE,GACrBN,EAAKG,IAELrB,GAAckB,EACdA,EAAKpO,KAebkN,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,IACLqB,EAAK4G,QACMnV,GACJsO,OACMtO,IACTwO,EAAKgF,QACMxT,GACJsO,OACMtO,IACT0O,EAAKU,QACMpP,GACJsO,OACMtO,GACJyT,OACMzT,GACJsO,OACMtO,IACTkP,EAAKuF,QACMzU,IACTkP,EAAK,MAEHA,IAAOlP,IACTqQ,EAAM/B,QACMtO,IACV+U,EAAMM,QACMrV,IACV+U,EAAM,MAEJA,IAAQ/U,GACKoO,EACfG,EArvGd,SAAS/S,EAAIpM,EAAMuC,EAAO1P,GAEhC,OADAmN,EAAK9L,aAAc,EACZ,CACLrB,KAAMmN,EACNvE,GAAI8G,EACJlO,KAAM+X,EACNvP,GAAIhK,GA+uGmBszB,CAAQhH,EAAIG,EAAIQ,EAAI6F,GACzB3G,EAAKG,IAELrB,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,KA+BrBkN,GAAckB,EACdA,EAAKpO,KAKX,OAAOoO,EAhREoH,MACMxV,GACMoO,EAEfA,EADaC,IAOfnB,GAAckB,EACdA,EAAKpO,IAIFoO,EAoQT,SAASmD,KACP,IAAInD,EAAIG,EAAQC,EAAgBI,EAjyGX9uB,EAAG6R,EAm3GxB,OAhFAyc,EAAKlB,IACLqB,EAAKkH,QACMzV,GACJsO,OACMtO,IACTwO,EAAKiG,QACMzU,IACTwO,EAAK,MAEHA,IAAOxO,GACMoO,EA7yGGzc,EA8yGD6c,EACjBJ,EADAG,EA7yGiB,SADFzuB,EA8yGFyuB,GA7yGLxtB,MACJjB,EAAE+K,GAAK8G,EACA7R,GAEA,CACLoL,GAAIpL,EAAEoL,GACND,MAAOnL,EAAEmL,MACTJ,GAAI8G,KAyyGVub,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,IACLqB,EAAKiF,QACMxT,GACJsO,OACMtO,IACTwO,EAAKY,QACMpP,GACJsO,OACMtO,GACJyT,OACMzT,GACJsO,OACMtO,IACT4O,EAAK6F,QACMzU,IACT4O,EAAK,MAEHA,IAAO5O,GACMoO,EAEfA,EADAG,EAp0GJ,SAASnf,EAAMuC,GAEnB,OADAvC,EAAK9L,aAAc,EACZ,CACLrB,KAAMmN,EACNvE,GAAI8G,GAg0GO+jB,CAAQlH,EAAII,KAGjB1B,GAAckB,EACdA,EAAKpO,KAuBjBkN,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAK0G,OAIF1G,EAGT,SAAS+G,KACP,IAAI/G,EAAIG,EAAQC,EAyKhB,OAvKAJ,EAAKlB,IACLqB,EA2iOF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA9vTQ,SA+vTTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASjG,KAEpCsG,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EA7kOFuH,MACM3V,GACJsO,OACMtO,IACTwO,EAAKoH,QACM5V,IACTwO,EAAK,MAEHA,IAAOxO,GACJsO,OACMtO,GACJ6V,OACM7V,GACMoO,EAEfA,EADAG,EAr3GsB,cAg4G1BrB,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,IACLqB,EA0iOJ,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAjyTQ,UAkyTTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAShG,KAEpCqG,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EA5kOA0H,MACM9V,GACJsO,OACMtO,IACTwO,EAAKoH,QACM5V,IACTwO,EAAK,MAEHA,IAAOxO,GACJsO,OACMtO,GACJ6V,OACM7V,GACMoO,EAEfA,EADAG,EA15GoB,eAq6GxBrB,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,IACLqB,EAyiON,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAp0TQ,SAq0TTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS/F,KAEpCoG,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EA3kOE2H,MACM/V,GACJsO,OACMtO,IACTwO,EAAKoH,QACM5V,IACTwO,EAAK,MAEHA,IAAOxO,GACJsO,OACMtO,GACJ6V,OACM7V,GACMoO,EAEfA,EADAG,EA/7GkB,cA08GtBrB,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,IACLqB,EA6kOR,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA14TQ,UA24TTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS7F,KAEpCkG,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EA/mOI4H,MACMhW,GACJsO,OACMtO,IACTwO,EAAKqH,QACM7V,GACMoO,EAEfA,EADAG,EAAaA,EA79Ga,GAAGltB,cAAR,UAw+GzB6rB,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,IACLqB,EAihOV,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAv2TQ,UAw2TTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS9F,KAEpCmG,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAnjOM6H,MACMjW,IACTuO,EAAK,MAEHA,IAAOvO,GACJsO,OACMtO,IACTwO,EAAKqH,QACM7V,GACMoO,EAEfA,EADAG,EAt/GF,SAAS4C,GAAK,OAAOA,EAAOA,EAAE,GAAG9vB,cAAR,QAA+B,OAs/GjD60B,CAAQ3H,KAWjBrB,GAAckB,EACdA,EAAKpO,OAORoO,EAGT,SAASqH,KACP,IAAIrH,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EA4HhC,OA1HAR,EAAKlB,IACLqB,EAAK4F,QACMnU,GACTqO,EAAKnB,IACLsB,EAAKF,QACMtO,IACTyO,EAAK2F,QACMpU,IACT0O,EAAKJ,QACMtO,IACT2O,EAAKwF,QACMnU,EAETqO,EADAG,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexBzB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACTwO,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAK0F,QACMpU,IACT2O,EAAKL,QACMtO,IACT4O,EAAKuF,QACMnU,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAKxO,GAEHwO,IAAOxO,GACMoO,EAEfA,EADAG,EA1kHM,SAAS4H,EAASC,EAAIxkB,GAC1B,MAAMykB,EAAM,CAAEnrB,GAAI,KAAMD,MAAOkrB,GAK/B,OAJa,OAATvkB,IACFykB,EAAInrB,GAAK,GAAGirB,KAAWC,EAAG,KAC1BC,EAAIprB,MAAQ2G,EAAK,IAEZykB,EAokHJC,CAAQ/H,EAAIF,EAAIG,KAGrBtB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,IACLqB,EAAK4F,QACMnU,GACTqO,EAAKnB,IACLsB,EAAKF,QACMtO,IACTyO,EAAK2F,QACMpU,IACT0O,EAAKJ,QACMtO,IACT2O,EAAKwF,QACMnU,EAETqO,EADAG,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexBzB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,IACTqO,EAAK,MAEHA,IAAOrO,GACMoO,EAEfA,EADAG,EApnHM,SAAS6H,EAAIxkB,GACjB,MAAMykB,EAAM,CAAEnrB,GAAI,KAAMD,MAAOmrB,GAK/B,OAJa,OAATxkB,IACFykB,EAAInrB,GAAKkrB,EACTC,EAAIprB,MAAQ2G,EAAK,IAEZykB,EA8mHJE,CAAQhI,EAAIF,KAGjBnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,IAIFoO,EAGT,SAASiH,KACP,IAAIjH,EAAYI,EAyBhB,OAvBAJ,EAAKlB,GACAsJ,OACMxW,GACJsO,OACMtO,IACTwO,EAAKmD,QACM3R,GACMoO,EAEfA,EADaI,IAWjBtB,GAAckB,EACdA,EAAKpO,GAGAoO,EAmNT,SAASmE,KACP,IAAInE,EAAIG,EAAgBG,EAqCxB,OAnCAN,EAAKlB,IACLqB,EAAKgF,QACMvT,GACJsO,OACMtO,GACJgR,OACMhR,GACJsO,OACMtO,IACT0O,EAAK+H,QACMzW,GACMoO,EAEfA,EADAG,EA72HG,CACLpvB,KA42HeovB,EA32Hf/Y,wBA22HmBkZ,KAmBzBxB,GAAckB,EACdA,EAAKpO,GAGAoO,EAGT,SAASqI,KACP,IAAIrI,EAAIG,EAAQC,EAiDhB,OA/CAJ,EAAKlB,IACLqB,EAAKgF,QACMvT,IACMoO,EACfG,EAAaA,IAEfH,EAAKG,KACMvO,IACToO,EAAKlB,IACLqB,EAAKiF,QACMxT,GACJsO,OACMtO,IACTwO,EAqCR,WACE,IAAIJ,EAAIG,EAAQC,EAAQE,EAAQE,EAEhCR,EAAKlB,IACLqB,EAAK4F,QACMnU,IACTuO,EAAK,MAEHA,IAAOvO,GACJsO,OACMtO,IACTwO,EAAKkI,QACM1W,IACTwO,EAAK,MAEHA,IAAOxO,GACJsO,OACMtO,IACT0O,EAAKW,QACMrP,IACT0O,EAAK,MAEHA,IAAO1O,GACJsO,OACMtO,IACT4O,EAwCd,WACE,IAAIR,EAAIG,EAAYE,EAAIC,EAAIC,EAAIC,EAAYyB,EAAK0E,EAAKzE,EAAK2E,EAE3D7G,EAAKlB,GA5+HO,UA6+HRpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASzM,IAEpC8M,IAAOvO,GACJsO,OACMtO,GACJ2W,OACM3W,GAt/HH,cAu/HFF,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B+rB,EAAK3O,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfuB,EAAKzO,EACmB,IAApBuN,IAAyBW,GAASxM,IAEpC+M,IAAOzO,IACT0O,EAAKJ,QACMtO,GA9/HP,cA+/HEF,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/BisB,EAAK7O,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfyB,EAAK3O,EACmB,IAApBuN,IAAyBW,GAASvM,IAEpCgN,IAAO3O,IACT4O,EAAKN,QACMtO,GACJ4W,OACM5W,GACJsO,OACMtO,GA1gIf,YA2gIUF,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B2tB,EAAMvQ,EAAM6P,OAAOzC,GAAa,GAChCA,IAAe,IAEfmD,EAAMrQ,EACkB,IAApBuN,IAAyBW,GAAStM,IAEpCyO,IAAQrQ,IACV+U,EAAMzG,QACMtO,GAlhIpB,QAmhIcF,EAAM6P,OAAOzC,GAAa,IAC5BoD,EAphIZ,MAqhIYpD,IAAe,IAEfoD,EAAMtQ,EACkB,IAApBuN,IAAyBW,GAASrM,IAEpCyO,IAAQtQ,GACKoO,EAEfA,EADAG,EAzhIX,sDA4hIWrB,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,KAebkN,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,KAWXkN,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,GA1kIK,SA2kINpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASpM,IAEpCyM,IAAOvO,GACJsO,OACMtO,GACJ2W,OACM3W,IACTyO,EAAKH,QACMtO,IACT0O,EAAKuF,QACMjU,IACT2O,EAAKL,QACMtO,GArmIX,cAsmIMF,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/BksB,EAAK9O,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEf0B,EAAK5O,EACmB,IAApBuN,IAAyBW,GAASvM,IAEpCiN,IAAO5O,GACJsO,OACMtO,GACJ4W,OACM5W,IACTqQ,EAAM/B,QACMtO,IACV+U,EAAMd,QACMjU,IACVsQ,EAAMhC,QACMtO,GA5mIxB,cA6mIkBF,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/BuyB,EAAMnV,EAAM6P,OAAOzC,GAAa,GAChCA,IAAe,IAEf+H,EAAMjV,EACkB,IAApBuN,IAAyBW,GAASnM,IAEpCkT,IAAQjV,GACKoO,EAnnInByI,EAonIqB9B,EAAjBxG,EAnnIf,gBAmnI4BG,EAnnIV7uB,uBAAuBg3B,EAAEh3B,kBAonI5BuuB,EAAKG,IAELrB,GAAckB,EACdA,EAAKpO,KAuBjBkN,GAAckB,EACdA,EAAKpO,KAuBjBkN,GAAckB,EACdA,EAAKpO,IAxqIG,IAAY6W,EA4qIxB,OAAOzI,EA5PU0I,MACM9W,IACT4O,EAAK,MAEHA,IAAO5O,GACMoO,EAEfA,EADAG,EA98HD,CACLpvB,KA68HmBovB,EA58HnB9U,YA48HuB+U,EA38HvBlnB,QA28H2BonB,EA18H3B/U,oBA08H+BiV,KAGzB1B,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAnGI2I,MACM/W,IACTwO,EAAK,MAEHA,IAAOxO,GACJsO,OACMtO,GACJyT,OACMzT,GACMoO,EAEfA,EADAG,EA15HC,CACL/U,qBAy5HiBgV,EAx5HjBlrB,aAAa,KAm6Hb4pB,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,IAIFoO,EA2RT,SAASsI,KACP,IAAItI,EAAoBM,EAqCxB,OAnCAN,EAAKlB,GAiwLP,WACE,IAAIkB,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA33SQ,cA43STpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASpG,KAEpCyG,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EA94S6B,cAi5S7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAnyLF4I,KACMhX,GACJsO,OACMtO,GACJiS,OACMjS,GACJsO,OACMtO,IACT0O,EAAK2C,QACMrR,GACMoO,EAEfA,EADaM,IAmBrBxB,GAAckB,EACdA,EAAKpO,GAGAoO,EAGT,SAASiB,KACP,IAAIjB,EAAoBM,EAqCxB,OAnCAN,EAAKlB,GAosNP,WACE,IAAIkB,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA9yUQ,UA+yUTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASlF,KAEpCuF,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAruNF6I,KACMjX,GACJsO,OACMtO,GACJiS,OACMjS,GACJsO,OACMtO,IACT0O,EA6BV,WACE,IAAIN,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAK2I,QACMlX,EAAY,CA6BrB,IA5BAqO,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAK8D,QACMxS,IACT2O,EAAKL,QACMtO,IACT4O,EAAKsI,QACMlX,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAKxO,GAEAwO,IAAOxO,GACZqO,EAAGrrB,KAAKwrB,GACRA,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAK8D,QACMxS,IACT2O,EAAKL,QACMtO,IACT4O,EAAKsI,QACMlX,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAKxO,GAGLqO,IAAOrO,GACMoO,EACfG,EAAK9N,EAAQ8N,EAAIF,GACjBD,EAAKG,IAELrB,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,EAGP,OAAOoO,EA1GM+I,MACMnX,GACMoO,EAEfA,EADaM,IAmBrBxB,GAAckB,EACdA,EAAKpO,GAGAoO,EAmFT,SAAS8I,KACP,IAAI9I,EAAIG,EAAQC,EA+BhB,OA7BAJ,EAAKlB,IACLqB,EAAKoD,QACM3R,GACJsO,OACMtO,IACTwO,EA40NN,WACE,IAAIJ,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAniVQ,SAoiVTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS3E,KAEpCgF,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EAtjV6B,SAyjV7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EA/2NEgJ,MACMpX,IACTwO,EAoyNR,WACE,IAAIJ,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAhgVQ,QAigVTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS5E,KAEpCiF,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EAnhV6B,QAshV7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAv0NIiJ,IAEH7I,IAAOxO,IACTwO,EAAK,MAEHA,IAAOxO,GACMoO,EAEfA,EADAG,EA71IM,SAASsI,EAAG33B,GAClB,MAAMm3B,EAAM,CAAEp0B,KAAM40B,EAAG91B,KAAM,OAE7B,MADU,SAAN7B,IAAcm3B,EAAIt1B,KAAO,QACtBs1B,EA01IFiB,CAAQ/I,EAAIC,KAGjBtB,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAGT,SAASmJ,KACP,IAAInJ,EAOJ,OALAA,EAAK6F,QACMjU,IACToO,EAAKoJ,MAGApJ,EAGT,SAASkB,KACP,IAAIlB,EAAYI,EAAQE,EAAIC,EAAIC,EAAIwB,EA+DpC,OA7DAhC,EAAKlB,GAkrNP,WACE,IAAIkB,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA17UQ,UA27UTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS9E,KAEpCmF,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAntNFqJ,KACMzX,GACJsO,OACMtO,IACTwO,EAAK+I,QACMvX,GACJsO,OACMtO,GACT0O,EAAKxB,IACLyB,EAAK6D,QACMxS,IACT2O,EAAKoF,MAEHpF,IAAO3O,IACT4O,EAAKN,QACMtO,IACToQ,EAAKmH,QACMvX,EAET0O,EADAC,EAAK,CAACA,EAAIC,EAAIwB,IAWlBlD,GAAcwB,EACdA,EAAK1O,GAEH0O,IAAO1O,IACT0O,EAAK,MAEHA,IAAO1O,GACMoO,EAEfA,EA/5IE,SAASsJ,EAAI9lB,GACjB,MAAMpJ,EAAM,CAACkvB,GAEb,OADI9lB,GAAMpJ,EAAIxF,KAAK4O,EAAK,IACjB,CACLpC,UAAWoC,GAAQA,EAAK,IAAMA,EAAK,GAAGlP,eAAiB,GACvD7C,MAAO2I,GAy5IFmvB,CAAQnJ,EAAIE,KAGjBxB,GAAckB,EACdA,EAAKpO,KAebkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAGT,SAAS8D,KACP,IAAI9D,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKoD,QACM3R,EAAY,CA6BrB,IA5BAqO,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAK8D,QACMxS,IACT2O,EAAKL,QACMtO,IACT4O,EAAK+C,QACM3R,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAKxO,GAEAwO,IAAOxO,GACZqO,EAAGrrB,KAAKwrB,GACRA,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAK8D,QACMxS,IACT2O,EAAKL,QACMtO,IACT4O,EAAK+C,QACM3R,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAKxO,GAGLqO,IAAOrO,GACMoO,EAEfA,EADAG,EAl/IQ,SAAS7N,EAAM9O,GACnB,MAAMgmB,EAAK,CAAE72B,KAAM,aAEnB,OADA62B,EAAG/3B,MAAQ8gB,GAAWD,EAAM9O,GACrBgmB,EA++INC,CAAQtJ,EAAIF,KAGjBnB,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,EAGP,OAAOoO,EAGT,SAASuD,KACP,IAAIvD,EAmBJ,OAjBAA,EAqSF,WACE,IAAIA,EAAIG,EAAgBG,EAExBN,EAAKlB,IACLqB,EAAKuJ,QACM9X,IACTuO,EAAK0C,MAEH1C,IAAOvO,GACJsO,OACMtO,GACJwT,OACMxT,GACJsO,OACMtO,IACT0O,EAAK2C,QACMrR,GACJsO,OACMtO,GACJyT,OACMzT,GACMoO,EAEfA,EADAG,EA9xJD,CACL5pB,WAFahE,EA+xJM4tB,EA5xJnBhoB,UA4xJuBmoB,EA3xJvB3tB,KAAM,SACNG,QAASP,GAAK,SACd2C,aAAa,KAozJnB4pB,GAAckB,EACdA,EAAKpO,GA3zJK,IAASrf,EA8zJrB,OAAOytB,EA1VF2J,MACM/X,IACToO,EA2VJ,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKyJ,QACMhY,EAAY,CA6BrB,GA5BAqO,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAKuJ,QACMjY,IACT2O,EAAKL,QACMtO,IACT4O,EAAKoJ,QACMhY,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAKxO,GAEHwO,IAAOxO,EACT,KAAOwO,IAAOxO,GACZqO,EAAGrrB,KAAKwrB,GACRA,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAKuJ,QACMjY,IACT2O,EAAKL,QACMtO,IACT4O,EAAKoJ,QACMhY,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAKxO,QAITqO,EAAKrO,EAEHqO,IAAOrO,GACMoO,EACfG,EA73JStM,GA63JIsM,EAAIF,GACjBD,EAAKG,IAELrB,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,EAGP,OAAOoO,EA5aA8J,MACMlY,IACToO,EAqkBN,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAK4J,QACMnY,EAAY,CA6BrB,IA5BAqO,EAAK,GACLG,EAAKtB,IACLuB,EAAKsC,QACM/Q,IACT0O,EAAK0J,QACMpY,IACT2O,EAAKL,QACMtO,IACT4O,EAAKuJ,QACMnY,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAKxO,GAEAwO,IAAOxO,GACZqO,EAAGrrB,KAAKwrB,GACRA,EAAKtB,IACLuB,EAAKsC,QACM/Q,IACT0O,EAAK0J,QACMpY,IACT2O,EAAKL,QACMtO,IACT4O,EAAKuJ,QACMnY,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAKxO,GAGLqO,IAAOrO,GACMoO,EACfG,EAAKvM,EAAQuM,EAAIF,GACjBD,EAAKG,IAELrB,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,EAGP,OAAOoO,EAlpBEiK,MACMrY,IACToO,EA2aR,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAIxB,GAFAN,EAAKlB,IACLqB,EAAK+J,QACMtY,EAAY,CAiBrB,GAhBAqO,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAKsJ,QACMhY,EAETwO,EADAC,EAAK,CAACA,EAAIC,IAOZxB,GAAcsB,EACdA,EAAKxO,GAEHwO,IAAOxO,EACT,KAAOwO,IAAOxO,GACZqO,EAAGrrB,KAAKwrB,GACRA,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAKsJ,QACMhY,EAETwO,EADAC,EAAK,CAACA,EAAIC,IAOZxB,GAAcsB,EACdA,EAAKxO,QAITqO,EAAKrO,EAEHqO,IAAOrO,GACMoO,EACfG,EAt7JSgK,GAs7JIhK,EAAIF,EAt7JiB,GAAG,IAu7JrCD,EAAKG,IAELrB,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,EAGP,OAAOoO,EApeIoK,MACMxY,IACToO,EAAKqB,QACMzP,IACToO,EAmIZ,WACE,IAAIA,EAAIG,EAAQC,EAAIC,EAAIC,EAAQE,EAEhCR,EAAKlB,IACLqB,EAAKuF,QACM9T,GACJsO,OACMtO,IACTwO,EAAK6C,QACMrR,IACTyO,EAAKH,QACMtO,IACT0O,EAAKwF,QACMlU,GACMoO,EAEfA,EADAG,EAzpJG,CACL7nB,WAwpJe8nB,EAvpJfztB,KAAM,QACNG,QAAS,GACToC,aAAa,KAwqJnB4pB,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,IACLqB,EAAKkK,QACMzY,IACTuO,EAAKmK,MAEHnK,IAAOvO,IACTuO,EAAK,MAEHA,IAAOvO,GACJ8T,OACM9T,IACTwO,EAAKF,QACMtO,IACTyO,EAgzHV,WACE,IAAIL,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKoK,QACM3Y,EAAY,CA6BrB,IA5BAqO,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAK8D,QACMxS,IACT2O,EAAKL,QACMtO,IACT4O,EAAK+J,QACM3Y,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAKxO,GAEAwO,IAAOxO,GACZqO,EAAGrrB,KAAKwrB,GACRA,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAK8D,QACMxS,IACT2O,EAAKL,QACMtO,IACT4O,EAAK+J,QACM3Y,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAKxO,GAGLqO,IAAOrO,GACMoO,EACfG,EAAK9N,EAAQ8N,EAAIF,GACjBD,EAAKG,IAELrB,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,EAGP,OAAOoO,EA73HMwK,MACM5Y,IACT0O,EAAKJ,QACMtO,GACJkU,OACMlU,GACMoO,EACfG,EA7rJF,SAAS5tB,EAAG1B,GAClB,MAAO,CACL0F,WAAYhE,EACZ+F,WAAYzH,EAAE0C,IAAI9C,IAAK,CAAGoD,KAAMpD,EAAGgM,GAAI,QACvC9J,KAAM,QACNG,QAASP,GAAK,QACd2C,aAAa,GAurJFu1B,CAAQtK,EAAIE,GACjBL,EAAKG,IAsBfrB,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,IACLqB,EAAKkK,QACMzY,IACTuO,EAAKmK,MAEHnK,IAAOvO,IACTuO,EAAK,MAEHA,IAAOvO,GACJsO,OACMtO,IACTwO,EAAKsF,QACM9T,IACTwO,EAAKgF,MAEHhF,IAAOxO,IACTyO,EAAKH,QACMtO,IACT0O,EAhOd,WACE,IAAIN,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKuK,QACM9Y,EAAY,CA6BrB,IA5BAqO,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAK8D,QACMxS,IACT2O,EAAKL,QACMtO,IACT4O,EAAKkK,QACM9Y,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAKxO,GAEAwO,IAAOxO,GACZqO,EAAGrrB,KAAKwrB,GACRA,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAK8D,QACMxS,IACT2O,EAAKL,QACMtO,IACT4O,EAAKkK,QACM9Y,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAKxO,GAGLqO,IAAOrO,GACMoO,EACfG,EAAK9N,EAAQ8N,EAAIF,GACjBD,EAAKG,IAELrB,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,EAGP,OAAOoO,EAmJU2K,MACM/Y,IACT0O,EAAKiD,MAEHjD,IAAO1O,GACJsO,OACMtO,IACT4O,EAAKsF,QACMlU,IACT4O,EAAK6E,MAEH7E,IAAO5O,GACMoO,EACfG,EA9uJN,SAAS5tB,EAAG1B,GAClB,MAAO,CACL0F,WAAYhE,EACZ4F,UAAWtH,EACX8B,KAAM,QACNG,QAASP,GAAK,QACd2C,aAAa,GAwuJE01B,CAAQzK,EAAIG,GACjBN,EAAKG,IAELrB,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,KAKX,OAAOoO,EAxRQ6K,IAOR7K,EAmFT,SAAS0K,KACP,IAAI1K,EAAYI,EAqChB,OAnCAJ,EAAKlB,GACAsG,OACMxT,GACJsO,OACMtO,IACTwO,EAAK6C,QACMrR,GACJsO,OACMtO,GACJyT,OACMzT,GACMoO,EAEfA,EADaI,IAmBrBtB,GAAckB,EACdA,EAAKpO,GAGAoO,EAmWT,SAAS0D,KACP,IAAI1D,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKoD,QACM3R,EAAY,CAmCrB,IAlCAqO,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAKkI,QACM5W,IACT0O,EAAK0J,QACMpY,IACT0O,EAAK8D,MAGL9D,IAAO1O,IACT2O,EAAKL,QACMtO,IACT4O,EAAK+C,QACM3R,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAWtB1B,GAAcsB,EACdA,EAAKxO,KAGPkN,GAAcsB,EACdA,EAAKxO,GAEAwO,IAAOxO,GACZqO,EAAGrrB,KAAKwrB,GACRA,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAKkI,QACM5W,IACT0O,EAAK0J,QACMpY,IACT0O,EAAK8D,MAGL9D,IAAO1O,IACT2O,EAAKL,QACMtO,IACT4O,EAAK+C,QACM3R,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAWtB1B,GAAcsB,EACdA,EAAKxO,KAGPkN,GAAcsB,EACdA,EAAKxO,GAGLqO,IAAOrO,GACMoO,EAEfA,EADAG,EAhhKQ,SAAS7N,EAAM9O,GACrB,IAAI9O,EAAS4d,EACTlR,EAAY,GAChB,IAAK,IAAIhR,EAAI,EAAGA,EAAIoT,EAAK5K,OAAQxI,IACZ,MAAfoT,EAAKpT,GAAG,IACVgR,EAAY,IACP/N,MAAMC,QAAQoB,KAASA,EAAS,CAACA,IACtCA,EAAOE,KAAK4O,EAAKpT,GAAG,KAEpBsE,EAASjB,GAAiB+P,EAAKpT,GAAG,GAAIsE,EAAQ8O,EAAKpT,GAAG,IAG1D,GAAkB,MAAdgR,EAAmB,CACrB,MAAMooB,EAAK,CAAE72B,KAAM,aAEnB,OADA62B,EAAG/3B,MAAQiD,EACJ80B,EAET,OAAO90B,EA+/JJo2B,CAAQ3K,EAAIF,KAGjBnB,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,EAGP,OAAOoO,EAmFT,SAAS+J,KACP,IAAI/J,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAK4K,QACMnZ,EAAY,CA6BrB,IA5BAqO,EAAK,GACLG,EAAKtB,IACLuB,EAAKsC,QACM/Q,IACT0O,EAAKkI,QACM5W,IACT2O,EAAKL,QACMtO,IACT4O,EAAKuK,QACMnZ,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAKxO,GAEAwO,IAAOxO,GACZqO,EAAGrrB,KAAKwrB,GACRA,EAAKtB,IACLuB,EAAKsC,QACM/Q,IACT0O,EAAKkI,QACM5W,IACT2O,EAAKL,QACMtO,IACT4O,EAAKuK,QACMnZ,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAKxO,GAGLqO,IAAOrO,GACMoO,EAEfA,EADAG,EAAKvM,EAAQuM,EAAIF,KAGjBnB,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,EAGP,OAAOoO,EAGT,SAAS+K,KACP,IAAI/K,EAAIG,EAAIF,EAAIG,EAAIC,EAqEpB,OAnEAL,EAAKgL,QACMpZ,IACToO,EA0GJ,WACE,IAAIA,EAAIG,EAAgBG,EAExBN,EAAKlB,IACLqB,EAiDF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAAIC,EAEpBL,EAAKlB,GACLqB,EAAKrB,IACLmB,EAAKgL,QACMrZ,IACTwO,EAAKF,QACMtO,IACTyO,EAAK6K,QACMtZ,EAETuO,EADAF,EAAK,CAACA,EAAIG,EAAIC,IAWlBvB,GAAcqB,EACdA,EAAKvO,GAEHuO,IAAOvO,IACMoO,EACfG,EAAKnM,EAASmM,KAEhBH,EAAKG,KACMvO,IACToO,EAAKkL,MAGP,OAAOlL,EAnFFmL,MACMvZ,GACJsO,OACMtO,GACJwT,OACMxT,GACJsO,OACMtO,IACT0O,EAAKU,QACMpP,GACJsO,OACMtO,GACJyT,OACMzT,GACMoO,EA7xKP5S,EA8xKM+S,GA9xKFnf,EA8xKMsf,GA7xKrBprB,aAAc,EA6xKXirB,EA5xKDgK,GAAgB/c,EAAIpM,GA6xKnBgf,EAAKG,IA0BjBrB,GAAckB,EACdA,EAAKpO,GA1zKM,IAASxE,EAAIpM,EA6zK1B,OAAOgf,EA5JAoL,MACMxZ,IACToO,EAAKlB,IACLqB,EAAK8K,QACMrZ,IACTuO,EAAKrB,GACiC,KAAlCpN,EAAMT,WAAW6N,KACnBmB,EAprKI,IAqrKJnB,OAEAmB,EAAKrO,EACmB,IAApBuN,IAAyBW,GAAShM,IAEpCmM,IAAOrO,GACTwO,EAAKtB,GACLK,KACsC,KAAlCzN,EAAMT,WAAW6N,KACnBuB,EA5rKE,IA6rKFvB,OAEAuB,EAAKzO,EACmB,IAApBuN,IAAyBW,GAAS/L,IAExCoL,KACIkB,IAAOzO,EACTwO,OAAK,GAELtB,GAAcsB,EACdA,EAAKxO,GAEHwO,IAAOxO,EAETuO,EADAF,EAAK,CAACA,EAAIG,IAGVtB,GAAcqB,EACdA,EAAKvO,KAGPkN,GAAcqB,EACdA,EAAKvO,IAGLuO,IAAOvO,IACTqO,EAAKC,QACMtO,IACTwO,EAAK2K,QACMnZ,GACMoO,EAEfA,EADAG,EAxtKKgK,GAAgB,MAwtKP/J,KAWlBtB,GAAckB,EACdA,EAAKpO,IAKJoO,EAGT,SAASgL,KACP,IAAIhL,EAAIG,EAAQC,EA3uKMzsB,EAAM03B,EA6wK5B,OAhCArL,EAAKlB,IACLqB,EAAKmL,QACM1Z,GACJsO,OACMtO,IACTwO,EAwHN,WACE,IAAIJ,GAEJA,EAiBF,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAE5BP,EAAKlB,GACLqB,EAAK,GACLF,EAAKnB,IACLsB,EAAKF,QACMtO,IACTyO,EAAKkL,QACM3Z,IACT0O,EAAKJ,QACMtO,IACT2O,EAAK+K,QACM1Z,EAETqO,EADAG,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexBzB,GAAcmB,EACdA,EAAKrO,GAEP,GAAIqO,IAAOrO,EACT,KAAOqO,IAAOrO,GACZuO,EAAGvrB,KAAKqrB,GACRA,EAAKnB,IACLsB,EAAKF,QACMtO,IACTyO,EAAKkL,QACM3Z,IACT0O,EAAKJ,QACMtO,IACT2O,EAAK+K,QACM1Z,EAETqO,EADAG,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexBzB,GAAcmB,EACdA,EAAKrO,QAITuO,EAAKvO,EAEHuO,IAAOvO,IACMoO,EACfG,EAv7Ka,CAAExtB,KAAM,aAAc6Q,KAu7KrB2c,IAIhB,OAFAH,EAAKG,EAvFAqL,MACM5Z,IACToO,EA2aJ,WACE,IAAIA,EAAIG,EAAQC,EAAQE,EAExBN,EAAKlB,IACLqB,EAAKsL,QACM7Z,GACJsO,OACMtO,IACTwO,EAAKgF,QACMxT,GACJsO,OACMtO,IACT0O,EAAKwD,QACMlS,GACJsO,OACMtO,GACJyT,OACMzT,GACMoO,EAEfA,EADAG,EAjwLC,CAAE/S,GAiwLW+S,EAjwLHvsB,MAiwLO0sB,KA2B9BxB,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,IACLqB,EAAKsL,QACM7Z,GACJsO,OACMtO,IACTwO,EAAK8E,QACMtT,GACMoO,EACfG,EAtyLK,SAAS/S,EAAIqb,GAClB,MAAO,CAAErb,GAAIA,EAAIxZ,MAAO60B,GAqyLnBiD,CAASvL,EAAIC,GAClBJ,EAAKG,IAUTrB,GAAckB,EACdA,EAAKpO,IAIT,OAAOoO,EArfA2L,MACM/Z,IACToO,EAqON,WACE,IAAIA,EAAIG,EAAQC,EAAgBI,EAEhCR,EAAKlB,IACLqB,EAiDF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAAIC,EAEpBL,EAAKlB,GACLqB,EAAKrB,IACLmB,EAAKgL,QACMrZ,IACTwO,EAAKF,QACMtO,IACTyO,EAAKkI,QACM3W,EAETuO,EADAF,EAAK,CAACA,EAAIG,EAAIC,IAWlBvB,GAAcqB,EACdA,EAAKvO,GAEHuO,IAAOvO,IACMoO,EACfG,EAAKnM,EAASmM,KAEhBH,EAAKG,KACMvO,IACToO,EAAKuI,MAGP,OAAOvI,EAnFF4L,MACMha,GACJsO,OACMtO,IACTwO,EAAKkL,QACM1Z,GACJsO,OACMtO,GACJ4W,OACM5W,GACJsO,OACMtO,IACT4O,EAAK8K,QACM1Z,GACMoO,EAEfA,EADAG,EAzkLC,CACL/S,GAwkLkB+S,EAvkLlBvsB,MAAO,CACLjB,KAAM,YACNlB,MAAO,CAqkLa2uB,EAAII,OA2BlC1B,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAvRE6L,MACMja,IACToO,EA0JR,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAAIC,EAEpBL,EAAKlB,IACLqB,EAAK2L,QACMla,IACTqO,EAAKC,QACMtO,IACTwO,EAAKkL,QACM1Z,GACMoO,EAEfA,EADAG,EA9/KS,CAAE/S,GAAI,KAAMxZ,MA8/KPwsB,KAWlBtB,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,GACLqB,EAAKrB,IACLmB,EAAK6L,QACMla,IACTwO,EAAKF,QACMtO,IACTyO,EAAK4K,QACMrZ,EAETuO,EADAF,EAAK,CAACA,EAAIG,EAAIC,IAWlBvB,GAAcqB,EACdA,EAAKvO,GAEHuO,IAAOvO,IACTqO,EAAKC,QACMtO,IACTwO,EAAKkL,QACM1Z,GACMoO,EACfG,EAviLK,SAASvsB,GACd,MAAO,CAAEwZ,GAAI,SAAUxZ,MAAOA,GAsiLzBm4B,CAAS3L,GACdJ,EAAKG,IAUTrB,GAAckB,EACdA,EAAKpO,IAIT,OAAOoO,EAhOIgM,MACMpa,IACToO,EAqYV,WACE,IAAIA,EAAIG,EAAQC,EAEhBJ,EAAKlB,IACLqB,EA9EF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAAIC,EAEpBL,EAAKlB,GACLqB,EAAKrB,IACLmB,EAAKgL,QACMrZ,IACTwO,EAAKF,QACMtO,IACTyO,EAAK4L,QACMra,EAETuO,EADAF,EAAK,CAACA,EAAIG,EAAIC,IAWlBvB,GAAcqB,EACdA,EAAKvO,GAEHuO,IAAOvO,IACMoO,EACfG,EAAKnM,EAASmM,KAEhBH,EAAKG,KACMvO,IACToO,EAAKiM,MAGP,OAAOjM,EA4CFkM,MACMta,GACJsO,OACMtO,IACTwO,EAAKmK,QACM3Y,IACTwO,EAAK4K,MAEH5K,IAAOxO,GACMoO,EAEfA,EADAG,EA/tLS,CAAE/S,GA+tLG+S,EA/tLKvsB,MA+tLDwsB,KAGlBtB,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAlaMmM,IAMb,OAAOnM,EAzIEoM,MACMxa,IACTwO,EAAK,MAEHA,IAAOxO,GACMoO,EAvvKCrsB,EAwvKFwsB,EACdH,EADAG,EAvvKa,QADSkL,EAwvKJjL,GAvvKQzsB,EACH,eAAZ03B,EAAG14B,KAA8BkhB,GAAsBlgB,EAAM03B,EAAG7nB,MAC7D/P,GAAiB43B,EAAGje,GAAIzZ,EAAM03B,EAAGz3B,SAwvK/CkrB,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKkF,QACMtT,IACToO,EAAKqM,MAIFrM,EA4LT,SAASuL,KACP,IAAIvL,EAgEJ,MA7/Ka,OA+7KTtO,EAAM6P,OAAOzC,GAAa,IAC5BkB,EAh8KW,KAi8KXlB,IAAe,IAEfkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAAS5L,IAEpC8L,IAAOpO,IAC6B,KAAlCF,EAAMT,WAAW6N,KACnBkB,EAt8KS,IAu8KTlB,OAEAkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAAS3L,IAEpC6L,IAAOpO,IA18KA,OA28KLF,EAAM6P,OAAOzC,GAAa,IAC5BkB,EA58KO,KA68KPlB,IAAe,IAEfkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAAS1L,IAEpC4L,IAAOpO,IAh9KF,OAi9KHF,EAAM6P,OAAOzC,GAAa,IAC5BkB,EAl9KK,KAm9KLlB,IAAe,IAEfkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAASzL,IAEpC2L,IAAOpO,IAC6B,KAAlCF,EAAMT,WAAW6N,KACnBkB,EAx9KG,IAy9KHlB,OAEAkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAASxL,IAEpC0L,IAAOpO,IAC6B,KAAlCF,EAAMT,WAAW6N,KACnBkB,EA1/KA,IA2/KAlB,OAEAkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAAS/L,IAEpCiM,IAAOpO,IAp+KR,OAq+KGF,EAAM6P,OAAOzC,GAAa,IAC5BkB,EAt+KD,KAu+KClB,IAAe,IAEfkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAASvL,UAS7CyL,EA2MT,SAASyL,KACP,IAAIzL,EAAIG,EAAIF,EAAIG,EAAIC,EAiCpB,OA/BAL,EAAKlB,GACLqB,EAAKrB,IACLmB,EAAKgL,QACMrZ,IACTwO,EAAKF,QACMtO,IACTyO,EAAKiM,QACM1a,EAETuO,EADAF,EAAK,CAACA,EAAIG,EAAIC,IAWlBvB,GAAcqB,EACdA,EAAKvO,GAEHuO,IAAOvO,IACMoO,EACfG,EAAKnM,EAASmM,KAEhBH,EAAKG,KACMvO,IACToO,EAAKsM,MAGAtM,EAgHT,SAASsL,KACP,IAAItL,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKoM,QACM3a,EAAY,CA6BrB,IA5BAqO,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAK4J,QACMtY,IACT2O,EAAKL,QACMtO,IACT4O,EAAK+L,QACM3a,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAKxO,GAEAwO,IAAOxO,GACZqO,EAAGrrB,KAAKwrB,GACRA,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAK4J,QACMtY,IACT2O,EAAKL,QACMtO,IACT4O,EAAK+L,QACM3a,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAKxO,GAGLqO,IAAOrO,GACMoO,EAEfA,EADAG,EAAKvM,EAAQuM,EAAIF,KAGjBnB,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,EAGP,OAAOoO,EAGT,SAASkK,KACP,IAAIlK,EAmBJ,OAjBsC,KAAlCtO,EAAMT,WAAW6N,KACnBkB,EA14LW,IA24LXlB,OAEAkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAAStL,IAEpCwL,IAAOpO,IAC6B,KAAlCF,EAAMT,WAAW6N,KACnBkB,EAh5LS,IAi5LTlB,OAEAkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAASrL,KAInCuL,EAGT,SAASuM,KACP,IAAIvM,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKyJ,QACMhY,EAAY,CA6BrB,IA5BAqO,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAKkM,QACM5a,IACT2O,EAAKL,QACMtO,IACT4O,EAAKoJ,QACMhY,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAKxO,GAEAwO,IAAOxO,GACZqO,EAAGrrB,KAAKwrB,GACRA,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAKkM,QACM5a,IACT2O,EAAKL,QACMtO,IACT4O,EAAKoJ,QACMhY,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAKxO,GAGLqO,IAAOrO,GACMoO,EAEfA,EADAG,EA19LWtM,GA09LGsM,EAAIF,KAGlBnB,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,EAGP,OAAOoO,EAGT,SAASwM,KACP,IAAIxM,EA4BJ,OA1BsC,KAAlCtO,EAAMT,WAAW6N,KACnBkB,EA1+LW,IA2+LXlB,OAEAkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAASpL,IAEpCsL,IAAOpO,IAC6B,KAAlCF,EAAMT,WAAW6N,KACnBkB,EAh/LS,IAi/LTlB,OAEAkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAASnL,IAEpCqL,IAAOpO,IAC6B,KAAlCF,EAAMT,WAAW6N,KACnBkB,EAt/LO,IAu/LPlB,OAEAkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAASlL,MAKrCoL,EAGT,SAAS4J,KACP,IAAI5J,EAAYI,EAjgMMqM,EA8jMtB,OA3DAzM,EAo7DF,WACE,IAAIA,EAAIG,EAAgBG,EAAgBQ,EAAS6F,EAAUE,EAAoB6F,EAE/E1M,EAAKlB,IACLqB,EAAKwM,QACM/a,GACJsO,OACMtO,GACJwT,OACMxT,GACJsO,OACMtO,IACT0O,EAAKiD,QACM3R,GACJsO,OACMtO,GACJgR,OACMhR,GACJsO,OACMtO,IACTkP,EAAK8L,QACMhb,GACHsO,OACMtO,IACV+U,EAAMtB,QACMzT,GACKoO,EAEfA,EADAG,EA/uPT,CACLxtB,KAAM,OACNkB,KA6uP4BysB,EA5uP5B3rB,OAAQ,KACR0O,OA2uPgCyd,KA2CtChC,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,IACLqB,EAAKwM,QACM/a,GACJsO,OACMtO,GACJwT,OACMxT,GACJsO,OACMtO,IACT0O,EAAKiD,QACM3R,GACJsO,OACMtO,GACJgR,OACMhR,GACJsO,OACMtO,IACTkP,EAAK+L,QACMjb,GACHsO,OACMtO,IACV+U,EAAMvB,QACMxT,GACJsO,OACMtO,IACViV,EAAMiG,QACMlb,GACJsO,OACMtO,GACJyT,OACMzT,GACJsO,OACMtO,IACV8a,EAAMrH,QACMzT,GACKoO,EACfG,EA3zPvB,SAASsI,EAAGsE,GACnB,MAAO,CACLp6B,KAAM,OACNkB,KAAM40B,EACN9zB,OAAQ,KACR0O,OAAQ,CACN/M,SAAU,WAAay2B,EAAY,MAqzPJC,CAAS1M,EAAIuG,GAClB7G,EAAKG,IAkErCrB,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,IACLqB,EAAKwM,QACM/a,GACJsO,OACMtO,GACJwT,OACMxT,GACJsO,OACMtO,IACT0O,EAAKiD,QACM3R,GACJsO,OACMtO,GACJgR,OACMhR,GACJsO,OACMtO,IACTkP,EAAK+L,QACMjb,GACHsO,OACMtO,IACV+U,EAAMvB,QACMxT,GACJsO,OACMtO,IACViV,EAAMiG,QACMlb,GACJsO,OACMtO,GACJwS,OACMxS,GACJsO,OACMtO,IACV8a,EAAMI,QACMlb,GACJsO,OACMtO,GACJyT,OACMzT,GACJsO,OACMtO,GACJyT,OACMzT,GACKoO,EACfG,EAp6PjC,SAASsI,EAAGsE,EAAWtuB,GAC5B,MAAO,CACL9L,KAAM,OACNkB,KAAM40B,EACN9zB,OAAQ,KACR0O,OAAQ,CACN/M,SAAU,WAAay2B,EAAY,KAAOtuB,EAAQ,MA85PXwuB,CAAS3M,EAAIuG,EAAK6F,GACvB1M,EAAKG,IAkF7CrB,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,IACLqB,EAAKwM,QACM/a,GACJsO,OACMtO,GACJwT,OACMxT,GACJsO,OACMtO,IACT0O,EAAKiD,QACM3R,GACJsO,OACMtO,GACJgR,OACMhR,GACJsO,OACMtO,IACTkP,EA2ExB,WACE,IAAId,GAEJA,EAs3HF,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAnoXQ,WAooXTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS9C,KAEpCmD,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EAtpX6B,WAypX7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAz5HFkN,MACMtb,IACToO,EA05HJ,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAtqXQ,aAuqXTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS7C,KAEpCkD,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EAzrX6B,aA4rX7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EA77HAmN,IAGP,OAAOnN,EAnFoBoN,MACMxb,GACHsO,OACMtO,IACV+U,EAwlI5B,WACE,IAAI3G,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA/wXQ,YAgxXTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS3C,KAEpCgD,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EAlyX6B,YAqyX7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EA3nIyBqN,MACMzb,IACV+U,EAAM,MAEJA,IAAQ/U,GACJsO,OACMtO,IACViV,EAAMxB,QACMzT,GACKoO,EACfG,EAhhQnB,SAASsI,EAAGl2B,EAAGb,GACtB,MAAO,CACLiB,KAAM,OACNkB,KAAM40B,EACN9zB,OAAQ,KACR0O,OAAQ,CACN/M,SAAU/D,GAAKb,EAAI,IAAMA,EAAG,MA0gQD47B,CAAShN,EAAIQ,EAAI6F,GACtB3G,EAAKG,IAUTrB,GAAckB,EACdA,EAAKpO,KAuCzBkN,GAAckB,EACdA,EAAKpO,MAMb,OAAOoO,EAr0EFuN,MACM3b,IACToO,EAAKuK,QACM3Y,IACToO,EAu6BN,WACE,IAAIA,GAEJA,EA6SF,WACE,IAAIA,EAAIG,EAAgBG,EAAgBQ,EAExCd,EAAKlB,IACLqB,EA0sIF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAp6VQ,UAq6VTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAShE,KAEpCqE,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EAv7V6B,UA07V7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EA7uIFwN,MACM5b,GACJsO,OACMtO,GACJwT,OACMxT,GACJsO,OACMtO,IACT0O,EAwDV,WACE,IAAIN,EAAIG,EAAQC,EAAQE,EAAgBQ,EAExCd,EAAKlB,IACLqB,EAuGF,WACE,IAAIH,EAAIG,EAERH,EAAKlB,GACiC,KAAlCpN,EAAMT,WAAW6N,KACnBqB,EAx5OW,IAy5OXrB,OAEAqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASpL,IAEpCyL,IAAOvO,IACMoO,EACfG,EA/wO+B,CAAExtB,KAAM,OAAQlB,MAAO,MAmxOxD,OAFAuuB,EAAKG,EAtHAsN,MACM7b,IACMoO,EACfG,EAjqOgC,CAAEtsB,KAiqOpBssB,KAEhBH,EAAKG,KACMvO,IACToO,EAAKlB,IACLqB,EAAKwB,QACM/P,IACTuO,EAAK,MAEHA,IAAOvO,GACJsO,OACMtO,IACTwO,EAAKiM,QACMza,GACMoO,EAEfA,EADAG,EA/qO6B,CAAE5mB,SA+qOjB4mB,EA/qO8BtsB,KA+qO1BusB,KAWtBtB,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,IACLqB,EAAKwB,QACM/P,IACTuO,EAAK,MAEHA,IAAOvO,GACJsO,OACMtO,IACTwO,EAAKgF,QACMxT,GACJsO,OACMtO,IACT0O,EAAKiD,QACM3R,GACJsO,OACMtO,GACJyT,OACMzT,GACJsO,OACMtO,IACTkP,EAAKG,QACMrP,IACTkP,EAAK,MAEHA,IAAOlP,GACMoO,EACfG,EAvtOT,SAASrvB,EAAGD,EAAG68B,GAA6B,OAAtB78B,EAAEqE,aAAc,EAAa,CAAEqE,SAAUzI,EAAG+C,KAAMhD,EAAGqI,QAASw0B,GAutOtEC,CAASxN,EAAIG,EAAIQ,GACtBd,EAAKG,IAELrB,GAAckB,EACdA,EAAKpO,KA+BrBkN,GAAckB,EACdA,EAAKpO,KAKX,OAAOoO,EAhKM4N,MACMhc,GACJsO,OACMtO,GACJyT,OACMzT,GACJsO,OACMtO,IACTkP,EAAK+M,QACMjc,IACTkP,EAAK,MAEHA,IAAOlP,GACMoO,EAEfA,EADAG,EAvnOH,CACLxtB,KAAM,YACN5B,KAqnOsBovB,EApnOtBhpB,KAonO0BmpB,EAnnO1BrnB,KAmnO8B6nB,KAGtBhC,GAAckB,EACdA,EAAKpO,KA+BrBkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EA9WF8N,MACMlc,IACToO,EAMJ,WACE,IAAIA,EAAIG,EAAgBG,EAExBN,EAAKlB,IACLqB,EAiDF,WACE,IAAIH,GAEJA,EA6iJF,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA7gWQ,QA8gWTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS7D,KAEpCkE,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EAhiW6B,QAmiW7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAhlJF+N,MACMnc,IACToO,EA+9IJ,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAv8VQ,QAw8VTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS/D,KAEpCoE,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EA19V6B,QA69V7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAlgJAgO,MACMpc,IACToO,EAmgJN,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA1+VQ,QA2+VTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS9D,KAEpCmE,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EA7/V6B,QAggW7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAtiJEiO,MACMrc,IACToO,EA6kJR,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAhjWQ,QAijWTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS5D,KAEpCiE,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EAnkW6B,QAskW7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAhnJIkO,IAKX,OAAOlO,EA/DFmO,MACMvc,GACJsO,OACMtO,GACJwT,OACMxT,GACJsO,OACMtO,IACT0O,EAAKgL,QACM1Z,GACJsO,OACMtO,GACJyT,OACMzT,GACMoO,EAEfA,EADAG,EAh3NC,CACLxtB,KAAM,YACN5B,KA82NkBovB,EA72NlBhpB,KAAM,CACJtD,KA42NoBysB,MA2B9BxB,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAxDAoO,IAGP,OAAOpO,EA/6BEqO,MACMzc,IACToO,EAw5CR,WACE,IAAIA,EAAIG,EAAQC,EAAQE,EAAgBQ,GAExCd,EA8aF,WACE,IAAIA,EAAIG,EAAgBG,EAAgBQ,EAAS6F,EAEjD3G,EAAKlB,IACLqB,EAoxHF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAnlWQ,YAolWTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS3D,KAEpCgE,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EAtmW6B,YAymW7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAvzHFsO,MACM1c,GACJsO,OACMtO,GACJwT,OACMxT,GACJsO,OACMtO,IACT0O,EApNV,WACE,IAAIN,EAAIG,EAh+OK,YAk+OTzO,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B0rB,EAAKtO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAAS1J,KAEpC4J,IAAOpO,IAv+OE,QAw+OPF,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B0rB,EAAKtO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAASzJ,KAEpC2J,IAAOpO,IA7+OA,WA8+OLF,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B0rB,EAAKtO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAASxJ,KAEpC0J,IAAOpO,IAn/OF,QAo/OHF,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B0rB,EAAKtO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAASvJ,KAEpCyJ,IAAOpO,IAz/OJ,QA0/ODF,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B0rB,EAAKtO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAAStJ,KAEpCwJ,IAAOpO,IA//ON,UAggPCF,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B0rB,EAAKtO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAASrJ,KAEpCuJ,IAAOpO,IArgPR,SAsgPGF,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B0rB,EAAKtO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAASpJ,KAEpCsJ,IAAOpO,IA3gPV,WA4gPKF,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B0rB,EAAKtO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAASnJ,KAEpCqJ,IAAOpO,IAjhPZ,YAkhPOF,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B0rB,EAAKtO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAASlJ,KAEpCoJ,IAAOpO,IAvhPd,iBAwhPSF,EAAM6P,OAAOzC,GAAa,IAAIxqB,eAChC0rB,EAAKtO,EAAM6P,OAAOzC,GAAa,IAC/BA,IAAe,KAEfkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAASjJ,KAEpCmJ,IAAOpO,IA7hPhB,eA8hPWF,EAAM6P,OAAOzC,GAAa,IAAIxqB,eAChC0rB,EAAKtO,EAAM6P,OAAOzC,GAAa,IAC/BA,IAAe,KAEfkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAAShJ,KAEpCkJ,IAAOpO,IAniPlB,iBAoiPaF,EAAM6P,OAAOzC,GAAa,IAAIxqB,eAChC0rB,EAAKtO,EAAM6P,OAAOzC,GAAa,IAC/BA,IAAe,KAEfkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAAS/I,KAEpCiJ,IAAOpO,IAziPpB,WA0iPeF,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B0rB,EAAKtO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAAS9I,KAEpCgJ,IAAOpO,IA/iPtB,UAgjPiBF,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B0rB,EAAKtO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAAS7I,KAEpC+I,IAAOpO,IArjPxB,YAsjPmBF,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B0rB,EAAKtO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAAS5I,KAEpC8I,IAAOpO,IA3jP1B,WA4jPqBF,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B0rB,EAAKtO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAAS3I,KAEpC6I,IAAOpO,IAjkP5B,aAkkPuBF,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B0rB,EAAKtO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAAS1I,KAEpC4I,IAAOpO,IAvkP9B,kBAwkPyBF,EAAM6P,OAAOzC,GAAa,IAAIxqB,eAChC0rB,EAAKtO,EAAM6P,OAAOzC,GAAa,IAC/BA,IAAe,KAEfkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAASzI,KAEpC2I,IAAOpO,IA7kPhC,oBA8kP2BF,EAAM6P,OAAOzC,GAAa,IAAIxqB,eAChC0rB,EAAKtO,EAAM6P,OAAOzC,GAAa,IAC/BA,IAAe,KAEfkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAASxI,KAEpC0I,IAAOpO,IAnlPlC,SAolP6BF,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B0rB,EAAKtO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAASvI,KAEpCyI,IAAOpO,IACToO,EAAKlB,GA1lPhC,SA2lP+BpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAStI,KAEpC2I,IAAOvO,IACMoO,EACfG,EAjmP7BqE,GAmmP2BxE,EAAKG,sBAsB7C,OAAOH,EAeMuO,MACM3c,GACJsO,OACMtO,GACJsR,OACMtR,GACJsO,OACMtO,IACTkP,EAAK0N,QACM5c,IACTkP,EAAK2N,QACM7c,IACTkP,EAAK4N,QACM9c,IACTkP,EAAK6N,MAIP7N,IAAOlP,IACTkP,EAAK,MAEHA,IAAOlP,GACHsO,OACMtO,IACV+U,EAAMpD,QACM3R,GACJsO,OACMtO,GACJyT,OACMzT,GACKoO,EACfG,EArqPb,SAASjpB,EAAIstB,EAAG9yB,EAAGa,GAC1B,MAAO,CACHI,KAAMuE,EAAG5C,cACT6C,KAAM,CACJT,MAAO8tB,EACP1gB,UAAWpS,EACXqS,OAAQxR,IA+pPWq8B,CAASzO,EAAIG,EAAIQ,EAAI6F,GAC1B3G,EAAKG,IAkBbrB,GAAckB,EACdA,EAAKpO,KA+BrBkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAhhBF6O,MACMjd,IACToO,EAAKlB,IACLqB,EAiKJ,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAE5BP,EAAKlB,IACLqB,EAAK4F,QACMnU,GACTqO,EAAKnB,IACLsB,EAAKF,QACMtO,IACTyO,EAAK2F,QACMpU,IACT0O,EAAKJ,QACMtO,IACT2O,EAAKwF,QACMnU,EAETqO,EADAG,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexBzB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,IACTqO,EAAK,MAEHA,IAAOrO,GACMoO,EACfG,EA18OS,SAAS6H,EAAIxkB,GAClB,IAAIzS,EAAOi3B,EAIX,OAHa,OAATxkB,IACFzS,EAAO,GAAGi3B,KAAMxkB,EAAK,MAEhBzS,EAq8ON+9B,CAAS3O,EAAIF,GAClBD,EAAKG,IAELrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAlNA+O,MACMnd,GACJsO,OACMtO,IACTwO,EAAKgF,QACMxT,GACJsO,OACMtO,IACT0O,EAAKoD,QACM9R,IACT0O,EAAK,MAEHA,IAAO1O,GACJsO,OACMtO,GACJyT,OACMzT,GACJsO,OACMtO,IACTkP,EAAK+M,QACMjc,IACTkP,EAAK,MAEHA,IAAOlP,GACMoO,EAnzObjvB,EAozOYovB,EApzOH6O,EAozOWlO,GApzOdrwB,EAozOU6vB,IAnzOZ,cAAX7vB,EAAEkC,OAAsBlC,EAAI,CAAEkC,KAAM,YAAalB,MAAO,CAAChB,KAozOpDuvB,EADAG,EAlzOL,CACLxtB,KAAM,WACN5B,KAAMA,EACNoG,KAAM1G,GAAO,CAAEkC,KAAM,YAAalB,MAAO,IACzCwH,KAAM+1B,KAizOIlQ,GAAckB,EACdA,EAAKpO,KAebkN,GAAckB,EACdA,EAAKpO,KAebkN,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,IACLqB,EAoJN,WACE,IAAIH,GAEJA,EA+6KF,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAx6YQ,iBAy6YTpN,EAAM6P,OAAOzC,GAAa,IAAIxqB,eAChC6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,IAC/BA,IAAe,KAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASnC,KAEpCwC,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EA37Y6B,iBA87Y7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAl9KFiP,MACMrd,IACToO,EAmwLJ,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA/uZQ,iBAgvZTpN,EAAM6P,OAAOzC,GAAa,IAAIxqB,eAChC6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,IAC/BA,IAAe,KAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASjC,KAEpCsC,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EAlwZ6B,iBAqwZ7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAtyLAkP,MACMtd,IACToO,EAAKmP,MAIT,OAAOnP,EA/JEoP,MACMxd,GACJsO,OACMtO,IACTwO,EAAKgF,QACMxT,GACJsO,OACMtO,IACT0O,EAAKwD,QACMlS,IACT0O,EAAK,MAEHA,IAAO1O,GACJsO,OACMtO,GACJyT,OACMzT,GACJsO,OACMtO,IACTkP,EAAK+M,QACMjc,IACTkP,EAAK,MAEHA,IAAOlP,GACMoO,EACfG,EA52OT,SAASpvB,EAAMN,EAAGu+B,GACvB,MAAO,CACLr8B,KAAM,WACN5B,KAAMA,EACNoG,KAAM1G,GAAO,CAAEkC,KAAM,YAAalB,MAAO,IACzCwH,KAAM+1B,GAu2OWK,CAASlP,EAAIG,EAAIQ,GACtBd,EAAKG,IAELrB,GAAckB,EACdA,EAAKpO,KAebkN,GAAckB,EACdA,EAAKpO,KAebkN,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,IACLqB,EAAKgP,QACMvd,GACJsO,OACMtO,IACTwO,EAAKkP,QACM1d,IACTwO,EAAK,MAEHA,IAAOxO,GACMoO,EACfG,EAt5OC,SAASqE,EAAG+K,GACnB,MAAO,CACH58B,KAAM,WACN5B,KAAMyzB,EACNvrB,KAAMs2B,GAk5OCC,CAASrP,EAAIC,GAClBJ,EAAKG,IAELrB,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,MAn7OA,IAAS7gB,EAAMN,EAAGu+B,EAy7O/B,OAAOhP,EA5jDIyP,MACM7d,IACToO,EA+FV,WACE,IAAIA,EAAIG,EAAQC,EAAIC,EAAIC,EAAIC,EAAIC,EAAQM,EAAS6F,EAIjD,GAFA3G,EAAKlB,IACLqB,EAAKuP,QACM9d,EAET,GADKsO,OACMtO,EAAY,CAGrB,GAFAwO,EAAK,IACLC,EAAKsP,QACM/d,EACT,KAAOyO,IAAOzO,GACZwO,EAAGxrB,KAAKyrB,GACRA,EAAKsP,UAGPvP,EAAKxO,EAEHwO,IAAOxO,IACTyO,EAAKH,QACMtO,IACT0O,EAAKsP,QACMhe,IACT0O,EAAK,MAEHA,IAAO1O,IACT2O,EAAKL,QACMtO,IACT4O,EAAKqP,QACMje,GACJsO,OACMtO,IACTkP,EAAK4O,QACM9d,IACTkP,EAAK,MAEHA,IAAOlP,GACMoO,EApoMX8P,EAqoMU1P,GAroMM2P,EAqoMFzP,IApoMbwP,EAAel7B,KAAKm7B,GAqoMzB/P,EADAG,EAnoMH,CACLxtB,KAAM,OACNkB,KAAM,KACNsD,KAAM24B,KAmoMEhR,GAAckB,EACdA,EAAKpO,KAebkN,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,OAGPkN,GAAckB,EACdA,EAAKpO,EAzqMM,IAASke,EAAgBC,EA2qMtC,GAAI/P,IAAOpO,EAGT,GAFAoO,EAAKlB,IACLqB,EAAKuP,QACM9d,EAET,GADKsO,OACMtO,EAET,IADAwO,EAAKmD,QACM3R,EAET,IADAyO,EAAKH,QACMtO,EAAY,CAGrB,GAFA0O,EAAK,IACLC,EAAKoP,QACM/d,EACT,KAAO2O,IAAO3O,GACZ0O,EAAG1rB,KAAK2rB,GACRA,EAAKoP,UAGPrP,EAAK1O,EAEH0O,IAAO1O,IACT2O,EAAKL,QACMtO,IACT4O,EAAKoP,QACMhe,IACT4O,EAAK,MAEHA,IAAO5O,GACJsO,OACMtO,IACTkP,EAAK+O,QACMje,GACHsO,OACMtO,IACV+U,EAAM+I,QACM9d,IACV+U,EAAM,MAEJA,IAAQ/U,GACKoO,EACfG,EA3sMX,SAAStsB,EAAMi8B,EAAgBC,GAEpC,OADIA,GAAWD,EAAel7B,KAAKm7B,GAC5B,CACLp9B,KAAM,OACNkB,KAAMA,EACNsD,KAAM24B,GAssMaE,CAAS5P,EAAIE,EAAIE,GACtBR,EAAKG,IAELrB,GAAckB,EACdA,EAAKpO,KAebkN,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,OAGPkN,GAAckB,EACdA,EAAKpO,OAGPkN,GAAckB,EACdA,EAAKpO,OAGPkN,GAAckB,EACdA,EAAKpO,EAIT,OAAOoO,EAnQMiQ,MACMre,IACToO,EAoDZ,WACE,IAAIA,EAAIG,EAAQC,EAAQE,EAExBN,EAAKlB,IACLqB,EAAKsO,QACM7c,GACJsO,OACMtO,IACTwO,EAAKmD,QACM3R,GACJsO,OACMtO,IACT0O,EAq5QV,WACE,IAAIN,GAEJA,EAr0CF,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAh9ZQ,SAi9ZTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAStI,KAEpC2I,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EAtiZ6B,SAyiZ7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAkyCFkQ,MACMte,IACToO,EAjyCJ,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GApgaQ,UAqgaTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS7I,KAEpCkJ,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EA3kZ6B,UA8kZ7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EA8vCAmQ,MACMve,IACToO,EA7vCN,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAlkaQ,QAmkaTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASzJ,KAEpC8J,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EAhnZ6B,QAmnZ7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EA0tCEoQ,MACMxe,IACToO,EAztCR,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA9laQ,SA+laTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASpJ,KAEpCyJ,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EArpZ6B,SAwpZ7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAsrCIqQ,MACMze,IACToO,EArrCV,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAxnaQ,WAynaTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS9I,KAEpCmJ,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EA1rZ6B,WA6rZ7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAkpCMsQ,MACM1e,IACToO,EAjpCZ,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAxpaQ,WAypaTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS3I,KAEpCgJ,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EA/tZ6B,WAkuZ7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EA8mCQuQ,IAOf,OAAOvQ,EAz6QMwQ,MACM5e,GACMoO,EACfG,EA3kMK,CACLxtB,KAAM,WACNkB,KAykMcusB,EAxkMdnlB,KAwkMkBqlB,EAxkMVhsB,eAykMR0rB,EAAKG,IAkBbrB,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EA1FQyQ,MACM7e,IACToO,EAAKqM,QACMza,IACToO,EAAKoJ,QACMxX,IACToO,EAAKlB,GACAsG,OACMxT,GACJsO,OACMtO,IACTwO,EAAKsD,QACM9R,GACJsO,OACMtO,GACJyT,OACMzT,GACMoO,GA9hMnByM,EA+hMkBrM,GA9hMzBlrB,aAAc,EA+hMH8qB,EA9hMTyM,IAgjMC3N,GAAckB,EACdA,EAAKpO,IAWhBoO,EAmNT,SAAS2P,KACP,IAAI3P,EAAYI,EAAgBI,EAiDhC,OA/CAR,EAAKlB,GAu8KP,WACE,IAAIkB,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA5rWQ,SA6rWTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASzD,KAEpC8D,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAx+KF0Q,KACM9e,GACJsO,OACMtO,IACTwO,EAAKsD,QACM9R,GACJsO,OACMtO,GAo+KnB,WACE,IAAIoO,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA/tWQ,SAguWTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASxD,KAEpC6D,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EArgLM2Q,KACM/e,GACJsO,OACMtO,IACT4O,EAAK+C,QACM3R,GACMoO,EAEfA,EAzwMD,CACLrtB,KAAM,OACN4H,KAswMoB6lB,EArwMpB1rB,OAqwMwB8rB,KA2B9B1B,GAAckB,EACdA,EAAKpO,GAGAoO,EAGT,SAAS4P,KACP,IAAI5P,EAAYI,EAyBhB,OAvBAJ,EAAKlB,GA49KP,WACE,IAAIkB,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAlwWQ,SAmwWTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASvD,KAEpC4D,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EA7/KF4Q,KACMhf,GACJsO,OACMtO,IACTwO,EAAKmD,QACM3R,GACMoO,EAEfA,EA/yMO,CAAErtB,KAAM,OAAQ+B,OA8yMT0rB,KAWlBtB,GAAckB,EACdA,EAAKpO,GAGAoO,EAGT,SAASqM,KACP,IAAIrM,EAAIG,EAAgBG,EA/zMF2F,EAAKztB,EA62M3B,OA5CAwnB,EAAKlB,IACLqB,EAAK4F,QACMnU,GACJsO,OACMtO,GACJoU,OACMpU,GACJsO,OACMtO,IACT0O,EA0YV,WACE,IAAIN,EAAIG,EAERH,EAAKlB,IACLqB,EAAK0Q,QACMjf,IACMoO,EACfG,EAAcA,IAEhBH,EAAKG,KACMvO,IACToO,EAAKwG,MAGP,OAAOxG,EAxZM8Q,MACMlf,GACMoO,EA50MHiG,EA60ME9F,EA70MG3nB,EA60MC8nB,EA50MpB/Q,GAAW4D,IAAI,WAAW8S,MAAQztB,KA60MhCwnB,EADAG,EA30MK,CACLxtB,KAAM,aACNkK,MAAOopB,EACP7nB,OAAQ5F,KA21MhBsmB,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,IACLqB,EAAK4Q,QACMnf,IACMoO,EACfG,EAh2MS,SAAS3nB,GAEd,OADA+W,GAAW4D,IAAI,iBAAiB3a,GACzB,CACL7F,KAAM,aACNkK,MAAO,KACPuB,OAAQ5F,GA21MTw4B,CAAS7Q,IAEhBH,EAAKG,GAGAH,EAmFT,SAAS+F,KACP,IAAI/F,EAAIG,EAkCR,OAhCAH,EAAKlB,IACLqB,EAAKgF,QACMvT,GACMkN,IACVjK,EAASsL,GAEPvO,OAEA,KAEIA,GACMoO,EAEfA,EADAG,EAAcA,IAGdrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,IACLqB,EAAKqG,QACM5U,IACMoO,EACfG,EAAcA,GAEhBH,EAAKG,GAGAH,EAyCT,SAASwG,KACP,IAAIxG,EAUJ,OARAA,EAWF,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GACiC,KAAlCpN,EAAMT,WAAW6N,KACnBqB,EAvgNW,IAwgNXrB,OAEAqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS/K,IAExC,GAAIoL,IAAOvO,EAAY,CASrB,GARAqO,EAAK,GACDjL,EAASnU,KAAK6Q,EAAMuf,OAAOnS,MAC7BsB,EAAK1O,EAAMuf,OAAOnS,IAClBA,OAEAsB,EAAKxO,EACmB,IAApBuN,IAAyBW,GAAS7K,IAEpCmL,IAAOxO,EACT,KAAOwO,IAAOxO,GACZqO,EAAGrrB,KAAKwrB,GACJpL,EAASnU,KAAK6Q,EAAMuf,OAAOnS,MAC7BsB,EAAK1O,EAAMuf,OAAOnS,IAClBA,OAEAsB,EAAKxO,EACmB,IAApBuN,IAAyBW,GAAS7K,SAI1CgL,EAAKrO,EAEHqO,IAAOrO,GAC6B,KAAlCF,EAAMT,WAAW6N,KACnBsB,EAtiNO,IAuiNPtB,OAEAsB,EAAKxO,EACmB,IAApBuN,IAAyBW,GAAS/K,IAEpCqL,IAAOxO,GACMoO,EACfG,EAAKhL,EAAS8K,GACdD,EAAKG,IAELrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,EAGP,OAAOoO,EAtEFkR,MACMtf,IACToO,EAuEJ,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GACiC,KAAlCpN,EAAMT,WAAW6N,KACnBqB,EAhkNW,IAikNXrB,OAEAqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASzK,IAExC,GAAI8K,IAAOvO,EAAY,CASrB,GARAqO,EAAK,GACD3K,EAASzU,KAAK6Q,EAAMuf,OAAOnS,MAC7BsB,EAAK1O,EAAMuf,OAAOnS,IAClBA,OAEAsB,EAAKxO,EACmB,IAApBuN,IAAyBW,GAASvK,IAEpC6K,IAAOxO,EACT,KAAOwO,IAAOxO,GACZqO,EAAGrrB,KAAKwrB,GACJ9K,EAASzU,KAAK6Q,EAAMuf,OAAOnS,MAC7BsB,EAAK1O,EAAMuf,OAAOnS,IAClBA,OAEAsB,EAAKxO,EACmB,IAApBuN,IAAyBW,GAASvK,SAI1C0K,EAAKrO,EAEHqO,IAAOrO,GAC6B,KAAlCF,EAAMT,WAAW6N,KACnBsB,EA/lNO,IAgmNPtB,OAEAsB,EAAKxO,EACmB,IAApBuN,IAAyBW,GAASzK,IAEpC+K,IAAOxO,GACMoO,EACfG,EAAKhL,EAAS8K,GACdD,EAAKG,IAELrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,EAGP,OAAOoO,EAlIAmR,MACMvf,IACToO,EAmIN,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GACiC,KAAlCpN,EAAMT,WAAW6N,KACnBqB,EA1nNW,IA2nNXrB,OAEAqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAStK,IAExC,GAAI2K,IAAOvO,EAAY,CASrB,GARAqO,EAAK,GACDxK,EAAS5U,KAAK6Q,EAAMuf,OAAOnS,MAC7BsB,EAAK1O,EAAMuf,OAAOnS,IAClBA,OAEAsB,EAAKxO,EACmB,IAApBuN,IAAyBW,GAASpK,IAEpC0K,IAAOxO,EACT,KAAOwO,IAAOxO,GACZqO,EAAGrrB,KAAKwrB,GACJ3K,EAAS5U,KAAK6Q,EAAMuf,OAAOnS,MAC7BsB,EAAK1O,EAAMuf,OAAOnS,IAClBA,OAEAsB,EAAKxO,EACmB,IAApBuN,IAAyBW,GAASpK,SAI1CuK,EAAKrO,EAEHqO,IAAOrO,GAC6B,KAAlCF,EAAMT,WAAW6N,KACnBsB,EAzpNO,IA0pNPtB,OAEAsB,EAAKxO,EACmB,IAApBuN,IAAyBW,GAAStK,IAEpC4K,IAAOxO,GACMoO,EACfG,EA7pNgC,KA6pNlBF,EA7pN6B5qB,KAAK,QA8pNhD2qB,EAAKG,IAELrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,EAGP,OAAOoO,EA9LEoR,IAIFpR,EA8MT,SAAS+Q,KACP,IAAI/Q,EAAIG,EA4BR,OA1BAH,EAAKlB,IACLqB,EAAK0Q,QACMjf,GACMkN,IACVjK,EAASsL,GAEPvO,OAEA,KAEIA,GACMoO,EAEfA,EADAG,EAAcA,IAGdrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKwG,MAGAxG,EAGT,SAAS6Q,KACP,IAAI7Q,EAAIG,EAAIF,EAAIG,EAIhB,GAFAJ,EAAKlB,IACLqB,EAAKqB,QACM5P,EAAY,CAGrB,IAFAqO,EAAK,GACLG,EAAKiR,KACEjR,IAAOxO,GACZqO,EAAGrrB,KAAKwrB,GACRA,EAAKiR,KAEHpR,IAAOrO,GACMoO,EAEfA,EADAG,EAAKxK,GAASwK,EAAIF,KAGlBnB,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,EAGP,OAAOoO,EAGT,SAASmF,KACP,IAAInF,EAAIG,EAAIF,EAAIG,EAIhB,GAFAJ,EAAKlB,IACLqB,EAAKqB,QACM5P,EAAY,CAGrB,IAFAqO,EAAK,GACLG,EAAKkR,KACElR,IAAOxO,GACZqO,EAAGrrB,KAAKwrB,GACRA,EAAKkR,KAEHrR,IAAOrO,GACMoO,EAEfA,EADAG,EAAKxK,GAASwK,EAAIF,KAGlBnB,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,EAGP,OAAOoO,EAGT,SAASwB,KACP,IAAIxB,EAUJ,OARIpK,GAAS/U,KAAK6Q,EAAMuf,OAAOnS,MAC7BkB,EAAKtO,EAAMuf,OAAOnS,IAClBA,OAEAkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAASjK,KAGjCmK,EAGT,SAASsR,KACP,IAAItR,EAUJ,OARIlK,GAASjV,KAAK6Q,EAAMuf,OAAOnS,MAC7BkB,EAAKtO,EAAMuf,OAAOnS,IAClBA,OAEAkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAAS/J,KAGjCiK,EAGT,SAASqR,KACP,IAAIrR,EAUJ,OARIhK,GAASnV,KAAK6Q,EAAMuf,OAAOnS,MAC7BkB,EAAKtO,EAAMuf,OAAOnS,IAClBA,OAEAkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAAS7J,KAGjC+J,EAGT,SAASoJ,KACP,IAAIpJ,EAAIG,EAAIF,EAAIG,EA8BhB,OA5BAJ,EAAKlB,GACLqB,EAAKrB,GACiC,KAAlCpN,EAAMT,WAAW6N,KACnBmB,EA5zNW,IA6zNXnB,OAEAmB,EAAKrO,EACmB,IAApBuN,IAAyBW,GAAS5J,KAEpC+J,IAAOrO,IACTwO,EAAK+E,QACMvT,EAETuO,EADAF,EAAK,CAACA,EAAIG,IAOZtB,GAAcqB,EACdA,EAAKvO,GAEHuO,IAAOvO,IACMoO,EACfG,EA90Na,CAAExtB,KAAM,QAASlB,MA80NhB0uB,EA90NyB,KAg1NzCH,EAAKG,EAsFP,SAASmP,KACP,IAAItP,EAAYI,EAAQE,EAAgBQ,EA4HxC,OA1HAd,EAAKlB,GACAsJ,OACMxW,GACJsO,OACMtO,GAl6NA,WAm6NLF,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B8rB,EAAK1O,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfsB,EAAKxO,EACmB,IAApBuN,IAAyBW,GAAS3J,KAEpCiK,IAAOxO,GACJsO,OACMtO,IACT0O,EAAK6O,QACMvd,GACJsO,OACMtO,GACJwT,OACMxT,GACJsO,OACMtO,IACTkP,EAAKgD,QACMlS,IACTkP,EAAK,MAEHA,IAAOlP,GACHsO,OACMtO,GACJyT,OACMzT,GACKoO,EAEfA,EA77NT,CACLrtB,KAAM,YACNG,QA07N4BwtB,EAz7N5BprB,aAAa,EACbrB,KAw7NgCitB,KAWtBhC,GAAckB,EACdA,EAAKpO,KAuBjBkN,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,GACAsJ,OACMxW,GACJsO,OACMtO,GAl/NF,WAm/NHF,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B8rB,EAAK1O,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfsB,EAAKxO,EACmB,IAApBuN,IAAyBW,GAAS3J,KAEpCiK,IAAOxO,GACJsO,OACMtO,IACT0O,EAAK6O,QACMvd,GACMoO,EAEfA,EAv/NC,SAAS9oB,GAChB,MAAO,CACLvE,KAAM,YACNG,QAASoE,GAm/NAq6B,CAASjR,KAWlBxB,GAAckB,EACdA,EAAKpO,KAOTkN,GAAckB,EACdA,EAAKpO,IAIFoO,EAGT,SAAS6N,KACP,IAAI7N,EAAYI,EAAQE,EAAQE,EA2FhC,OAzFAR,EAAKlB,GACA0S,OACM5f,GACJsO,OACMtO,IACTwO,EAAKiI,QACMzW,GACMoO,EAEfA,EAthOO,CACLrtB,KAAM,SACNyU,wBAmhOYgZ,KAWlBtB,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,GACA0S,OACM5f,GACJsO,OACMtO,IACTwO,EAAKgF,QACMxT,GACJsO,OACMtO,IACT0O,EAAKgI,QACM1W,GACJsO,OACMtO,IACT4O,EAAKS,QACMrP,IACT4O,EAAK,MAEHA,IAAO5O,GACJsO,OACMtO,GACJyT,OACMzT,GACMoO,EAEfA,EAtjOP,CACL3U,YAojO0BiV,EAnjO1BpnB,QAmjO8BsnB,KAWtB1B,GAAckB,EACdA,EAAKpO,KAuBjBkN,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKsP,OAIFtP,EA2nCT,SAASuK,KACP,IAAIvK,EAgBJ,OAdAA,EAAKkF,QACMtT,IACToO,EAAK6F,QACMjU,IACToO,EAyHN,WACE,IAAIA,EAAIG,EAERH,EAAKlB,IACLqB,EA28BF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GA7hSQ,SA8hSTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASvG,KAEpC4G,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EA7+BFyR,MACM7f,IACMoO,EACfG,EA3sQa,CAAExtB,KAAM,OAAQlB,OAAO,KA6sQtCuuB,EAAKG,KACMvO,IACToO,EAAKlB,IACLqB,EA6gCJ,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAnmSQ,UAomSTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAStG,KAEpC2G,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EA/iCA0R,MACM9f,IACMoO,EACfG,EAhtQW,CAAExtB,KAAM,OAAQlB,OAAO,IAktQpCuuB,EAAKG,GAGP,OAAOH,EA7IE2R,MACM/f,IACToO,EA2FR,WACE,IAAIA,EAAIG,EAERH,EAAKlB,IACLqB,EAw3BF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,GAp7RQ,SAq7RTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASxG,KAEpC6G,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EA15BF4R,MACMhgB,IACMoO,EACfG,EAxrQa,CAAExtB,KAAM,OAAQlB,MAAO,OA4rQtC,OAFAuuB,EAAKG,EApGM0R,MACMjgB,IACToO,EA6RV,WACE,IAAIA,EAAIG,EAAQC,EAAIC,EAAIC,EAAIC,EAE5BP,EAAKlB,IACLqB,EAAKuO,QACM9c,IACTuO,EAAKwO,QACM/c,IACTuO,EAAKqO,QACM5c,IACTuO,EAAK2R,MAIX,GAAI3R,IAAOvO,EAET,GADKsO,OACMtO,EAAY,CASrB,GARAwO,EAAKtB,GACiC,KAAlCpN,EAAMT,WAAW6N,KACnBuB,EA/kRO,IAglRPvB,OAEAuB,EAAKzO,EACmB,IAApBuN,IAAyBW,GAASzK,IAEpCgL,IAAOzO,EAAY,CAGrB,IAFA0O,EAAK,GACLC,EAAKwR,KACExR,IAAO3O,GACZ0O,EAAG1rB,KAAK2rB,GACRA,EAAKwR,KAEHzR,IAAO1O,GAC6B,KAAlCF,EAAMT,WAAW6N,KACnByB,EA9lRG,IA+lRHzB,OAEAyB,EAAK3O,EACmB,IAApBuN,IAAyBW,GAASzK,IAEpCkL,IAAO3O,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,IAGdzB,GAAcsB,EACdA,EAAKxO,KAGPkN,GAAcsB,EACdA,EAAKxO,QAGPkN,GAAcsB,EACdA,EAAKxO,EAEHwO,IAAOxO,GACMoO,EACfG,EAAKzI,GAASyI,EAAIC,GAClBJ,EAAKG,IAELrB,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,OAGPkN,GAAckB,EACdA,EAAKpO,EAEP,GAAIoO,IAAOpO,EAYT,GAXAoO,EAAKlB,IACLqB,EAAKuO,QACM9c,IACTuO,EAAKwO,QACM/c,IACTuO,EAAKqO,QACM5c,IACTuO,EAAK2R,MAIP3R,IAAOvO,EAET,GADKsO,OACMtO,EAAY,CASrB,GARAwO,EAAKtB,GACiC,KAAlCpN,EAAMT,WAAW6N,KACnBuB,EAzpRK,IA0pRLvB,OAEAuB,EAAKzO,EACmB,IAApBuN,IAAyBW,GAAS/K,IAEpCsL,IAAOzO,EAAY,CAGrB,IAFA0O,EAAK,GACLC,EAAKyR,KACEzR,IAAO3O,GACZ0O,EAAG1rB,KAAK2rB,GACRA,EAAKyR,KAEH1R,IAAO1O,GAC6B,KAAlCF,EAAMT,WAAW6N,KACnByB,EAxqRC,IAyqRDzB,OAEAyB,EAAK3O,EACmB,IAApBuN,IAAyBW,GAAS/K,IAEpCwL,IAAO3O,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,IAGdzB,GAAcsB,EACdA,EAAKxO,KAGPkN,GAAcsB,EACdA,EAAKxO,QAGPkN,GAAcsB,EACdA,EAAKxO,EAEHwO,IAAOxO,GACMoO,EACfG,EAAKzI,GAASyI,EAAIC,GAClBJ,EAAKG,IAELrB,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,OAGPkN,GAAckB,EACdA,EAAKpO,EAIT,OAAOoO,EA3aMiS,IAMNjS,EAsIT,SAASkF,KACP,IAAIlF,EAAIG,EAAQC,EAAIC,EAAIC,EAAIC,EAa5B,GAXAP,EAAKlB,GAztQQ,MA0tQTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAMuf,OAAOnS,IAClBA,OAEAqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASrI,KAEpC0I,IAAOvO,IACTuO,EAAK,MAEHA,IAAOvO,EAET,GADKsO,OACMtO,EAAY,CASrB,GARAwO,EAAKtB,GACiC,KAAlCpN,EAAMT,WAAW6N,KACnBuB,EA97QO,IA+7QPvB,OAEAuB,EAAKzO,EACmB,IAApBuN,IAAyBW,GAASzK,IAEpCgL,IAAOzO,EAAY,CAGrB,IAFA0O,EAAK,GACLC,EAAKwR,KACExR,IAAO3O,GACZ0O,EAAG1rB,KAAK2rB,GACRA,EAAKwR,KAEHzR,IAAO1O,GAC6B,KAAlCF,EAAMT,WAAW6N,KACnByB,EA78QG,IA88QHzB,OAEAyB,EAAK3O,EACmB,IAApBuN,IAAyBW,GAASzK,IAEpCkL,IAAO3O,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,IAGdzB,GAAcsB,EACdA,EAAKxO,KAGPkN,GAAcsB,EACdA,EAAKxO,QAGPkN,GAAcsB,EACdA,EAAKxO,EAEHwO,IAAOxO,GACMoO,EAEfA,EADAG,EA5wQS,CACLxtB,KA2wQUwtB,EA3wQA,eAAiB,sBAC3B1uB,MA0wQc2uB,EA1wQJ,GAAG/qB,KAAK,OA6wQtBypB,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,OAGPkN,GAAckB,EACdA,EAAKpO,EAEP,GAAIoO,IAAOpO,EAYT,GAXAoO,EAAKlB,GA9xQM,MA+xQPpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAMuf,OAAOnS,IAClBA,OAEAqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASrI,KAEpC0I,IAAOvO,IACTuO,EAAK,MAEHA,IAAOvO,EAET,GADKsO,OACMtO,EAAY,CASrB,GARAwO,EAAKtB,GACiC,KAAlCpN,EAAMT,WAAW6N,KACnBuB,EAxgRK,IAygRLvB,OAEAuB,EAAKzO,EACmB,IAApBuN,IAAyBW,GAAS/K,IAEpCsL,IAAOzO,EAAY,CAGrB,IAFA0O,EAAK,GACLC,EAAKyR,KACEzR,IAAO3O,GACZ0O,EAAG1rB,KAAK2rB,GACRA,EAAKyR,KAEH1R,IAAO1O,GAC6B,KAAlCF,EAAMT,WAAW6N,KACnByB,EAvhRC,IAwhRDzB,OAEAyB,EAAK3O,EACmB,IAApBuN,IAAyBW,GAAS/K,IAEpCwL,IAAO3O,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,IAGdzB,GAAcsB,EACdA,EAAKxO,KAGPkN,GAAcsB,EACdA,EAAKxO,QAGPkN,GAAcsB,EACdA,EAAKxO,EAEHwO,IAAOxO,GACMoO,EAEfA,EADAG,EA50QK,SAAS7uB,EAAGqmB,GACjB,MAAO,CACLhlB,KAAMrB,EAAI,eAAiB,SAC3BG,MAAOkmB,EAAG,GAAGtiB,KAAK,KAy0Qf68B,CAAS/R,EAAIC,KAGlBtB,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,OAGPkN,GAAckB,EACdA,EAAKpO,EAIT,OAAOoO,EAoJT,SAASgS,KACP,IAAIhS,EAaJ,OAXIpI,GAAS/W,KAAK6Q,EAAMuf,OAAOnS,MAC7BkB,EAAKtO,EAAMuf,OAAOnS,IAClBA,OAEAkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAASjI,KAEpCmI,IAAOpO,IACToO,EAAKmS,MAGAnS,EAGT,SAAS+R,KACP,IAAI/R,EAaJ,OAXIlI,GAASjX,KAAK6Q,EAAMuf,OAAOnS,MAC7BkB,EAAKtO,EAAMuf,OAAOnS,IAClBA,OAEAkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAAS/H,KAEpCiI,IAAOpO,IACToO,EAAKmS,MAGAnS,EAGT,SAASmS,KACP,IAAInS,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAt+QF8R,EAAIC,EAAIC,EAAIC,EAuqRlC,OA/LAvS,EAAKlB,GArgRQ,QAsgRTpN,EAAM6P,OAAOzC,GAAa,IAC5BqB,EAvgRW,MAwgRXrB,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS9H,KAEpCmI,IAAOvO,IACMoO,EACfG,EA7gR+B,QA+gRjCH,EAAKG,KACMvO,IACToO,EAAKlB,GAhhRM,QAihRPpN,EAAM6P,OAAOzC,GAAa,IAC5BqB,EAlhRS,MAmhRTrB,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS7H,KAEpCkI,IAAOvO,IACMoO,EACfG,EAxhR6B,QA0hR/BH,EAAKG,KACMvO,IACToO,EAAKlB,GA3hRI,SA4hRLpN,EAAM6P,OAAOzC,GAAa,IAC5BqB,EA7hRO,OA8hRPrB,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS5H,KAEpCiI,IAAOvO,IACMoO,EACfG,EAniR2B,SAqiR7BH,EAAKG,KACMvO,IACToO,EAAKlB,GAtiRE,QAuiRHpN,EAAM6P,OAAOzC,GAAa,IAC5BqB,EAxiRK,MAyiRLrB,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS3H,KAEpCgI,IAAOvO,IACMoO,EACfG,EA9iRyB,QAgjR3BH,EAAKG,KACMvO,IACToO,EAAKlB,GAjjRA,QAkjRDpN,EAAM6P,OAAOzC,GAAa,IAC5BqB,EAnjRG,MAojRHrB,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS1H,KAEpC+H,IAAOvO,IACMoO,EACfG,EAzjRuB,OA2jRzBH,EAAKG,KACMvO,IACToO,EAAKlB,GA5jRF,QA6jRCpN,EAAM6P,OAAOzC,GAAa,IAC5BqB,EA9jRC,MA+jRDrB,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASzH,KAEpC8H,IAAOvO,IACMoO,EACfG,EApkRqB,OAskRvBH,EAAKG,KACMvO,IACToO,EAAKlB,GAvkRJ,QAwkRGpN,EAAM6P,OAAOzC,GAAa,IAC5BqB,EAzkRD,MA0kRCrB,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASxH,KAEpC6H,IAAOvO,IACMoO,EACfG,EA/kRmB,OAilRrBH,EAAKG,KACMvO,IACToO,EAAKlB,GAllRN,QAmlRKpN,EAAM6P,OAAOzC,GAAa,IAC5BqB,EAplRH,MAqlRGrB,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASvH,KAEpC4H,IAAOvO,IACMoO,EACfG,EA1lRiB,OA4lRnBH,EAAKG,KACMvO,IACToO,EAAKlB,GA7lRR,QA8lROpN,EAAM6P,OAAOzC,GAAa,IAC5BqB,EA/lRL,MAgmRKrB,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAStH,KAEpC2H,IAAOvO,IACMoO,EACfG,EArmRe,OAumRjBH,EAAKG,KACMvO,IACToO,EAAKlB,GAxmRV,QAymRSpN,EAAM6P,OAAOzC,GAAa,IAC5BqB,EA1mRP,MA2mROrB,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASrH,KAEpC0H,IAAOvO,IACTqO,EAAKuS,QACM5gB,IACTwO,EAAKoS,QACM5gB,IACTyO,EAAKmS,QACM5gB,IACT0O,EAAKkS,QACM5gB,GACMoO,EAvnRrBoS,EAwnRoBnS,EAxnRhBoS,EAwnRoBjS,EAxnRhBkS,EAwnRoBjS,EAxnRhBkS,EAwnRoBjS,EAC1BN,EADAG,EAvnRbsS,OAAOC,aAAaC,SAAS,KAAOP,EAAKC,EAAKC,EAAKC,MA0oR9CzT,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,GACiC,KAAlCpN,EAAMT,WAAW6N,KACnBqB,EA9oRT,KA+oRSrB,OAEAqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASpH,KAEpCyH,IAAOvO,IACMoO,EACfG,EAppRW,MAspRbH,EAAKG,YAYlBH,EAiBT,SAAS6F,KACP,IAAI7F,EAAIG,EAjrRcluB,EA2rRtB,OARA+tB,EAAKlB,IACLqB,EAUF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKlB,IACLqB,EAAK2M,QACMlb,IACTqO,EAAK2S,QACMhhB,IACTwO,EAAKyS,QACMjhB,GACMoO,EAEfA,EADAG,EAnsRO,CACLxtB,KAAM,SACNlB,MAisRY0uB,EAAIF,EAAIG,KAW1BtB,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,IACLqB,EAAK2M,QACMlb,IACTqO,EAAK2S,QACMhhB,GACMoO,EACfG,EAntRO,SAAS2S,EAAMC,GACtB,MAAMC,EAASF,EAAOC,EACtB,OAAIE,GAASH,GAAc,CACzBngC,KAAM,SACNlB,MAAOuhC,GAEFE,WAAWF,GA6sRbG,CAAShT,EAAIF,GAClBD,EAAKG,IAMPrB,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,IACLqB,EAAK2M,QACMlb,IACTqO,EAAK4S,QACMjhB,GACMoO,EACfG,EA5tRK,SAAS2S,EAAMM,GAEtB,MAAO,CACLzgC,KAAM,SACNlB,MAHaqhC,EAAOM,GA2tRfC,CAASlT,EAAIF,GAClBD,EAAKG,IAMPrB,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,IACLqB,EAAK2M,QACMlb,IACMoO,EACfG,EApuRK,SAAS2S,GAChB,OAAIG,GAASH,GAAc,CACzBngC,KAAM,SACNlB,MAAOqhC,GAEFI,WAAWJ,GA+tRXQ,CAASnT,IAEhBH,EAAKG,KAKX,OAAOH,EAjFFuT,MACM3hB,IACMoO,EACfG,GAvrRoBluB,EAurRNkuB,IAtrRY,WAAXluB,EAAEU,KAA0BV,EAC9B,CAAEU,KAAM,SAAUlB,MAAOQ,IAurRxC+tB,EAAKG,EA+EP,SAAS2M,KACP,IAAI9M,EAAIG,EAAIF,EAyEZ,OAvEAD,EAAKwT,QACM5hB,IACToO,EAAKyT,QACM7hB,IACToO,EAAKlB,GACiC,KAAlCpN,EAAMT,WAAW6N,KACnBqB,EAhnSO,IAinSPrB,OAEAqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASrL,IAEpC0L,IAAOvO,IAC6B,KAAlCF,EAAMT,WAAW6N,KACnBqB,EA1nSK,IA2nSLrB,OAEAqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAStL,KAGtC2L,IAAOvO,IACTqO,EAAKuT,QACM5hB,GACMoO,EAEfA,EADAG,EAnwRmC,IAmwRjBF,IAOpBnB,GAAckB,EACdA,EAAKpO,GAEHoO,IAAOpO,IACToO,EAAKlB,GACiC,KAAlCpN,EAAMT,WAAW6N,KACnBqB,EAhpSK,IAipSLrB,OAEAqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASrL,IAEpC0L,IAAOvO,IAC6B,KAAlCF,EAAMT,WAAW6N,KACnBqB,EA1pSG,IA2pSHrB,OAEAqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAStL,KAGtC2L,IAAOvO,IACTqO,EAAKwT,QACM7hB,GACMoO,EAEfA,EADAG,EAlyRgC,IAkyRdF,IAOpBnB,GAAckB,EACdA,EAAKpO,KAMNoO,EAGT,SAAS4S,KACP,IAAI5S,EAAIG,EAAIF,EAyBZ,OAvBAD,EAAKlB,GACiC,KAAlCpN,EAAMT,WAAW6N,KACnBqB,EAvzRW,IAwzRXrB,OAEAqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASjH,KAEpCsH,IAAOvO,IACTqO,EAAKuT,QACM5hB,GACMoO,EAEfA,EADAG,EA/zRmC,IA+zRrBF,IAOhBnB,GAAckB,EACdA,EAAKpO,GAGAoO,EAGT,SAAS6S,KACP,IAAI7S,EAAIG,EAAIF,EAmBZ,OAjBAD,EAAKlB,IACLqB,EAsEF,WACE,IAAIH,EAAIG,EAAIF,EAEZD,EAAKlB,GACD5F,GAASrY,KAAK6Q,EAAMuf,OAAOnS,MAC7BqB,EAAKzO,EAAMuf,OAAOnS,IAClBA,OAEAqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS3G,KAEpCgH,IAAOvO,GACLwH,GAASvY,KAAK6Q,EAAMuf,OAAOnS,MAC7BmB,EAAKvO,EAAMuf,OAAOnS,IAClBA,OAEAmB,EAAKrO,EACmB,IAApBuN,IAAyBW,GAASzG,KAEpC4G,IAAOrO,IACTqO,EAAK,MAEHA,IAAOrO,GACMoO,EAEfA,EADAG,EAAcA,GAp6RoC,QAA7BuT,EAo6RHzT,GAp6RuCyT,EAAM,MAu6R/D5U,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GA56RM,IAAY8hB,EA+6RzB,OAAO1T,EAzGF2T,MACM/hB,IACTqO,EAAKuT,QACM5hB,GACMoO,EAEfA,EADAG,EAAcA,EAAIF,IAOpBnB,GAAckB,EACdA,EAAKpO,GAGAoO,EAGT,SAASwT,KACP,IAAIxT,EAAIG,EAAIF,EAKZ,GAHAD,EAAKlB,GACLqB,EAAK,IACLF,EAAKwT,QACM7hB,EACT,KAAOqO,IAAOrO,GACZuO,EAAGvrB,KAAKqrB,GACRA,EAAKwT,UAGPtT,EAAKvO,EAQP,OANIuO,IAAOvO,IACMoO,EACfG,EAAcA,EAl3R8B9qB,KAAK,KAo3RnD2qB,EAAKG,EAKP,SAASsT,KACP,IAAIzT,EAUJ,OARIlH,GAASjY,KAAK6Q,EAAMuf,OAAOnS,MAC7BkB,EAAKtO,EAAMuf,OAAOnS,IAClBA,OAEAkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAAS/G,KAGjCiH,EAGT,SAASwS,KACP,IAAIxS,EAUJ,OARIhH,GAASnY,KAAK6Q,EAAMuf,OAAOnS,MAC7BkB,EAAKtO,EAAMuf,OAAOnS,IAClBA,OAEAkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAAS7G,KAGjC+G,EAslBT,SAASkD,KACP,IAAIlD,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GAj8SQ,SAk8STpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASnG,KAEpCwG,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAkHT,SAAS4C,KACP,IAAI5C,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GA92UO,OA+2URpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASpN,IAEpCyN,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAqHT,SAASoI,KACP,IAAIpI,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GA3tTQ,OA4tTTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASlG,KAEpCuG,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EA4LT,SAASyH,KACP,IAAIzH,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GA76TQ,SA86TTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS5F,KAEpCiG,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAGT,SAASwH,KACP,IAAIxH,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GAh9TQ,UAi9TTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS3F,KAEpCgG,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAGT,SAASwR,KACP,IAAIxR,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GAn/TQ,SAo/TTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS1F,KAEpC+F,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EA6LT,SAASgF,KACP,IAAIhF,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GArsUQ,SAssUTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASrF,KAEpC0F,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAwCT,SAAS6D,KACP,IAAI7D,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GA3wUQ,OA4wUTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASnF,KAEpCwF,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EA6LT,SAAS2F,KACP,IAAI3F,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA79UQ,WA89UTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS7E,KAEpCkF,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EAh/U6B,WAm/U7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EA+ET,SAAS0B,KACP,IAAI1B,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAtkVQ,QAukVTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS1E,KAEpC+E,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EAzlV6B,QA4lV7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAGT,SAAS2B,KACP,IAAI3B,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAzmVQ,aA0mVTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASzE,KAEpC8E,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EA5nV6B,aA+nV7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAGT,SAASuI,KACP,IAAIvI,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA5oVQ,YA6oVTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASxE,KAEpC6E,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EA/pV6B,YAkqV7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAGT,SAASsM,KACP,IAAItM,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA/qVQ,OAgrVTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASvE,KAEpC4E,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EAlsV6B,OAqsV7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAGT,SAAS8L,KACP,IAAI9L,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAltVQ,OAmtVTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAStE,KAEpC2E,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EAruV6B,OAwuV7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAGT,SAASiM,KACP,IAAIjM,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GArvVQ,SAsvVTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASrE,KAEpC0E,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EAxwV6B,SA2wV7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAGT,SAASkL,KACP,IAAIlL,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAxxVQ,WAyxVTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASpE,KAEpCyE,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EA3yV6B,WA8yV7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAGT,SAASiL,KACP,IAAIjL,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA3zVQ,QA4zVTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASnE,KAEpCwE,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EA90V6B,QAi1V7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAGT,SAASwI,KACP,IAAIxI,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA91VQ,QA+1VTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASlE,KAEpCuE,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EAj3V6B,QAo3V7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAGT,SAASgK,KACP,IAAIhK,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAj4VQ,OAk4VTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASjE,KAEpCsE,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EAp5V6B,OAu5V7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EA6QT,SAAS0P,KACP,IAAI1P,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GAzpWQ,SA0pWTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS1D,KAEpC+D,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAkHT,SAAS6P,KACP,IAAI7P,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GAryWQ,QAsyWTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAStD,KAEpC2D,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAGT,SAAS2M,KACP,IAAI3M,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKlB,GAx0WQ,SAy0WTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASrD,KAEpC0D,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAGT,SAASsK,KACP,IAAItK,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA32WQ,UA42WTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASpD,KAEpCyD,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EA93W6B,UAi4W7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAuOT,SAAS6M,KACP,IAAI7M,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAhmXQ,YAimXTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS/C,KAEpCoD,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EAnnX6B,YAsnX7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAmTT,SAAS6C,KACP,IAAI7C,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA35XQ,WA45XTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASzC,KAEpC8C,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EA96X6B,WAi7X7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAmTT,SAAS2O,KACP,IAAI3O,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAttYQ,SAutYTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASvC,KAEpC4C,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EAzuY6B,SA4uY7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAGT,SAAS8R,KACP,IAAI9R,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAzvYQ,aA0vYTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAStC,KAEpC2C,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EA5wY6B,aA+wY7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAGT,SAAS0O,KACP,IAAI1O,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA5xYQ,SA6xYTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASrC,KAEpC0C,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EA/yY6B,SAkzY7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAGT,SAASwO,KACP,IAAIxO,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA/zYQ,cAg0YTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASpC,KAEpCyC,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EAl1Y6B,cAq1Y7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EA2JT,SAASyO,KACP,IAAIzO,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA9+YQ,aA++YTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASlC,KAEpCuC,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EAjgZ6B,aAogZ7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EA6QT,SAASmP,KACP,IAAInP,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAlxZQ,sBAmxZTpN,EAAM6P,OAAOzC,GAAa,IAAIxqB,eAChC6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,IAC/BA,IAAe,KAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAShC,KAEpCqC,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EAryZ6B,sBAwyZ7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAuhBT,SAASgG,KACP,IAAIhG,EAUJ,OARsC,KAAlCtO,EAAMT,WAAW6N,KACnBkB,EAjnbW,IAknbXlB,OAEAkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAASjH,KAGjCmH,EAGT,SAASoE,KACP,IAAIpE,EAUJ,OARsC,KAAlCtO,EAAMT,WAAW6N,KACnBkB,EA9yaW,IA+yaXlB,OAEAkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAAS/B,KAGjCiC,EAGT,SAASsF,KACP,IAAItF,EAUJ,OARsC,KAAlCtO,EAAMT,WAAW6N,KACnBkB,EA1gcW,IA2gcXlB,OAEAkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAASpL,IAGjCsL,EAGT,SAASoF,KACP,IAAIpF,EAUJ,OARsC,KAAlCtO,EAAMT,WAAW6N,KACnBkB,EA99cS,IA+9cTlB,OAEAkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAAS9N,IAGjCgO,EAGT,SAASqF,KACP,IAAIrF,EAUJ,OARsC,KAAlCtO,EAAMT,WAAW6N,KACnBkB,EA1+cS,IA2+cTlB,OAEAkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAAS5N,IAGjC8N,EAGT,SAAS4T,KACP,IAAI5T,EAUJ,OARsC,KAAlCtO,EAAMT,WAAW6N,KACnBkB,EAvlcW,IAwlcXlB,OAEAkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAASxL,IAGjC0L,EAGT,SAAS6T,KACP,IAAI7T,EAUJ,OARsC,KAAlCtO,EAAMT,WAAW6N,KACnBkB,EA3mcW,IA4mcXlB,OAEAkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAAS3L,IAGjC6L,EAGT,SAAS0F,KACP,IAAI1F,EAUJ,OARsC,KAAlCtO,EAAMT,WAAW6N,KACnBkB,EAh4aW,IAi4aXlB,OAEAkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAAS9B,KAGjCgC,EAGT,SAAS8F,KACP,IAAI9F,EAUJ,OARsC,KAAlCtO,EAAMT,WAAW6N,KACnBkB,EA54aW,IA64aXlB,OAEAkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAAS7B,KAGjC+B,EAGT,SAASU,KACP,IAAIV,EAUJ,OARsC,KAAlCtO,EAAMT,WAAW6N,KACnBkB,EAx5aW,IAy5aXlB,OAEAkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAAS5B,KAGjC8B,EA+BT,SAAS6J,KACP,IAAI7J,EAOJ,OALAA,EA/BF,WACE,IAAIA,EAUJ,MA36aa,OAm6aTtO,EAAM6P,OAAOzC,GAAa,IAC5BkB,EAp6aW,KAq6aXlB,IAAe,IAEfkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAAS3B,KAGjC6B,EAoBF8T,MACMliB,IACToO,EAnBJ,WACE,IAAIA,EAUJ,MAv7aa,OA+6aTtO,EAAM6P,OAAOzC,GAAa,IAC5BkB,EAh7aW,KAi7aXlB,IAAe,IAEfkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAAS1B,KAGjC4B,EAQA+T,IAGA/T,EAGT,SAASE,KACP,IAAIF,EAAIG,EAOR,IALAH,EAAK,IACLG,EAAK6T,QACMpiB,IACTuO,EAAK8T,MAEA9T,IAAOvO,GACZoO,EAAGprB,KAAKurB,IACRA,EAAK6T,QACMpiB,IACTuO,EAAK8T,MAIT,OAAOjU,EAGT,SAAS2C,KACP,IAAI3C,EAAIG,EAOR,GALAH,EAAK,IACLG,EAAK6T,QACMpiB,IACTuO,EAAK8T,MAEH9T,IAAOvO,EACT,KAAOuO,IAAOvO,GACZoO,EAAGprB,KAAKurB,IACRA,EAAK6T,QACMpiB,IACTuO,EAAK8T,WAITjU,EAAKpO,EAGP,OAAOoO,EAGT,SAASiU,KACP,IAAIjU,EAUJ,OARAA,EAWF,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAExBN,EAAKlB,GA9/aQ,OA+/aTpN,EAAM6P,OAAOzC,GAAa,IAC5BqB,EAhgbW,KAigbXrB,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASzB,KAExC,GAAI8B,IAAOvO,EAAY,CAgCrB,IA/BAqO,EAAK,GACLG,EAAKtB,GACLuB,EAAKvB,GACLK,KAxgbW,OAygbPzN,EAAM6P,OAAOzC,GAAa,IAC5BwB,EA1gbS,KA2gbTxB,IAAe,IAEfwB,EAAK1O,EACmB,IAApBuN,IAAyBW,GAASxB,KAExCa,KACImB,IAAO1O,EACTyO,OAAK,GAELvB,GAAcuB,EACdA,EAAKzO,GAEHyO,IAAOzO,IACT0O,EAAK4T,QACMtiB,EAETwO,EADAC,EAAK,CAACA,EAAIC,IAOZxB,GAAcsB,EACdA,EAAKxO,GAEAwO,IAAOxO,GACZqO,EAAGrrB,KAAKwrB,GACRA,EAAKtB,GACLuB,EAAKvB,GACLK,KAxibS,OAyibLzN,EAAM6P,OAAOzC,GAAa,IAC5BwB,EA1ibO,KA2ibPxB,IAAe,IAEfwB,EAAK1O,EACmB,IAApBuN,IAAyBW,GAASxB,KAExCa,KACImB,IAAO1O,EACTyO,OAAK,GAELvB,GAAcuB,EACdA,EAAKzO,GAEHyO,IAAOzO,IACT0O,EAAK4T,QACMtiB,EAETwO,EADAC,EAAK,CAACA,EAAIC,IAOZxB,GAAcsB,EACdA,EAAKxO,GAGLqO,IAAOrO,GArkbA,OAskbLF,EAAM6P,OAAOzC,GAAa,IAC5BsB,EAvkbO,KAwkbPtB,IAAe,IAEfsB,EAAKxO,EACmB,IAApBuN,IAAyBW,GAASxB,KAEpC8B,IAAOxO,EAEToO,EADAG,EAAK,CAACA,EAAIF,EAAIG,IAGdtB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,EAGP,OAAOoO,EA/GFmU,MACMviB,IACToO,EAgHJ,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAExBN,EAAKlB,GAjmbQ,OAkmbTpN,EAAM6P,OAAOzC,GAAa,IAC5BqB,EAnmbW,KAombXrB,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASvB,KAExC,GAAI4B,IAAOvO,EAAY,CA0BrB,IAzBAqO,EAAK,GACLG,EAAKtB,GACLuB,EAAKvB,GACLK,KACAmB,EAAK8T,KACLjV,KACImB,IAAO1O,EACTyO,OAAK,GAELvB,GAAcuB,EACdA,EAAKzO,GAEHyO,IAAOzO,IACT0O,EAAK4T,QACMtiB,EAETwO,EADAC,EAAK,CAACA,EAAIC,IAOZxB,GAAcsB,EACdA,EAAKxO,GAEAwO,IAAOxO,GACZqO,EAAGrrB,KAAKwrB,GACRA,EAAKtB,GACLuB,EAAKvB,GACLK,KACAmB,EAAK8T,KACLjV,KACImB,IAAO1O,EACTyO,OAAK,GAELvB,GAAcuB,EACdA,EAAKzO,GAEHyO,IAAOzO,IACT0O,EAAK4T,QACMtiB,EAETwO,EADAC,EAAK,CAACA,EAAIC,IAOZxB,GAAcsB,EACdA,EAAKxO,GAGLqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,EAGP,OAAOoO,EA5LAqU,MACMziB,IACToO,EA6LN,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAExBN,EAAKlB,GACiC,KAAlCpN,EAAMT,WAAW6N,KACnBqB,EAhrbW,IAirbXrB,OAEAqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAStB,KAExC,GAAI2B,IAAOvO,EAAY,CA0BrB,IAzBAqO,EAAK,GACLG,EAAKtB,GACLuB,EAAKvB,GACLK,KACAmB,EAAK8T,KACLjV,KACImB,IAAO1O,EACTyO,OAAK,GAELvB,GAAcuB,EACdA,EAAKzO,GAEHyO,IAAOzO,IACT0O,EAAK4T,QACMtiB,EAETwO,EADAC,EAAK,CAACA,EAAIC,IAOZxB,GAAcsB,EACdA,EAAKxO,GAEAwO,IAAOxO,GACZqO,EAAGrrB,KAAKwrB,GACRA,EAAKtB,GACLuB,EAAKvB,GACLK,KACAmB,EAAK8T,KACLjV,KACImB,IAAO1O,EACTyO,OAAK,GAELvB,GAAcuB,EACdA,EAAKzO,GAEHyO,IAAOzO,IACT0O,EAAK4T,QACMtiB,EAETwO,EADAC,EAAK,CAACA,EAAIC,IAOZxB,GAAcsB,EACdA,EAAKxO,GAGLqO,IAAOrO,EAEToO,EADAG,EAAK,CAACA,EAAIF,IAGVnB,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,EAGP,OAAOoO,EAzQEsU,IAIFtU,EAwQT,SAASkU,KACP,IAAIlU,EAUJ,OARItO,EAAM9Y,OAASkmB,IACjBkB,EAAKtO,EAAMuf,OAAOnS,IAClBA,OAEAkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAASrB,KAGjCuB,EA0BT,SAASgU,KACP,IAAIhU,EAUJ,OARItB,GAAS7d,KAAK6Q,EAAMuf,OAAOnS,MAC7BkB,EAAKtO,EAAMuf,OAAOnS,IAClBA,OAEAkB,EAAKpO,EACmB,IAApBuN,IAAyBW,GAASnB,KAGjCqB,EAGT,SAASoU,KACP,IAAIpU,EAAIG,EAGR,IADAH,EA6BF,WACE,IAAIA,EAAIG,EAERH,EAAKlB,GACLK,KACIzN,EAAM9Y,OAASkmB,IACjBqB,EAAKzO,EAAMuf,OAAOnS,IAClBA,OAEAqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASrB,KAExCU,KACIgB,IAAOvO,EACToO,OAAK,GAELlB,GAAckB,EACdA,EAAKpO,GAGP,OAAOoO,EAjDFuU,MACM3iB,EAST,GARAoO,EAAK,GACDrH,GAAS9X,KAAK6Q,EAAMuf,OAAOnS,MAC7BqB,EAAKzO,EAAMuf,OAAOnS,IAClBA,OAEAqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASlH,KAEpCuH,IAAOvO,EACT,KAAOuO,IAAOvO,GACZoO,EAAGprB,KAAKurB,GACJxH,GAAS9X,KAAK6Q,EAAMuf,OAAOnS,MAC7BqB,EAAKzO,EAAMuf,OAAOnS,IAClBA,OAEAqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASlH,UAI1CoH,EAAKpO,EAIT,OAAOoO,EA0BT,SAASwU,KACP,IAAIxU,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKlB,IACLqB,EAAKsU,QACM7iB,EAAY,CA6BrB,IA5BAqO,EAAK,GACLG,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAK8D,QACMxS,IACT2O,EAAKL,QACMtO,IACT4O,EAAKiU,QACM7iB,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAKxO,GAEAwO,IAAOxO,GACZqO,EAAGrrB,KAAKwrB,GACRA,EAAKtB,IACLuB,EAAKH,QACMtO,IACT0O,EAAK8D,QACMxS,IACT2O,EAAKL,QACMtO,IACT4O,EAAKiU,QACM7iB,EAETwO,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB1B,GAAcsB,EACdA,EAAKxO,GAGLqO,IAAOrO,GACMoO,EAEfA,EADAG,EAAK9N,EAAQ8N,EAAIF,KAGjBnB,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,EAGP,OAAOoO,EAGT,SAASyU,KACP,IAAIzU,EAAIG,EAAIF,EAAIG,EAiDhB,OA/CAJ,EAAKlB,GACLqB,EAAKrB,IACLmB,EAAKkF,QACMvT,GACMkN,IAGbsB,GAFFA,GAv7bgE,IAAhCsU,GAu7blBzU,EAv7b+BhtB,gBAy7btC2e,OAEA,KAEIA,GACMuO,EAEfA,EADAF,EAAcA,IAGdnB,GAAcqB,EACdA,EAAKvO,KAGPkN,GAAcqB,EACdA,EAAKvO,GAEHuO,IAAOvO,IACTuO,EAAK,MAEHA,IAAOvO,IACTqO,EAAKC,QACMtO,IACTwO,EAAKwM,QACMhb,GACMoO,EAEfA,EADAG,EA98bO,SAASluB,EAAGP,GACnB,MAAO,CACLiF,WAAY1E,EACZ2E,WAAYlF,GA28bTijC,CAASxU,EAAIC,KAWtBtB,GAAckB,EACdA,EAAKpO,GAGAoO,EAGT,SAAS4M,KACP,IAAI5M,EAmBJ,OAjBAA,EAAK0J,QACM9X,IACToO,EAAKqK,QACMzY,IACToO,EAgBN,WACE,IAAIA,EAAIG,EAERH,EAAKlB,IACLqB,EAhxEF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAx3XQ,WAy3XTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS1C,KAEpC+C,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EA34X6B,WA84X7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EA6uEF4U,MACMhjB,IACMoO,EACfG,EAAKvB,GAASuB,IAIhB,OAFAH,EAAKG,EAzBI0U,MACMjjB,IACToO,EA4BR,WACE,IAAIA,EAAIG,EAERH,EAAKlB,IACLqB,EApnFF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA7jXQ,YA8jXTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAShD,KAEpCqD,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EAhlX6B,YAmlX7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAilFF8U,MACMljB,IACTuO,EA99EJ,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAzsXQ,UA0sXTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAAS5C,KAEpCiD,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EA5tX6B,UA+tX7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EA27EA+U,MACMnjB,IACTuO,EAl/DN,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAhpYQ,YAipYTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASxC,KAEpC6C,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EAnqY6B,YAsqY7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EA+8DEgV,IAGL7U,IAAOvO,IACMoO,EACfG,EAAKvB,GAASuB,IAIhB,OAFAH,EAAKG,EA3CM8U,MACMrjB,IACToO,EA8CV,WACE,IAAIA,EAAIG,EAAgBG,EAAIC,EAE5BP,EAAKlB,IACLqB,EAAKwO,QACM/c,IACTuO,EAAK2R,QACMlgB,IACTuO,EAAKuO,QACM9c,IACTuO,EAAKqO,MAIX,GAAIrO,IAAOvO,EAET,GADKsO,OACMtO,EAET,GADKwT,OACMxT,EAET,GADKsO,OACMtO,EAAY,CASrB,GARA0O,EAAK,GACDxH,GAASjY,KAAK6Q,EAAMuf,OAAOnS,MAC7ByB,EAAK7O,EAAMuf,OAAOnS,IAClBA,OAEAyB,EAAK3O,EACmB,IAApBuN,IAAyBW,GAAS/G,KAEpCwH,IAAO3O,EACT,KAAO2O,IAAO3O,GACZ0O,EAAG1rB,KAAK2rB,GACJzH,GAASjY,KAAK6Q,EAAMuf,OAAOnS,MAC7ByB,EAAK7O,EAAMuf,OAAOnS,IAClBA,OAEAyB,EAAK3O,EACmB,IAApBuN,IAAyBW,GAAS/G,UAI1CuH,EAAK1O,EAEH0O,IAAO1O,IACT2O,EAAKL,QACMtO,GACJyT,OACMzT,GACMoO,EACfG,EAnkcuB,CAAE7pB,SAmkcX6pB,EAnkcwBvnB,OAAQ+5B,SAmkc5BrS,EAnkcuCjrB,KAAK,IAAK,KAokcnE2qB,EAAKG,IAUTrB,GAAckB,EACdA,EAAKpO,QAGPkN,GAAckB,EACdA,EAAKpO,OAGPkN,GAAckB,EACdA,EAAKpO,OAGPkN,GAAckB,EACdA,EAAKpO,OAGPkN,GAAckB,EACdA,EAAKpO,EAEHoO,IAAOpO,IACToO,EAAKlB,IACLqB,EAAKwO,QACM/c,IACTuO,EAAK2R,QACMlgB,IACTuO,EAAKuO,QACM9c,IACTuO,EAAKqO,MAIPrO,IAAOvO,IACMoO,EACfG,EAAKvB,GAASuB,IAEhBH,EAAKG,GAGP,OAAOH,EAhJMkV,MACMtjB,IACToO,EAiJZ,WACE,IAAIA,EAAIG,EAERH,EAAKlB,IACLqB,EA36FF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GA94WQ,UA+4WTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASnD,KAEpCwD,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EAj6W6B,UAo6W7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAw4FFmV,MACMvjB,IACTuO,EAv4FJ,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAj7WQ,SAk7WTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASlD,KAEpCuD,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EAp8W6B,SAu8W7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EAo2FAoV,MACMxjB,IACTuO,EA7zFN,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKlB,GAv/WQ,cAw/WTpN,EAAM6P,OAAOzC,GAAa,GAAGxqB,eAC/B6rB,EAAKzO,EAAM6P,OAAOzC,GAAa,GAC/BA,IAAe,IAEfqB,EAAKvO,EACmB,IAApBuN,IAAyBW,GAASjD,KAEpCsD,IAAOvO,GACTqO,EAAKnB,GACLK,KACAiB,EAAKoB,KACLrC,KACIiB,IAAOxO,EACTqO,OAAK,GAELnB,GAAcmB,EACdA,EAAKrO,GAEHqO,IAAOrO,GACMoO,EAEfA,EADAG,EA1gX6B,cA6gX7BrB,GAAckB,EACdA,EAAKpO,KAGPkN,GAAckB,EACdA,EAAKpO,GAGAoO,EA0xFEqV,IAGLlV,IAAOvO,IACMoO,EACfG,EAAKvB,GAASuB,IAIhB,OAFAH,EAAKG,EAhKUmV,IAORtV,EA8JT,SAASqK,KACP,IAAIrK,EAAIG,EAAgBG,EAiDxB,OA/CAN,EAAKlB,IACLqB,EAAKmK,QACM1Y,GACJsO,OACMtO,GACJgiB,OACMhiB,GACJsO,OACMtO,IACT0O,EAAKkU,QACM5iB,GACJsO,OACMtO,GACJiiB,OACMjiB,GACMoO,EAEfA,EADAG,EAAKtB,GAASsB,EAAIG,KA2B9BxB,GAAckB,EACdA,EAAKpO,GAGAoO,EAGT,SAAS0J,KACP,IAAI1J,EAAIG,EAAgBG,EAiDxB,OA/CAN,EAAKlB,IACLqB,EAAK0C,QACMjR,GACJsO,OACMtO,GACJgiB,OACMhiB,GACJsO,OACMtO,IACT0O,EAAKkU,QACM5iB,GACJsO,OACMtO,GACJiiB,OACMjiB,GACMoO,EAEfA,EADAG,EAAKtB,GAASsB,EAAIG,KA2B9BxB,GAAckB,EACdA,EAAKpO,GAGAoO,EAIP,MAAMlL,GAAc,CAClB,OAAS,EACT,OAAS,EACT,KAAO,EACP,KAAO,EACP,KAAO,EACP,IAAM,EACN,KAAO,EAEP,SAAW,EACX,IAAM,EAEN,MAAQ,EACR,MAAQ,EACR,QAAU,EACV,OAAS,EACT,UAAY,EACZ,cAAgB,EAChB,cAAgB,EAChB,mBAAqB,EACrB,cAAgB,EAEhB,QAAU,EACV,MAAQ,EACR,UAAY,EACZ,MAAQ,EAER,MAAQ,EACR,KAAO,EACP,QAAU,EACV,SAAW,EAEX,OAAS,EACT,MAAQ,EACR,MAAQ,EACR,KAAO,EAEP,OAAS,EAET,QAAU,EAEV,IAAM,EACN,OAAS,EACT,QAAU,EACV,MAAQ,EACR,IAAM,EAEN,MAAQ,EACR,MAAQ,EAER,KAAO,EAEP,MAAQ,EACR,MAAQ,EACR,OAAS,EACT,cAAgB,EAEhB,KAAO,EACP,MAAQ,EAER,IAAM,EACN,IAAM,EACN,OAAS,EACT,OAAS,EAET,WAAa,EAEb,WAAa,EACb,QAAU,EACV,MAAQ,EACR,OAAS,EAET,QAAU,EACV,cAAgB,EAChB,KAAO,EACP,MAAQ,EACR,aAAe,EAEf,OAAS,EACT,MAAQ,EACR,MAAQ,EACR,UAAY,EACZ,MAAQ,EAER,OAAS,EACT,QAAU,EACV,OAAS,EAET,QAAU,EAEV,QAAU,EACV,MAAQ,EACR,MAAQ,EACR,OAAS,EACT,OAAS,EAET,QAAU,EACV,SAAW,EACX,OAAS,EACT,SAAW,EACX,cAAgB,EAChB,QAAU,GAGN4f,GAAa,CACjB,MAAQ,EACR,MAAQ,EACR,MAAQ,EACR,UAAY,EACZ,SAAW,EACX,OAAS,EACT,SAAW,EACX,QAAU,EACV,MAAQ,EACR,WAAa,EACb,OAAS,EACT,QAAU,GAGZ,SAASvK,GAAgB/c,EAAIqb,GAC3B,MAAO,CACL91B,KAAM,aACNe,SAAU0Z,EACVvZ,KAAM40B,GAIV,SAASh1B,GAAiB2Z,EAAIzZ,EAAMC,GAClC,MAAO,CACLjB,KAAM,cACNe,SAAU0Z,EACVzZ,KAAMA,EACNC,MAAOA,GAIX,SAASq/B,GAASsC,GAChB,MAAMC,EAAkBhmB,EAAOimB,OAAOC,kBAEtC,QADYlmB,EAAO+lB,GACTC,GAIZ,SAASjjB,GAAWD,EAAM9O,EAAMmyB,EAAK,GACnC,MAAMjhC,EAAS,CAAC4d,GAChB,IAAK,IAAIliB,EAAI,EAAGA,EAAIoT,EAAK5K,OAAQxI,WACxBoT,EAAKpT,GAAGulC,GAAIrmB,iBACZ9L,EAAKpT,GAAGulC,GAAIpmB,WACnB7a,EAAOE,KAAK4O,EAAKpT,GAAGulC,IAEtB,OAAOjhC,EAGT,SAASmf,GAAsBvB,EAAM9O,GACnC,IAAI9O,EAAS4d,EACb,IAAK,IAAIliB,EAAI,EAAGA,EAAIoT,EAAK5K,OAAQxI,IAC/BsE,EAASjB,GAAiB+P,EAAKpT,GAAG,GAAIsE,EAAQ8O,EAAKpT,GAAG,IAExD,OAAOsE,EAGT,SAASkhC,GAAgB14B,GACvB,MAAMqG,EAAQyP,GAAW9V,GACzB,OAAIqG,IACArG,GACG,MAGT,SAAS+V,GAAqB1D,GAC5B,MAAMsmB,EAAiB,IAAIC,IAE3B,IAAI,IAAI13B,KAAUmR,EAAW7Z,OAAQ,CACnC,MAAM0P,EAAahH,EAAO23B,MAFT,MAGjB,IAAK3wB,EAAY,CACfywB,EAAe1iB,IAAI/U,GACnB,MAEEgH,GAAcA,EAAW,KAAIA,EAAW,GAAKwwB,GAAgBxwB,EAAW,KAC5EywB,EAAe1iB,IAAI/N,EAAW/P,KARb,OAUnB,OAAOhC,MAAM6R,KAAK2wB,GAoCpB,MAAMvmB,GAAY,IAAIwmB,IAChBvmB,GAAa,IAAIumB,IACjB9iB,GAAa,GAKrB,IAFArB,EAAaI,OAEMH,GAAckN,KAAgBpN,EAAM9Y,OACrD,OAAO+Y,EAMP,MAJIA,IAAeC,GAAckN,GAAcpN,EAAM9Y,QACnDknB,GA15cK,CAAEntB,KAAM,QA65cTotB,GACJb,GACAD,GAAiBvN,EAAM9Y,OAAS8Y,EAAMuf,OAAOhS,IAAkB,KAC/DA,GAAiBvN,EAAM9Y,OACnB6mB,GAAoBR,GAAgBA,GAAiB,GACrDQ,GAAoBR,GAAgBA,Q,8DCvzf9C,wHAQI+W,GAAUA,EAAO3lC,SACnB2lC,EAAO3lC,OAAO4lC,cAAgB,CAC5B1nB,WACA2nB,U,gCCXJ,IAAIvR,EAGJA,EAAI,WACH,OAAOnW,KADJ,GAIJ,IAECmW,EAAIA,GAAK,IAAIwR,SAAS,cAAb,GACR,MAAO1N,GAEc,iBAAXp4B,SAAqBs0B,EAAIt0B,QAOrCL,EAAOD,QAAU40B,G,iBCnBjB,gCACI,aAEA,IAAIyR,EAAO,IAEPC,EAAU,iBACVC,EAAcC,EAAaF,GAG3BG,EAAyC,mBAAXhnB,OAElC,SAASinB,EAAQC,EAAGC,EAAOC,EAAUC,GACjC,YAAiB,IAANH,EAA0BD,EAAQ,QACxB,IAAVE,IAAyC,KAAVA,GAAiBC,GAA2BE,EAAUJ,EAAGC,EAAOC,EAAUC,GAC7GE,EAAWL,GAGtB,SAASM,EAAWvlC,EAAOiiC,GACvBllB,KAAK/c,MAAQA,EACb+c,KAAKklB,KAAOA,EACZllB,KAAKyoB,SAAU,EAInB,SAASC,EAAazlC,GAClB+c,KAAK/c,MAAQA,EACb+c,KAAKklB,KAAOjiC,EAAQ,EACpB+c,KAAKyoB,SAAU,EAInB,SAASE,EAAa1lC,GAClB+c,KAAK/c,MAAQA,EAIjB,SAAS2lC,EAAUnlC,GACf,OAAQokC,EAAUpkC,GAAKA,EAAIokC,EAG/B,SAASE,EAAatkC,GAClB,OAAIA,EAAI,IACG,CAACA,GACRA,EAAI,KACG,CAACA,EAAI,IAAKolC,KAAKC,MAAMrlC,EAAI,MAC7B,CAACA,EAAI,IAAKolC,KAAKC,MAAMrlC,EAAI,KAAO,IAAKolC,KAAKC,MAAMrlC,EAAI,OAG/D,SAASslC,EAAaC,GAClB7oB,EAAK6oB,GACL,IAAI5+B,EAAS4+B,EAAI5+B,OACjB,GAAIA,EAAS,GAAK6+B,EAAWD,EAAKlB,GAAe,EAC7C,OAAQ19B,GACJ,KAAK,EAAG,OAAO,EACf,KAAK,EAAG,OAAO4+B,EAAI,GACnB,KAAK,EAAG,OAAOA,EAAI,GAAKA,EAAI,GAAKpB,EACjC,QAAS,OAAOoB,EAAI,IAAMA,EAAI,GAAKA,EAAI,GAAKpB,GAAQA,EAG5D,OAAOoB,EAGX,SAAS7oB,EAAK+nB,GAEV,IADA,IAAItmC,EAAIsmC,EAAE99B,OACQ,IAAX89B,IAAItmC,KACXsmC,EAAE99B,OAASxI,EAAI,EAGnB,SAASsnC,EAAY9+B,GAGjB,IAFA,IAAI++B,EAAI,IAAItkC,MAAMuF,GACdxI,GAAK,IACAA,EAAIwI,GACT++B,EAAEvnC,GAAK,EAEX,OAAOunC,EAGX,SAAShyB,EAAS1T,GACd,OAAIA,EAAI,EAAUolC,KAAKC,MAAMrlC,GACtBolC,KAAKO,KAAK3lC,GAGrB,SAASkhB,EAAIhjB,EAAG0nC,GACZ,IAKIC,EAAK1nC,EALL2nC,EAAM5nC,EAAEyI,OACRo/B,EAAMH,EAAEj/B,OACRtH,EAAI,IAAI+B,MAAM0kC,GACdE,EAAQ,EACRC,EAAO9B,EAEX,IAAKhmC,EAAI,EAAGA,EAAI4nC,EAAK5nC,IAEjB6nC,GADAH,EAAM3nC,EAAEC,GAAKynC,EAAEznC,GAAK6nC,IACLC,EAAO,EAAI,EAC1B5mC,EAAElB,GAAK0nC,EAAMG,EAAQC,EAEzB,KAAO9nC,EAAI2nC,GAEPE,GADAH,EAAM3nC,EAAEC,GAAK6nC,KACGC,EAAO,EAAI,EAC3B5mC,EAAElB,KAAO0nC,EAAMG,EAAQC,EAG3B,OADID,EAAQ,GAAG3mC,EAAEsD,KAAKqjC,GACf3mC,EAGX,SAAS6mC,EAAOhoC,EAAG0nC,GACf,OAAI1nC,EAAEyI,QAAUi/B,EAAEj/B,OAAeua,EAAIhjB,EAAG0nC,GACjC1kB,EAAI0kB,EAAG1nC,GAGlB,SAASioC,EAASjoC,EAAG8nC,GACjB,IAGIH,EAAK1nC,EAHLK,EAAIN,EAAEyI,OACNtH,EAAI,IAAI+B,MAAM5C,GACdynC,EAAO9B,EAEX,IAAKhmC,EAAI,EAAGA,EAAIK,EAAGL,IACf0nC,EAAM3nC,EAAEC,GAAK8nC,EAAOD,EACpBA,EAAQZ,KAAKC,MAAMQ,EAAMI,GACzB5mC,EAAElB,GAAK0nC,EAAMG,EAAQC,EACrBD,GAAS,EAEb,KAAOA,EAAQ,GACX3mC,EAAElB,KAAO6nC,EAAQC,EACjBD,EAAQZ,KAAKC,MAAMW,EAAQC,GAE/B,OAAO5mC,EAoCX,SAAS+mC,EAASloC,EAAG0nC,GACjB,IAKIznC,EAAGkoC,EALHC,EAAMpoC,EAAEyI,OACR4/B,EAAMX,EAAEj/B,OACRtH,EAAI,IAAI+B,MAAMklC,GACdE,EAAS,EAGb,IAAKroC,EAAI,EAAGA,EAAIooC,EAAKpoC,KACjBkoC,EAAanoC,EAAEC,GAAKqoC,EAASZ,EAAEznC,IACd,GACbkoC,GALGlC,IAMHqC,EAAS,GACNA,EAAS,EAChBnnC,EAAElB,GAAKkoC,EAEX,IAAKloC,EAAIooC,EAAKpoC,EAAImoC,EAAKnoC,IAAK,CAExB,MADAkoC,EAAanoC,EAAEC,GAAKqoC,GACH,GACZ,CACDnnC,EAAElB,KAAOkoC,EACT,MAHgBA,GAZblC,IAiBP9kC,EAAElB,GAAKkoC,EAEX,KAAOloC,EAAImoC,EAAKnoC,IACZkB,EAAElB,GAAKD,EAAEC,GAGb,OADAue,EAAKrd,GACEA,EAmBX,SAASonC,EAAcvoC,EAAG0nC,EAAGnE,GACzB,IAIItjC,EAAGkoC,EAJH7nC,EAAIN,EAAEyI,OACNtH,EAAI,IAAI+B,MAAM5C,GACdwnC,GAASJ,EAGb,IAAKznC,EAAI,EAAGA,EAAIK,EAAGL,IACfkoC,EAAanoC,EAAEC,GAAK6nC,EACpBA,EAAQZ,KAAKC,MAAMgB,EAJZlC,KAKPkC,GALOlC,IAMP9kC,EAAElB,GAAKkoC,EAAa,EAAIA,EANjBlC,IAMqCkC,EAGhD,MAAiB,iBADjBhnC,EAAIimC,EAAajmC,KAEToiC,IAAMpiC,GAAKA,GACR,IAAI4lC,EAAa5lC,IACnB,IAAI0lC,EAAW1lC,EAAGoiC,GA0D/B,SAASiF,EAAaxoC,EAAG0nC,GACrB,IAKIe,EAASX,EAAO7nC,EAAGyoC,EALnBN,EAAMpoC,EAAEyI,OACR4/B,EAAMX,EAAEj/B,OAERtH,EAAIomC,EADAa,EAAMC,GAId,IAAKpoC,EAAI,EAAGA,EAAImoC,IAAOnoC,EAAG,CACtByoC,EAAM1oC,EAAEC,GACR,IAAK,IAAI+gB,EAAI,EAAGA,EAAIqnB,IAAOrnB,EAEvBynB,EAAUC,EADJhB,EAAE1mB,GACc7f,EAAElB,EAAI+gB,GAC5B8mB,EAAQZ,KAAKC,MAAMsB,EAPhBxC,KAQH9kC,EAAElB,EAAI+gB,GAAKynB,EARRxC,IAQkB6B,EACrB3mC,EAAElB,EAAI+gB,EAAI,IAAM8mB,EAIxB,OADAtpB,EAAKrd,GACEA,EAGX,SAASwnC,EAAc3oC,EAAG0nC,GACtB,IAIIe,EAASxoC,EAJTK,EAAIN,EAAEyI,OACNtH,EAAI,IAAI+B,MAAM5C,GACdynC,EAAO9B,EACP6B,EAAQ,EAEZ,IAAK7nC,EAAI,EAAGA,EAAIK,EAAGL,IACfwoC,EAAUzoC,EAAEC,GAAKynC,EAAII,EACrBA,EAAQZ,KAAKC,MAAMsB,EAAUV,GAC7B5mC,EAAElB,GAAKwoC,EAAUX,EAAQC,EAE7B,KAAOD,EAAQ,GACX3mC,EAAElB,KAAO6nC,EAAQC,EACjBD,EAAQZ,KAAKC,MAAMW,EAAQC,GAE/B,OAAO5mC,EAGX,SAASynC,EAAUpB,EAAG1lC,GAElB,IADA,IAAIX,EAAI,GACDW,KAAM,GAAGX,EAAEsD,KAAK,GACvB,OAAOtD,EAAE0nC,OAAOrB,GAmDpB,SAASsB,EAAsB9oC,EAAG0nC,EAAGnE,GACjC,OACW,IAAIsD,EADX7mC,EAAIimC,EACkB0C,EAAcjB,EAAG1nC,GAErBwoC,EAAad,EAAGtB,EAAapmC,IAFJujC,GA0BnD,SAASwF,EAAO/oC,GAEZ,IAGIyoC,EAASX,EAAO7nC,EAAGyoC,EAHnBpoC,EAAIN,EAAEyI,OACNtH,EAAIomC,EAAYjnC,EAAIA,GAGxB,IAAKL,EAAI,EAAGA,EAAIK,EAAGL,IAAK,CAEpB6nC,EAAQ,GADRY,EAAM1oC,EAAEC,IACUyoC,EAClB,IAAK,IAAI1nB,EAAI/gB,EAAG+gB,EAAI1gB,EAAG0gB,IAEnBynB,EAAeC,EADT1oC,EAAEghB,GACE,EAAkB7f,EAAElB,EAAI+gB,GAAK8mB,EACvCA,EAAQZ,KAAKC,MAAMsB,EARhBxC,KASH9kC,EAAElB,EAAI+gB,GAAKynB,EATRxC,IASkB6B,EAEzB3mC,EAAElB,EAAIK,GAAKwnC,EAGf,OADAtpB,EAAKrd,GACEA,EA6GX,SAAS6nC,EAAY1nC,EAAO2nC,GACxB,IAGIhpC,EAAGipC,EAAGC,EAAWC,EAHjB3gC,EAASnH,EAAMmH,OACf4gC,EAAW9B,EAAY9+B,GAI3B,IADA0gC,EAAY,EACPlpC,EAAIwI,EAAS,EAAGxI,GAAK,IAAKA,EAG3BkpC,GAFAC,EAJOnD,IAIGkD,EAAmB7nC,EAAMrB,KACnCipC,EAAI1zB,EAAS4zB,EAAUH,IACGA,EAC1BI,EAASppC,GAAS,EAAJipC,EAElB,MAAO,CAACG,EAAsB,EAAZF,GAGtB,SAASG,EAAUC,EAAMhD,GACrB,IAAIjlC,EAAOQ,EAAI8kC,EAAWL,GAC1B,GAAIF,EACA,MAAO,CAAC,IAAIW,EAAauC,EAAKjoC,MAAQQ,EAAER,OAAQ,IAAI0lC,EAAauC,EAAKjoC,MAAQQ,EAAER,QAEpF,IACI+nC,EADArpC,EAAIupC,EAAKjoC,MAAOomC,EAAI5lC,EAAER,MAE1B,GAAU,IAANomC,EAAS,MAAM,IAAIrkC,MAAM,yBAC7B,GAAIkmC,EAAKzC,QACL,OAAIhlC,EAAEglC,QACK,CAAC,IAAIC,EAAavxB,EAASxV,EAAI0nC,IAAK,IAAIX,EAAa/mC,EAAI0nC,IAE7D,CAACpB,EAAQ,GAAIiD,GAExB,GAAIznC,EAAEglC,QAAS,CACX,GAAU,IAANY,EAAS,MAAO,CAAC6B,EAAMjD,EAAQ,IACnC,IAAU,GAANoB,EAAS,MAAO,CAAC6B,EAAKC,SAAUlD,EAAQ,IAC5C,IAAImD,EAAMvC,KAAKuC,IAAI/B,GACnB,GAAI+B,EAAMxD,EAAM,CAEZoD,EAAWjC,GADX9lC,EAAQ0nC,EAAYhpC,EAAGypC,IACO,IAC9B,IAAIN,EAAY7nC,EAAM,GAEtB,OADIioC,EAAKhG,OAAM4F,GAAaA,GACJ,iBAAbE,GACHE,EAAKhG,OAASzhC,EAAEyhC,OAAM8F,GAAYA,GAC/B,CAAC,IAAItC,EAAasC,GAAW,IAAItC,EAAaoC,KAElD,CAAC,IAAItC,EAAWwC,EAAUE,EAAKhG,OAASzhC,EAAEyhC,MAAO,IAAIwD,EAAaoC,IAE7EzB,EAAItB,EAAaqD,GAErB,IAAIC,EAAapC,EAAWtnC,EAAG0nC,GAC/B,IAAoB,IAAhBgC,EAAmB,MAAO,CAACpD,EAAQ,GAAIiD,GAC3C,GAAmB,IAAfG,EAAkB,MAAO,CAACpD,EAAQiD,EAAKhG,OAASzhC,EAAEyhC,KAAO,GAAK,GAAI+C,EAAQ,IAO9E+C,GAHI/nC,EADAtB,EAAEyI,OAASi/B,EAAEj/B,QAAU,IA/I/B,SAAiBzI,EAAG0nC,GAChB,IASIiC,EAAet3B,EAAOy1B,EAAOQ,EAAQroC,EAAGK,EAAG4oC,EAT3Cd,EAAMpoC,EAAEyI,OACR4/B,EAAMX,EAAEj/B,OACRs/B,EAAO9B,EACP1hC,EAASgjC,EAAYG,EAAEj/B,QACvBmhC,EAA8BlC,EAAEW,EAAM,GAEtCY,EAAS/B,KAAKO,KAAKM,GAAQ,EAAI6B,IAC/BT,EAAYR,EAAc3oC,EAAGipC,GAC7BG,EAAUT,EAAcjB,EAAGuB,GAK/B,IAHIE,EAAU1gC,QAAU2/B,GAAKe,EAAU1kC,KAAK,GAC5C2kC,EAAQ3kC,KAAK,GACbmlC,EAA8BR,EAAQf,EAAM,GACvCh2B,EAAQ+1B,EAAMC,EAAKh2B,GAAS,EAAGA,IAAS,CASzC,IARAs3B,EAAgB5B,EAAO,EACnBoB,EAAU92B,EAAQg2B,KAASuB,IAC3BD,EAAgBzC,KAAKC,OAAOgC,EAAU92B,EAAQg2B,GAAON,EAAOoB,EAAU92B,EAAQg2B,EAAM,IAAMuB,IAG9F9B,EAAQ,EACRQ,EAAS,EACThoC,EAAI8oC,EAAQ3gC,OACPxI,EAAI,EAAGA,EAAIK,EAAGL,IACf6nC,GAAS6B,EAAgBP,EAAQnpC,GACjCipC,EAAIhC,KAAKC,MAAMW,EAAQC,GACvBO,GAAUa,EAAU92B,EAAQpS,IAAM6nC,EAAQoB,EAAInB,GAC9CD,EAAQoB,EACJZ,EAAS,GACTa,EAAU92B,EAAQpS,GAAKqoC,EAASP,EAChCO,GAAU,IAEVa,EAAU92B,EAAQpS,GAAKqoC,EACvBA,EAAS,GAGjB,KAAkB,IAAXA,GAAc,CAGjB,IAFAqB,GAAiB,EACjB7B,EAAQ,EACH7nC,EAAI,EAAGA,EAAIK,EAAGL,KACf6nC,GAASqB,EAAU92B,EAAQpS,GAAK8nC,EAAOqB,EAAQnpC,IACnC,GACRkpC,EAAU92B,EAAQpS,GAAK6nC,EAAQC,EAC/BD,EAAQ,IAERqB,EAAU92B,EAAQpS,GAAK6nC,EACvBA,EAAQ,GAGhBQ,GAAUR,EAEdvjC,EAAO8N,GAASs3B,EAIpB,OADAR,EAAYH,EAAYG,EAAWF,GAAQ,GACpC,CAAC7B,EAAa7iC,GAAS6iC,EAAa+B,IAyF/BU,CAAQ7pC,EAAG0nC,GAtF3B,SAAiB1nC,EAAG0nC,GAQhB,IANA,IAKIoC,EAAOC,EAAMC,EAAOC,EAAOx6B,EAL3B24B,EAAMpoC,EAAEyI,OACR4/B,EAAMX,EAAEj/B,OACRlE,EAAS,GACT2lC,EAAO,GAGJ9B,GAGH,GAFA8B,EAAKtnB,QAAQ5iB,IAAIooC,IACjB5pB,EAAK0rB,GACD5C,EAAW4C,EAAMxC,GAAK,EACtBnjC,EAAOE,KAAK,OADhB,CAKAulC,EAVO/D,IAUCiE,GADRH,EAAOG,EAAKzhC,QACQ,GAAYyhC,EAAKH,EAAO,GAC5CE,EAXOhE,IAWCyB,EAAEW,EAAM,GAAYX,EAAEW,EAAM,GAChC0B,EAAO1B,IACP2B,EAbG/D,KAaM+D,EAAQ,IAErBF,EAAQ5C,KAAKO,KAAKuC,EAAQC,GAC1B,EAAG,CAEC,GAAI3C,EADJ73B,EAAQk5B,EAAcjB,EAAGoC,GACHI,IAAS,EAAG,MAClCJ,UACKA,GACTvlC,EAAOE,KAAKqlC,GACZI,EAAOhC,EAASgC,EAAMz6B,GAG1B,OADAlL,EAAO4lC,UACA,CAAC/C,EAAa7iC,GAAS6iC,EAAa8C,IAwD9BE,CAAQpqC,EAAG0nC,IAEP,GACjB,IAAI2C,EAAQd,EAAKhG,OAASzhC,EAAEyhC,KACxB+G,EAAMhpC,EAAM,GACZipC,EAAQhB,EAAKhG,KASjB,MARwB,iBAAb8F,GACHgB,IAAOhB,GAAYA,GACvBA,EAAW,IAAItC,EAAasC,IACzBA,EAAW,IAAIxC,EAAWwC,EAAUgB,GACxB,iBAARC,GACHC,IAAOD,GAAOA,GAClBA,EAAM,IAAIvD,EAAauD,IACpBA,EAAM,IAAIzD,EAAWyD,EAAKC,GAC1B,CAAClB,EAAUiB,GAwGtB,SAAShD,EAAWtnC,EAAG0nC,GACnB,GAAI1nC,EAAEyI,SAAWi/B,EAAEj/B,OACf,OAAOzI,EAAEyI,OAASi/B,EAAEj/B,OAAS,GAAK,EAEtC,IAAK,IAAIxI,EAAID,EAAEyI,OAAS,EAAGxI,GAAK,EAAGA,IAC/B,GAAID,EAAEC,KAAOynC,EAAEznC,GAAI,OAAOD,EAAEC,GAAKynC,EAAEznC,GAAK,GAAK,EAEjD,OAAO,EAoLX,SAASuqC,EAAajE,GAClB,IAAIzkC,EAAIykC,EAAEkD,MACV,OAAI3nC,EAAE2oC,cACF3oC,EAAE4oC,OAAO,IAAM5oC,EAAE4oC,OAAO,IAAM5oC,EAAE4oC,OAAO,OACvC5oC,EAAE6oC,UAAY7oC,EAAE8oC,cAAc,IAAM9oC,EAAE8oC,cAAc,QACpD9oC,EAAE+oC,OAAO,UAAb,IAIJ,SAASC,EAAgBhpC,EAAG9B,GAKxB,IAJA,IAGIW,EAAMV,EAAGunC,EAHTuD,EAAQjpC,EAAEkpC,OACVtD,EAAIqD,EACJ5pC,EAAI,EAEDumC,EAAEiD,UAAUjD,EAAIA,EAAEuD,OAAO,GAAI9pC,IACpC+pC,EAAM,IAAKjrC,EAAI,EAAGA,EAAID,EAAEyI,OAAQxI,IAC5B,IAAI6B,EAAE+oC,OAAO7qC,EAAEC,OACfunC,EAAI2D,EAAOnrC,EAAEC,IAAImrC,OAAO1D,EAAG5lC,IACrB2oC,WAAYjD,EAAEkD,OAAOK,GAA3B,CACA,IAAKpqC,EAAIQ,EAAI,EAAQ,GAALR,EAAQA,IAAK,CAEzB,IADA6mC,EAAIA,EAAEuB,SAASuB,IAAIxoC,IACb2oC,SAAU,OAAO,EACvB,GAAIjD,EAAEkD,OAAOK,GAAQ,SAASG,EAElC,OAAO,EAEX,OAAO,EA13BXrE,EAAW5kC,UAAYlB,OAAOY,OAAO2kC,EAAQrkC,WAO7C8kC,EAAa9kC,UAAYlB,OAAOY,OAAO2kC,EAAQrkC,WAK/C+kC,EAAa/kC,UAAYlB,OAAOY,OAAO2kC,EAAQrkC,WA4F/C4kC,EAAW5kC,UAAU+gB,IAAM,SAAUujB,GACjC,IAAIzkC,EAAI8kC,EAAWL,GACnB,GAAIloB,KAAKklB,OAASzhC,EAAEyhC,KAChB,OAAOllB,KAAK6pB,SAASpmC,EAAE0nC,UAE3B,IAAIxpC,EAAIqe,KAAK/c,MAAOomC,EAAI5lC,EAAER,MAC1B,OAAIQ,EAAEglC,QACK,IAAID,EAAWoB,EAASjoC,EAAGknC,KAAKuC,IAAI/B,IAAKrpB,KAAKklB,MAElD,IAAIsD,EAAWmB,EAAOhoC,EAAG0nC,GAAIrpB,KAAKklB,OAE7CsD,EAAW5kC,UAAUopC,KAAOxE,EAAW5kC,UAAU+gB,IAEjD+jB,EAAa9kC,UAAU+gB,IAAM,SAAUujB,GACnC,IAAIzkC,EAAI8kC,EAAWL,GACfvmC,EAAIqe,KAAK/c,MACb,GAAItB,EAAI,IAAM8B,EAAEyhC,KACZ,OAAOllB,KAAK6pB,SAASpmC,EAAE0nC,UAE3B,IAAI9B,EAAI5lC,EAAER,MACV,GAAIQ,EAAEglC,QAAS,CACX,GAAIG,EAAUjnC,EAAI0nC,GAAI,OAAO,IAAIX,EAAa/mC,EAAI0nC,GAClDA,EAAItB,EAAac,KAAKuC,IAAI/B,IAE9B,OAAO,IAAIb,EAAWoB,EAASP,EAAGR,KAAKuC,IAAIzpC,IAAKA,EAAI,IAExD+mC,EAAa9kC,UAAUopC,KAAOtE,EAAa9kC,UAAU+gB,IAErDgkB,EAAa/kC,UAAU+gB,IAAM,SAAUujB,GACnC,OAAO,IAAIS,EAAa3oB,KAAK/c,MAAQslC,EAAWL,GAAGjlC,QAEvD0lC,EAAa/kC,UAAUopC,KAAOrE,EAAa/kC,UAAU+gB,IAoErD6jB,EAAW5kC,UAAUimC,SAAW,SAAU3B,GACtC,IAAIzkC,EAAI8kC,EAAWL,GACnB,GAAIloB,KAAKklB,OAASzhC,EAAEyhC,KAChB,OAAOllB,KAAK2E,IAAIlhB,EAAE0nC,UAEtB,IAAIxpC,EAAIqe,KAAK/c,MAAOomC,EAAI5lC,EAAER,MAC1B,OAAIQ,EAAEglC,QACKyB,EAAcvoC,EAAGknC,KAAKuC,IAAI/B,GAAIrpB,KAAKklB,MA1ClD,SAAqBvjC,EAAG0nC,EAAGnE,GACvB,IAAIjiC,EAQJ,OAPIgmC,EAAWtnC,EAAG0nC,IAAM,EACpBpmC,EAAQ4mC,EAASloC,EAAG0nC,IAEpBpmC,EAAQ4mC,EAASR,EAAG1nC,GACpBujC,GAAQA,GAGS,iBADrBjiC,EAAQ8lC,EAAa9lC,KAEbiiC,IAAMjiC,GAASA,GACZ,IAAIylC,EAAazlC,IAErB,IAAIulC,EAAWvlC,EAAOiiC,GA8BtB+H,CAAYtrC,EAAG0nC,EAAGrpB,KAAKklB,OAElCsD,EAAW5kC,UAAUspC,MAAQ1E,EAAW5kC,UAAUimC,SAElDnB,EAAa9kC,UAAUimC,SAAW,SAAU3B,GACxC,IAAIzkC,EAAI8kC,EAAWL,GACfvmC,EAAIqe,KAAK/c,MACb,GAAItB,EAAI,IAAM8B,EAAEyhC,KACZ,OAAOllB,KAAK2E,IAAIlhB,EAAE0nC,UAEtB,IAAI9B,EAAI5lC,EAAER,MACV,OAAIQ,EAAEglC,QACK,IAAIC,EAAa/mC,EAAI0nC,GAEzBa,EAAcb,EAAGR,KAAKuC,IAAIzpC,GAAIA,GAAK,IAE9C+mC,EAAa9kC,UAAUspC,MAAQxE,EAAa9kC,UAAUimC,SAEtDlB,EAAa/kC,UAAUimC,SAAW,SAAU3B,GACxC,OAAO,IAAIS,EAAa3oB,KAAK/c,MAAQslC,EAAWL,GAAGjlC,QAEvD0lC,EAAa/kC,UAAUspC,MAAQvE,EAAa/kC,UAAUimC,SAEtDrB,EAAW5kC,UAAUunC,OAAS,WAC1B,OAAO,IAAI3C,EAAWxoB,KAAK/c,OAAQ+c,KAAKklB,OAE5CwD,EAAa9kC,UAAUunC,OAAS,WAC5B,IAAIjG,EAAOllB,KAAKklB,KACZiI,EAAQ,IAAIzE,GAAc1oB,KAAK/c,OAEnC,OADAkqC,EAAMjI,MAAQA,EACPiI,GAEXxE,EAAa/kC,UAAUunC,OAAS,WAC5B,OAAO,IAAIxC,GAAc3oB,KAAK/c,QAGlCulC,EAAW5kC,UAAUwnC,IAAM,WACvB,OAAO,IAAI5C,EAAWxoB,KAAK/c,OAAO,IAEtCylC,EAAa9kC,UAAUwnC,IAAM,WACzB,OAAO,IAAI1C,EAAaG,KAAKuC,IAAIprB,KAAK/c,SAE1C0lC,EAAa/kC,UAAUwnC,IAAM,WACzB,OAAO,IAAIzC,EAAa3oB,KAAK/c,OAAS,EAAI+c,KAAK/c,OAAS+c,KAAK/c,QA2EjEulC,EAAW5kC,UAAUwpC,SAAW,SAAUlF,GACtC,IAGIkD,EARciC,EAAIC,EAKlB7pC,EAAI8kC,EAAWL,GACfvmC,EAAIqe,KAAK/c,MAAOomC,EAAI5lC,EAAER,MACtBiiC,EAAOllB,KAAKklB,OAASzhC,EAAEyhC,KAE3B,GAAIzhC,EAAEglC,QAAS,CACX,GAAU,IAANY,EAAS,OAAOpB,EAAQ,GAC5B,GAAU,IAANoB,EAAS,OAAOrpB,KACpB,IAAW,IAAPqpB,EAAU,OAAOrpB,KAAKmrB,SAE1B,IADAC,EAAMvC,KAAKuC,IAAI/B,IACLzB,EACN,OAAO,IAAIY,EAAW8B,EAAc3oC,EAAGypC,GAAMlG,GAEjDmE,EAAItB,EAAaqD,GAErB,OAnBkBiC,EAmBD1rC,EAAEyI,OAnBGkjC,EAmBKjE,EAAEj/B,OAClB,IAAIo+B,GAnBP,KAAQ6E,EAAK,KAAQC,EAAK,MAAWD,EAAKC,EAAK,EAvB3D,SAASC,EAAkBpE,EAAGqE,GAC1B,IAAI/pC,EAAIolC,KAAK4E,IAAItE,EAAE/+B,OAAQojC,EAAEpjC,QAE7B,GAAI3G,GAAK,GAAI,OAAO0mC,EAAahB,EAAGqE,GACpC/pC,EAAIolC,KAAKO,KAAK3lC,EAAI,GAElB,IAAI4lC,EAAIF,EAAErmB,MAAMrf,GACZ9B,EAAIwnC,EAAErmB,MAAM,EAAGrf,GACfnB,EAAIkrC,EAAE1qB,MAAMrf,GACZpB,EAAImrC,EAAE1qB,MAAM,EAAGrf,GAEfiqC,EAAKH,EAAkB5rC,EAAGU,GAC1BsrC,EAAKJ,EAAkBlE,EAAG/mC,GAC1BsrC,EAAOL,EAAkB5D,EAAOhoC,EAAG0nC,GAAIM,EAAOtnC,EAAGC,IAEjD8nC,EAAUT,EAAOA,EAAO+D,EAAInD,EAAUV,EAASA,EAAS+D,EAAMF,GAAKC,GAAKlqC,IAAK8mC,EAAUoD,EAAI,EAAIlqC,IAEnG,OADA0c,EAAKiqB,GACEA,EAyBmBmD,CAAkB5rC,EAAG0nC,GACzBc,EAAaxoC,EAAG0nC,GADanE,IAIvDsD,EAAW5kC,UAAUiqC,MAAQrF,EAAW5kC,UAAUwpC,SAQlD1E,EAAa9kC,UAAUkqC,iBAAmB,SAAUnsC,GAChD,OAAIinC,EAAUjnC,EAAEsB,MAAQ+c,KAAK/c,OAClB,IAAIylC,EAAa/mC,EAAEsB,MAAQ+c,KAAK/c,OAEpCwnC,EAAsB5B,KAAKuC,IAAIzpC,EAAEsB,OAAQ8kC,EAAac,KAAKuC,IAAIprB,KAAK/c,QAAS+c,KAAKklB,OAASvjC,EAAEujC,OAExGsD,EAAW5kC,UAAUkqC,iBAAmB,SAAUnsC,GAC9C,OAAgB,IAAZA,EAAEsB,MAAoBglC,EAAQ,GAClB,IAAZtmC,EAAEsB,MAAoB+c,MACT,IAAbre,EAAEsB,MAAqB+c,KAAKmrB,SACzBV,EAAsB5B,KAAKuC,IAAIzpC,EAAEsB,OAAQ+c,KAAK/c,MAAO+c,KAAKklB,OAASvjC,EAAEujC,OAEhFwD,EAAa9kC,UAAUwpC,SAAW,SAAUlF,GACxC,OAAOK,EAAWL,GAAG4F,iBAAiB9tB,OAE1C0oB,EAAa9kC,UAAUiqC,MAAQnF,EAAa9kC,UAAUwpC,SAEtDzE,EAAa/kC,UAAUwpC,SAAW,SAAUlF,GACxC,OAAO,IAAIS,EAAa3oB,KAAK/c,MAAQslC,EAAWL,GAAGjlC,QAEvD0lC,EAAa/kC,UAAUiqC,MAAQlF,EAAa/kC,UAAUwpC,SAuBtD5E,EAAW5kC,UAAU8mC,OAAS,WAC1B,OAAO,IAAIlC,EAAWkC,EAAO1qB,KAAK/c,QAAQ,IAG9CylC,EAAa9kC,UAAU8mC,OAAS,WAC5B,IAAIznC,EAAQ+c,KAAK/c,MAAQ+c,KAAK/c,MAC9B,OAAI2lC,EAAU3lC,GAAe,IAAIylC,EAAazlC,GACvC,IAAIulC,EAAWkC,EAAO3C,EAAac,KAAKuC,IAAIprB,KAAK/c,UAAU,IAGtE0lC,EAAa/kC,UAAU8mC,OAAS,SAAUxC,GACtC,OAAO,IAAIS,EAAa3oB,KAAK/c,MAAQ+c,KAAK/c,QAqK9CulC,EAAW5kC,UAAUmqC,OAAS,SAAU7F,GACpC,IAAIhiC,EAAS+kC,EAAUjrB,KAAMkoB,GAC7B,MAAO,CACH8C,SAAU9kC,EAAO,GACjB4kC,UAAW5kC,EAAO,KAG1ByiC,EAAa/kC,UAAUmqC,OAASrF,EAAa9kC,UAAUmqC,OAASvF,EAAW5kC,UAAUmqC,OAGrFvF,EAAW5kC,UAAUgpC,OAAS,SAAU1E,GACpC,OAAO+C,EAAUjrB,KAAMkoB,GAAG,IAE9BS,EAAa/kC,UAAU6G,KAAOk+B,EAAa/kC,UAAUgpC,OAAS,SAAU1E,GACpE,OAAO,IAAIS,EAAa3oB,KAAK/c,MAAQslC,EAAWL,GAAGjlC,QAEvDylC,EAAa9kC,UAAU6G,KAAOi+B,EAAa9kC,UAAUgpC,OAASpE,EAAW5kC,UAAU6G,KAAO+9B,EAAW5kC,UAAUgpC,OAE/GpE,EAAW5kC,UAAUqoC,IAAM,SAAU/D,GACjC,OAAO+C,EAAUjrB,KAAMkoB,GAAG,IAE9BS,EAAa/kC,UAAUqoC,IAAMtD,EAAa/kC,UAAUknC,UAAY,SAAU5C,GACtE,OAAO,IAAIS,EAAa3oB,KAAK/c,MAAQslC,EAAWL,GAAGjlC,QAEvDylC,EAAa9kC,UAAUknC,UAAYpC,EAAa9kC,UAAUqoC,IAAMzD,EAAW5kC,UAAUknC,UAAYtC,EAAW5kC,UAAUqoC,IAEtHzD,EAAW5kC,UAAUoqC,IAAM,SAAU9F,GACjC,IAGIjlC,EAAOkmC,EAAGqE,EAHV/pC,EAAI8kC,EAAWL,GACfvmC,EAAIqe,KAAK/c,MACTomC,EAAI5lC,EAAER,MAEV,GAAU,IAANomC,EAAS,OAAOpB,EAAQ,GAC5B,GAAU,IAANtmC,EAAS,OAAOsmC,EAAQ,GAC5B,GAAU,IAANtmC,EAAS,OAAOsmC,EAAQ,GAC5B,IAAW,IAAPtmC,EAAU,OAAO8B,EAAE6oC,SAAWrE,EAAQ,GAAKA,GAAS,GACxD,GAAIxkC,EAAEyhC,KACF,OAAO+C,EAAQ,GAEnB,IAAKxkC,EAAEglC,QAAS,MAAM,IAAIzjC,MAAM,gBAAkBvB,EAAEif,WAAa,kBACjE,GAAI1C,KAAKyoB,SACDG,EAAU3lC,EAAQ4lC,KAAKmF,IAAIrsC,EAAG0nC,IAC9B,OAAO,IAAIX,EAAavxB,EAASlU,IAIzC,IAFAkmC,EAAInpB,KACJwtB,EAAIvF,EAAQ,IAEA,EAAJoB,IACAmE,EAAIA,EAAEK,MAAM1E,KACVE,GAEI,IAANA,GACJA,GAAK,EACLF,EAAIA,EAAEuB,SAEV,OAAO8C,GAEX9E,EAAa9kC,UAAUoqC,IAAMxF,EAAW5kC,UAAUoqC,IAElDrF,EAAa/kC,UAAUoqC,IAAM,SAAU9F,GACnC,IAAIzkC,EAAI8kC,EAAWL,GACfvmC,EAAIqe,KAAK/c,MAAOomC,EAAI5lC,EAAER,MACtBgrC,EAAKjtB,OAAO,GAAIktB,EAAKltB,OAAO,GAAImtB,EAAKntB,OAAO,GAChD,GAAIqoB,IAAM4E,EAAI,OAAOhG,EAAQ,GAC7B,GAAItmC,IAAMssC,EAAI,OAAOhG,EAAQ,GAC7B,GAAItmC,IAAMusC,EAAI,OAAOjG,EAAQ,GAC7B,GAAItmC,IAAMqf,QAAQ,GAAI,OAAOvd,EAAE6oC,SAAWrE,EAAQ,GAAKA,GAAS,GAChE,GAAIxkC,EAAE2qC,aAAc,OAAO,IAAIzF,EAAasF,GAG5C,IAFA,IAAI9E,EAAInpB,KACJwtB,EAAIvF,EAAQ,IAEPoB,EAAI6E,KAAQA,IACbV,EAAIA,EAAEK,MAAM1E,KACVE,GAEFA,IAAM4E,GACV5E,GAAK8E,EACLhF,EAAIA,EAAEuB,SAEV,OAAO8C,GAGXhF,EAAW5kC,UAAUmpC,OAAS,SAAUnI,EAAKqH,GAGzC,GAFArH,EAAM2D,EAAW3D,IACjBqH,EAAM1D,EAAW0D,IACToC,SAAU,MAAM,IAAIrpC,MAAM,qCAClC,IAAIlC,EAAImlC,EAAQ,GACZyB,EAAO1pB,KAAKisB,IAAIA,GAKpB,IAJIrH,EAAIwJ,eACJxJ,EAAMA,EAAIwI,SAASnF,GAAS,IAC5ByB,EAAOA,EAAK4E,OAAOrC,IAEhBrH,EAAI2J,cAAc,CACrB,GAAI7E,EAAK2E,SAAU,OAAOpG,EAAQ,GAC9BrD,EAAI4J,UAAS1rC,EAAIA,EAAEsqC,SAAS1D,GAAMuC,IAAIA,IAC1CrH,EAAMA,EAAIgI,OAAO,GACjBlD,EAAOA,EAAKgB,SAASuB,IAAIA,GAE7B,OAAOnpC,GAEX6lC,EAAa/kC,UAAUmpC,OAASrE,EAAa9kC,UAAUmpC,OAASvE,EAAW5kC,UAAUmpC,OAYrFvE,EAAW5kC,UAAUqlC,WAAa,SAAUf,GACxC,IAAIzkC,EAAI8kC,EAAWL,GACfvmC,EAAIqe,KAAK/c,MACTomC,EAAI5lC,EAAER,MACV,OAAIQ,EAAEglC,QAAgB,EACfQ,EAAWtnC,EAAG0nC,IAEzBX,EAAa9kC,UAAUqlC,WAAa,SAAUf,GAC1C,IAAIzkC,EAAI8kC,EAAWL,GACfvmC,EAAIknC,KAAKuC,IAAIprB,KAAK/c,OAClBomC,EAAI5lC,EAAER,MACV,OAAIQ,EAAEglC,QAEK9mC,KADP0nC,EAAIR,KAAKuC,IAAI/B,IACI,EAAI1nC,EAAI0nC,EAAI,GAAK,GAE9B,GAEZV,EAAa/kC,UAAUqlC,WAAa,SAAUf,GAC1C,IAAIvmC,EAAIqe,KAAK/c,MACTomC,EAAId,EAAWL,GAAGjlC,MAGtB,OAFAtB,EAAIA,GAAK,EAAIA,GAAKA,MAClB0nC,EAAIA,GAAK,EAAIA,GAAKA,GACD,EAAI1nC,EAAI0nC,EAAI,GAAK,GAGtCb,EAAW5kC,UAAU6qC,QAAU,SAAUvG,GAGrC,GAAIA,IAAMwG,IACN,OAAQ,EAEZ,GAAIxG,KAAOwG,IACP,OAAO,EAGX,IAAIjrC,EAAI8kC,EAAWL,GACfvmC,EAAIqe,KAAK/c,MACTomC,EAAI5lC,EAAER,MACV,OAAI+c,KAAKklB,OAASzhC,EAAEyhC,KACTzhC,EAAEyhC,KAAO,GAAK,EAErBzhC,EAAEglC,QACKzoB,KAAKklB,MAAQ,EAAI,EAErB+D,EAAWtnC,EAAG0nC,IAAMrpB,KAAKklB,MAAQ,EAAI,IAEhDsD,EAAW5kC,UAAU+qC,UAAYnG,EAAW5kC,UAAU6qC,QAEtD/F,EAAa9kC,UAAU6qC,QAAU,SAAUvG,GACvC,GAAIA,IAAMwG,IACN,OAAQ,EAEZ,GAAIxG,KAAOwG,IACP,OAAO,EAGX,IAAIjrC,EAAI8kC,EAAWL,GACfvmC,EAAIqe,KAAK/c,MACTomC,EAAI5lC,EAAER,MACV,OAAIQ,EAAEglC,QACK9mC,GAAK0nC,EAAI,EAAI1nC,EAAI0nC,EAAI,GAAK,EAEjC1nC,EAAI,IAAM8B,EAAEyhC,KACLvjC,EAAI,GAAK,EAAI,EAEjBA,EAAI,EAAI,GAAK,GAExB+mC,EAAa9kC,UAAU+qC,UAAYjG,EAAa9kC,UAAU6qC,QAE1D9F,EAAa/kC,UAAU6qC,QAAU,SAAUvG,GACvC,GAAIA,IAAMwG,IACN,OAAQ,EAEZ,GAAIxG,KAAOwG,IACP,OAAO,EAEX,IAAI/sC,EAAIqe,KAAK/c,MACTomC,EAAId,EAAWL,GAAGjlC,MACtB,OAAOtB,IAAM0nC,EAAI,EAAI1nC,EAAI0nC,EAAI,GAAK,GAEtCV,EAAa/kC,UAAU+qC,UAAYhG,EAAa/kC,UAAU6qC,QAE1DjG,EAAW5kC,UAAUyoC,OAAS,SAAUnE,GACpC,OAA2B,IAApBloB,KAAKyuB,QAAQvG,IAExBS,EAAa/kC,UAAUgrC,GAAKjG,EAAa/kC,UAAUyoC,OAAS3D,EAAa9kC,UAAUgrC,GAAKlG,EAAa9kC,UAAUyoC,OAAS7D,EAAW5kC,UAAUgrC,GAAKpG,EAAW5kC,UAAUyoC,OAEvK7D,EAAW5kC,UAAUirC,UAAY,SAAU3G,GACvC,OAA2B,IAApBloB,KAAKyuB,QAAQvG,IAExBS,EAAa/kC,UAAUkrC,IAAMnG,EAAa/kC,UAAUirC,UAAYnG,EAAa9kC,UAAUkrC,IAAMpG,EAAa9kC,UAAUirC,UAAYrG,EAAW5kC,UAAUkrC,IAAMtG,EAAW5kC,UAAUirC,UAEhLrG,EAAW5kC,UAAUmrC,QAAU,SAAU7G,GACrC,OAAOloB,KAAKyuB,QAAQvG,GAAK,GAE7BS,EAAa/kC,UAAUorC,GAAKrG,EAAa/kC,UAAUmrC,QAAUrG,EAAa9kC,UAAUorC,GAAKtG,EAAa9kC,UAAUmrC,QAAUvG,EAAW5kC,UAAUorC,GAAKxG,EAAW5kC,UAAUmrC,QAEzKvG,EAAW5kC,UAAU4oC,OAAS,SAAUtE,GACpC,OAAOloB,KAAKyuB,QAAQvG,GAAK,GAE7BS,EAAa/kC,UAAUqrC,GAAKtG,EAAa/kC,UAAU4oC,OAAS9D,EAAa9kC,UAAUqrC,GAAKvG,EAAa9kC,UAAU4oC,OAAShE,EAAW5kC,UAAUqrC,GAAKzG,EAAW5kC,UAAU4oC,OAEvKhE,EAAW5kC,UAAUsrC,gBAAkB,SAAUhH,GAC7C,OAAOloB,KAAKyuB,QAAQvG,IAAM,GAE9BS,EAAa/kC,UAAUurC,IAAMxG,EAAa/kC,UAAUsrC,gBAAkBxG,EAAa9kC,UAAUurC,IAAMzG,EAAa9kC,UAAUsrC,gBAAkB1G,EAAW5kC,UAAUurC,IAAM3G,EAAW5kC,UAAUsrC,gBAE5L1G,EAAW5kC,UAAUwrC,eAAiB,SAAUlH,GAC5C,OAAOloB,KAAKyuB,QAAQvG,IAAM,GAE9BS,EAAa/kC,UAAUyrC,IAAM1G,EAAa/kC,UAAUwrC,eAAiB1G,EAAa9kC,UAAUyrC,IAAM3G,EAAa9kC,UAAUwrC,eAAiB5G,EAAW5kC,UAAUyrC,IAAM7G,EAAW5kC,UAAUwrC,eAE1L5G,EAAW5kC,UAAU0oC,OAAS,WAC1B,OAA+B,IAAP,EAAhBtsB,KAAK/c,MAAM,KAEvBylC,EAAa9kC,UAAU0oC,OAAS,WAC5B,OAA4B,IAAP,EAAbtsB,KAAK/c,QAEjB0lC,EAAa/kC,UAAU0oC,OAAS,WAC5B,OAAQtsB,KAAK/c,MAAQ+d,OAAO,MAAQA,OAAO,IAG/CwnB,EAAW5kC,UAAU4qC,MAAQ,WACzB,OAA+B,IAAP,EAAhBxuB,KAAK/c,MAAM,KAEvBylC,EAAa9kC,UAAU4qC,MAAQ,WAC3B,OAA4B,IAAP,EAAbxuB,KAAK/c,QAEjB0lC,EAAa/kC,UAAU4qC,MAAQ,WAC3B,OAAQxuB,KAAK/c,MAAQ+d,OAAO,MAAQA,OAAO,IAG/CwnB,EAAW5kC,UAAU2qC,WAAa,WAC9B,OAAQvuB,KAAKklB,MAEjBwD,EAAa9kC,UAAU2qC,WAAa,WAChC,OAAOvuB,KAAK/c,MAAQ,GAExB0lC,EAAa/kC,UAAU2qC,WAAa7F,EAAa9kC,UAAU2qC,WAE3D/F,EAAW5kC,UAAUwqC,WAAa,WAC9B,OAAOpuB,KAAKklB,MAEhBwD,EAAa9kC,UAAUwqC,WAAa,WAChC,OAAOpuB,KAAK/c,MAAQ,GAExB0lC,EAAa/kC,UAAUwqC,WAAa1F,EAAa9kC,UAAUwqC,WAE3D5F,EAAW5kC,UAAUwoC,OAAS,WAC1B,OAAO,GAEX1D,EAAa9kC,UAAUwoC,OAAS,WAC5B,OAAgC,IAAzBvD,KAAKuC,IAAIprB,KAAK/c,QAEzB0lC,EAAa/kC,UAAUwoC,OAAS,WAC5B,OAAOpsB,KAAKorB,MAAMnoC,QAAU+d,OAAO,IAGvCwnB,EAAW5kC,UAAUyqC,OAAS,WAC1B,OAAO,GAEX3F,EAAa9kC,UAAUyqC,OAAS,WAC5B,OAAsB,IAAfruB,KAAK/c,OAEhB0lC,EAAa/kC,UAAUyqC,OAAS,WAC5B,OAAOruB,KAAK/c,QAAU+d,OAAO,IAGjCwnB,EAAW5kC,UAAU2oC,cAAgB,SAAUrE,GAC3C,IAAIzkC,EAAI8kC,EAAWL,GACnB,OAAIzkC,EAAE4qC,aACF5qC,EAAE2oC,WACkB,IAApB3oC,EAAEwlC,WAAW,GAAiBjpB,KAAKssB,SAChCtsB,KAAKisB,IAAIxoC,GAAG4qC,YAEvB1F,EAAa/kC,UAAU2oC,cAAgB7D,EAAa9kC,UAAU2oC,cAAgB/D,EAAW5kC,UAAU2oC,cAgCnG/D,EAAW5kC,UAAU0rC,QAAU,SAAUC,GACrC,IAAID,EAAUnD,EAAansB,MAC3B,QAt5BR,IAs5BYsvB,EAAuB,OAAOA,EAClC,IAAI7rC,EAAIuc,KAAKorB,MACToE,EAAO/rC,EAAEgsC,YACb,GAAID,GAAQ,GACR,OAAO/C,EAAgBhpC,EAAG,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAGvE,IAFA,IAAIisC,EAAO7G,KAAK8G,IAAI,GAAKH,EAAKI,aAC1B1sC,EAAI2lC,KAAKO,MAAiB,IAAXmG,EAAoB,EAAI1G,KAAKmF,IAAI0B,EAAM,GAAMA,GACvD/tC,EAAI,GAAIC,EAAI,EAAGA,EAAIsB,EAAGtB,IAC3BD,EAAEyE,KAAK0mC,EAAOlrC,EAAI,IAEtB,OAAO6qC,EAAgBhpC,EAAG9B,IAE9BgnC,EAAa/kC,UAAU0rC,QAAU5G,EAAa9kC,UAAU0rC,QAAU9G,EAAW5kC,UAAU0rC,QAEvF9G,EAAW5kC,UAAUisC,gBAAkB,SAAUC,EAAYC,GACzD,IAAIT,EAAUnD,EAAansB,MAC3B,QAt6BR,IAs6BYsvB,EAAuB,OAAOA,EAGlC,IAFA,IAAI7rC,EAAIuc,KAAKorB,MACTloC,OAx6BZ,IAw6BgB4sC,EAA2B,EAAIA,EAC9BnuC,EAAI,GAAIC,EAAI,EAAGA,EAAIsB,EAAGtB,IAC3BD,EAAEyE,KAAK0mC,EAAOkD,YAAY,EAAGvsC,EAAEypC,MAAM,GAAI6C,IAE7C,OAAOtD,EAAgBhpC,EAAG9B,IAE9BgnC,EAAa/kC,UAAUisC,gBAAkBnH,EAAa9kC,UAAUisC,gBAAkBrH,EAAW5kC,UAAUisC,gBAEvGrH,EAAW5kC,UAAU0qC,OAAS,SAAU7qC,GAEpC,IADA,IAA8EonC,EAAGoF,EAAOC,EAApFhtC,EAAI4pC,EAAOqD,KAAMC,EAAOtD,EAAOuD,IAAKvtC,EAAIylC,EAAW9kC,GAAI6sC,EAAOtwB,KAAKorB,OAC/DkF,EAAKjC,UACTxD,EAAI/nC,EAAE8pC,OAAO0D,GACbL,EAAQ/sC,EACRgtC,EAAQptC,EACRI,EAAIktC,EACJttC,EAAIwtC,EACJF,EAAOH,EAAMpG,SAASgB,EAAEuC,SAASgD,IACjCE,EAAOJ,EAAMrG,SAASgB,EAAEuC,SAASkD,IAErC,IAAKxtC,EAAEspC,SAAU,MAAM,IAAIpnC,MAAMgb,KAAK0C,WAAa,QAAUjf,EAAEif,WAAa,qBAI5E,OAHsB,IAAlBxf,EAAEurC,QAAQ,KACVvrC,EAAIA,EAAEyhB,IAAIlhB,IAEVuc,KAAKouB,aACElrC,EAAEioC,SAENjoC,GAGXylC,EAAa/kC,UAAU0qC,OAAS5F,EAAa9kC,UAAU0qC,OAAS9F,EAAW5kC,UAAU0qC,OAErF9F,EAAW5kC,UAAUipC,KAAO,WACxB,IAAI5pC,EAAQ+c,KAAK/c,MACjB,OAAI+c,KAAKklB,KACEgF,EAAcjnC,EAAO,EAAG+c,KAAKklB,MAEjC,IAAIsD,EAAWoB,EAAS3mC,EAAO,GAAI+c,KAAKklB,OAEnDwD,EAAa9kC,UAAUipC,KAAO,WAC1B,IAAI5pC,EAAQ+c,KAAK/c,MACjB,OAAIA,EAAQ,EAAI4kC,EAAgB,IAAIa,EAAazlC,EAAQ,GAClD,IAAIulC,EAAWV,GAAa,IAEvCa,EAAa/kC,UAAUipC,KAAO,WAC1B,OAAO,IAAIlE,EAAa3oB,KAAK/c,MAAQ+d,OAAO,KAGhDwnB,EAAW5kC,UAAU+oC,KAAO,WACxB,IAAI1pC,EAAQ+c,KAAK/c,MACjB,OAAI+c,KAAKklB,KACE,IAAIsD,EAAWoB,EAAS3mC,EAAO,IAAI,GAEvCinC,EAAcjnC,EAAO,EAAG+c,KAAKklB,OAExCwD,EAAa9kC,UAAU+oC,KAAO,WAC1B,IAAI1pC,EAAQ+c,KAAK/c,MACjB,OAAIA,EAAQ,GAAK4kC,EAAgB,IAAIa,EAAazlC,EAAQ,GACnD,IAAIulC,EAAWV,GAAa,IAEvCa,EAAa/kC,UAAU+oC,KAAO,WAC1B,OAAO,IAAIhE,EAAa3oB,KAAK/c,MAAQ+d,OAAO,KAIhD,IADA,IAAIuvB,EAAc,CAAC,GACZ,EAAIA,EAAYA,EAAYnmC,OAAS,IAAMw9B,GAAM2I,EAAYnqC,KAAK,EAAImqC,EAAYA,EAAYnmC,OAAS,IAC9G,IAAIomC,EAAgBD,EAAYnmC,OAAQqmC,EAAgBF,EAAYC,EAAgB,GAEpF,SAASE,EAAcjtC,GACnB,OAAOolC,KAAKuC,IAAI3nC,IAAMmkC,EAsC1B,SAAS+I,EAAQxH,EAAGqE,EAAGoD,GACnBpD,EAAIjF,EAAWiF,GAOf,IANA,IAAIqD,EAAQ1H,EAAEiF,aAAc0C,EAAQtD,EAAEY,aAClC2C,EAAOF,EAAQ1H,EAAE6H,MAAQ7H,EACzB8H,EAAOH,EAAQtD,EAAEwD,MAAQxD,EACzB0D,EAAS,EAAGC,EAAS,EACrBC,EAAU,KAAMC,EAAU,KAC1BnrC,EAAS,IACL6qC,EAAK1C,WAAa4C,EAAK5C,UAE3B6C,GADAE,EAAUnG,EAAU8F,EAAMN,IACT,GAAGb,aAChBiB,IACAK,EAAST,EAAgB,EAAIS,GAIjCC,GADAE,EAAUpG,EAAUgG,EAAMR,IACT,GAAGb,aAChBkB,IACAK,EAASV,EAAgB,EAAIU,GAGjCJ,EAAOK,EAAQ,GACfH,EAAOI,EAAQ,GACfnrC,EAAOE,KAAKwqC,EAAGM,EAAQC,IAG3B,IADA,IAAI7H,EAA2C,IAArCsH,EAAGC,EAAQ,EAAI,EAAGC,EAAQ,EAAI,GAAWhE,GAAQ,GAAKA,EAAO,GAC9DlrC,EAAIsE,EAAOkE,OAAS,EAAGxI,GAAK,EAAGA,GAAK,EACzC0nC,EAAMA,EAAI8D,SAASqD,GAAe9rB,IAAImoB,EAAO5mC,EAAOtE,KAExD,OAAO0nC,EAhEXd,EAAW5kC,UAAU2mC,UAAY,SAAUrC,GACvC,IAAIzkC,EAAI8kC,EAAWL,GAAG0H,aACtB,IAAKc,EAAcjtC,GACf,MAAM,IAAIuB,MAAMi/B,OAAOxgC,GAAK,+BAEhC,GAAIA,EAAI,EAAG,OAAOuc,KAAKsxB,YAAY7tC,GACnC,IAAIyC,EAAS8Z,KACb,GAAI9Z,EAAOmoC,SAAU,OAAOnoC,EAC5B,KAAOzC,GAAK+sC,GACRtqC,EAASA,EAAOknC,SAASqD,GACzBhtC,GAAK+sC,EAAgB,EAEzB,OAAOtqC,EAAOknC,SAASmD,EAAY9sC,KAEvCklC,EAAa/kC,UAAU2mC,UAAY7B,EAAa9kC,UAAU2mC,UAAY/B,EAAW5kC,UAAU2mC,UAE3F/B,EAAW5kC,UAAU0tC,WAAa,SAAUpJ,GACxC,IAAIqJ,EACA9tC,EAAI8kC,EAAWL,GAAG0H,aACtB,IAAKc,EAAcjtC,GACf,MAAM,IAAIuB,MAAMi/B,OAAOxgC,GAAK,+BAEhC,GAAIA,EAAI,EAAG,OAAOuc,KAAKuqB,WAAW9mC,GAElC,IADA,IAAIyC,EAAS8Z,KACNvc,GAAK+sC,GAAe,CACvB,GAAItqC,EAAOmoC,UAAanoC,EAAOkoC,cAAgBloC,EAAOkmC,SAAW,OAAOlmC,EAExEA,GADAqrC,EAAStG,EAAU/kC,EAAQuqC,IACX,GAAGrC,aAAemD,EAAO,GAAG5E,OAAS4E,EAAO,GAC5D9tC,GAAK+sC,EAAgB,EAGzB,OADAe,EAAStG,EAAU/kC,EAAQqqC,EAAY9sC,KACzB,GAAG2qC,aAAemD,EAAO,GAAG5E,OAAS4E,EAAO,IAE9D5I,EAAa/kC,UAAU0tC,WAAa5I,EAAa9kC,UAAU0tC,WAAa9I,EAAW5kC,UAAU0tC,WAkC7F9I,EAAW5kC,UAAUotC,IAAM,WACvB,OAAOhxB,KAAKmrB,SAASwB,QAEzBhE,EAAa/kC,UAAUotC,IAAMtI,EAAa9kC,UAAUotC,IAAMxI,EAAW5kC,UAAUotC,IAE/ExI,EAAW5kC,UAAU4tC,IAAM,SAAU/tC,GACjC,OAAOktC,EAAQ3wB,KAAMvc,GAAG,SAAU9B,EAAG0nC,GAAK,OAAO1nC,EAAI0nC,MAEzDV,EAAa/kC,UAAU4tC,IAAM9I,EAAa9kC,UAAU4tC,IAAMhJ,EAAW5kC,UAAU4tC,IAE/EhJ,EAAW5kC,UAAUs7B,GAAK,SAAUz7B,GAChC,OAAOktC,EAAQ3wB,KAAMvc,GAAG,SAAU9B,EAAG0nC,GAAK,OAAO1nC,EAAI0nC,MAEzDV,EAAa/kC,UAAUs7B,GAAKwJ,EAAa9kC,UAAUs7B,GAAKsJ,EAAW5kC,UAAUs7B,GAE7EsJ,EAAW5kC,UAAU6tC,IAAM,SAAUhuC,GACjC,OAAOktC,EAAQ3wB,KAAMvc,GAAG,SAAU9B,EAAG0nC,GAAK,OAAO1nC,EAAI0nC,MAEzDV,EAAa/kC,UAAU6tC,IAAM/I,EAAa9kC,UAAU6tC,IAAMjJ,EAAW5kC,UAAU6tC,IAG/E,SAASC,EAASjuC,GAGd,IAAIykC,EAAIzkC,EAAER,MACNkmC,EAAiB,iBAANjB,EAAiBA,EALpB,GAAK,GAMI,iBAANA,EAAiBA,EAAIlnB,OANxB,GAAK,IAOLknB,EAAE,GAAKA,EAAE,GAAKN,EAPQ,WAQlC,OAAOuB,GAAKA,EA0BhB,SAASsE,EAAI9rC,EAAG0nC,GAGZ,OAFA1nC,EAAI4mC,EAAW5mC,GACf0nC,EAAId,EAAWc,GACR1nC,EAAEotC,QAAQ1F,GAAK1nC,EAAI0nC,EAE9B,SAASsI,EAAIhwC,EAAG0nC,GAGZ,OAFA1nC,EAAI4mC,EAAW5mC,GACf0nC,EAAId,EAAWc,GACR1nC,EAAE6qC,OAAOnD,GAAK1nC,EAAI0nC,EAE7B,SAASuI,EAAIjwC,EAAG0nC,GAGZ,GAFA1nC,EAAI4mC,EAAW5mC,GAAGypC,MAClB/B,EAAId,EAAWc,GAAG+B,MACdzpC,EAAE0qC,OAAOhD,GAAI,OAAO1nC,EACxB,GAAIA,EAAE0sC,SAAU,OAAOhF,EACvB,GAAIA,EAAEgF,SAAU,OAAO1sC,EAEvB,IADA,IAAoBW,EAAGY,EAAnBb,EAAI4lC,EAAQ,GACTtmC,EAAE2qC,UAAYjD,EAAEiD,UACnBhqC,EAAIqvC,EAAID,EAAS/vC,GAAI+vC,EAASrI,IAC9B1nC,EAAIA,EAAEirC,OAAOtqC,GACb+mC,EAAIA,EAAEuD,OAAOtqC,GACbD,EAAIA,EAAE+qC,SAAS9qC,GAEnB,KAAOX,EAAE2qC,UACL3qC,EAAIA,EAAEirC,OAAO8E,EAAS/vC,IAE1B,EAAG,CACC,KAAO0nC,EAAEiD,UACLjD,EAAIA,EAAEuD,OAAO8E,EAASrI,IAEtB1nC,EAAEotC,QAAQ1F,KACVnmC,EAAImmC,EAAGA,EAAI1nC,EAAGA,EAAIuB,GAEtBmmC,EAAIA,EAAEQ,SAASloC,UACT0nC,EAAEgF,UACZ,OAAOhsC,EAAE+pC,SAAWzqC,EAAIA,EAAEyrC,SAAS/qC,GA/CvCmmC,EAAW5kC,UAAU6rC,UAAY,WAC7B,IAAIhsC,EAAIuc,KAIR,OAHIvc,EAAEkrC,UAAU7B,EAAO,IAAM,IACzBrpC,EAAIA,EAAE0nC,SAAStB,SAASiD,EAAO,KAEJ,IAA3BrpC,EAAEkrC,UAAU7B,EAAO,IACZA,EAAO,GAEXA,EAnBX,SAAS+E,EAAiB5uC,EAAOymC,GAC7B,GAAIA,EAAKiF,UAAU1rC,IAAU,EAAG,CAC5B,IAAI6uC,EAAMD,EAAiB5uC,EAAOymC,EAAKgB,OAAOhB,IAC1C5lC,EAAIguC,EAAIhuC,EACRm2B,EAAI6X,EAAI7X,EACR/2B,EAAIY,EAAEspC,SAAS1D,GACnB,OAAOxmC,EAAEyrC,UAAU1rC,IAAU,EAAI,CAAEa,EAAGZ,EAAG+2B,EAAO,EAAJA,EAAQ,GAAM,CAAEn2B,EAAGA,EAAGm2B,EAAO,EAAJA,GAEzE,MAAO,CAAEn2B,EAAGgpC,EAAO,GAAI7S,EAAG,GAWZ4X,CAAiBpuC,EAAGqpC,EAAO,IAAI7S,GAAGtV,IAAImoB,EAAO,KAE/DnE,EAAa/kC,UAAU6rC,UAAY/G,EAAa9kC,UAAU6rC,UAAYjH,EAAW5kC,UAAU6rC,UA8D3F,IAAInH,EAAY,SAAUvmB,EAAM2nB,EAAMtB,EAAUC,GAC5CD,EAAWA,GA9pCQ,uCA+pCnBrmB,EAAOkiB,OAAOliB,GACTsmB,IACDtmB,EAAOA,EAAKjc,cACZsiC,EAAWA,EAAStiC,eAExB,IACIlE,EADAwI,EAAS2X,EAAK3X,OAEd2nC,EAAUlJ,KAAKuC,IAAI1B,GACnBsI,EAAiB,GACrB,IAAKpwC,EAAI,EAAGA,EAAIwmC,EAASh+B,OAAQxI,IAC7BowC,EAAe5J,EAASxmC,IAAMA,EAElC,IAAKA,EAAI,EAAGA,EAAIwI,EAAQxI,IAAK,CAEzB,GAAU,OADNS,EAAI0f,EAAKngB,MAETS,KAAK2vC,GACDA,EAAe3vC,IAAM0vC,GAAS,CAC9B,GAAU,MAAN1vC,GAAyB,IAAZ0vC,EAAe,SAChC,MAAM,IAAI/sC,MAAM3C,EAAI,iCAAmCqnC,EAAO,MAI1EA,EAAOnB,EAAWmB,GAClB,IAAIuI,EAAS,GACT7D,EAAyB,MAAZrsB,EAAK,GACtB,IAAKngB,EAAIwsC,EAAa,EAAI,EAAGxsC,EAAImgB,EAAK3X,OAAQxI,IAAK,CAC/C,IAAIS,EACJ,IADIA,EAAI0f,EAAKngB,MACJowC,EAAgBC,EAAO7rC,KAAKmiC,EAAWyJ,EAAe3vC,SAC1D,IAAU,MAANA,EAKJ,MAAM,IAAI2C,MAAM3C,EAAI,6BAJrB,IAAIsF,EAAQ/F,EACZ,GAAKA,UAA0B,MAAZmgB,EAAKngB,IAAcA,EAAImgB,EAAK3X,QAC/C6nC,EAAO7rC,KAAKmiC,EAAWxmB,EAAKe,MAAMnb,EAAQ,EAAG/F,MAIrD,OAAOswC,EAAmBD,EAAQvI,EAAM0E,IAG5C,SAAS8D,EAAmBD,EAAQvI,EAAM0E,GACtC,IAAwCxsC,EAApC0E,EAAM2hC,EAAQ,GAAI+F,EAAM/F,EAAQ,GACpC,IAAKrmC,EAAIqwC,EAAO7nC,OAAS,EAAGxI,GAAK,EAAGA,IAChC0E,EAAMA,EAAIqe,IAAIstB,EAAOrwC,GAAGisC,MAAMG,IAC9BA,EAAMA,EAAIH,MAAMnE,GAEpB,OAAO0E,EAAa9nC,EAAI6kC,SAAW7kC,EAWvC,SAAS6rC,EAAO1uC,EAAGimC,GAEf,IADAA,EAAOoD,EAAOpD,IACL2E,SAAU,CACf,GAAI5qC,EAAE4qC,SAAU,MAAO,CAAEprC,MAAO,CAAC,GAAImrC,YAAY,GACjD,MAAM,IAAIppC,MAAM,6CAEpB,GAAI0kC,EAAK2C,QAAQ,GAAI,CACjB,GAAI5oC,EAAE4qC,SAAU,MAAO,CAAEprC,MAAO,CAAC,GAAImrC,YAAY,GACjD,GAAI3qC,EAAE2qC,aACF,MAAO,CACHnrC,MAAO,GAAGunC,OAAO4H,MAAM,GAAIvtC,MAAMutC,MAAM,KAAMvtC,OAAOpB,EAAEmsC,eACjD7qC,IAAIF,MAAMjB,UAAUyuC,QAAS,CAAC,EAAG,KAEtCjE,YAAY,GAGpB,IAAIpF,EAAMnkC,MAAMutC,MAAM,KAAMvtC,MAAMpB,EAAEmsC,aAAe,IAC9C7qC,IAAIF,MAAMjB,UAAUyuC,QAAS,CAAC,EAAG,IAEtC,OADArJ,EAAIzkB,QAAQ,CAAC,IACN,CACHthB,MAAO,GAAGunC,OAAO4H,MAAM,GAAIpJ,GAC3BoF,YAAY,GAIpB,IAAIkE,GAAM,EAKV,GAJI7uC,EAAE2qC,cAAgB1E,EAAK6E,eACvB+D,GAAM,EACN7uC,EAAIA,EAAE2nC,OAEN1B,EAAK0C,SACL,OAAI3oC,EAAE4qC,SAAiB,CAAEprC,MAAO,CAAC,GAAImrC,YAAY,GAE1C,CACHnrC,MAAO4B,MAAMutC,MAAM,KAAMvtC,MAAMpB,EAAEmsC,eAC5B7qC,IAAIkiC,OAAOrjC,UAAUyuC,QAAS,GACnCjE,WAAYkE,GAKpB,IAFA,IACcvE,EADVwE,EAAM,GACNptC,EAAO1B,EACJ0B,EAAKipC,cAAgBjpC,EAAK8jC,WAAWS,IAAS,GAAG,CACpDqE,EAAS5oC,EAAK4oC,OAAOrE,GACrBvkC,EAAO4oC,EAAO/C,SACd,IAAIwH,EAAQzE,EAAOjD,UACf0H,EAAMpE,eACNoE,EAAQ9I,EAAKwD,MAAMsF,GAAOpH,MAC1BjmC,EAAOA,EAAK0nC,QAEhB0F,EAAInsC,KAAKosC,EAAM5C,cAGnB,OADA2C,EAAInsC,KAAKjB,EAAKyqC,cACP,CAAE3sC,MAAOsvC,EAAIzG,UAAWsC,WAAYkE,GAG/C,SAASG,EAAahvC,EAAGimC,EAAMtB,GAC3B,IAAIY,EAAMmJ,EAAO1uC,EAAGimC,GACpB,OAAQV,EAAIoF,WAAa,IAAM,IAAMpF,EAAI/lC,MAAM8B,KAAI,SAAUokC,GACzD,OAlER,SAAmBqJ,EAAOpK,GAEtB,OAAIoK,GADJpK,EAAWA,GA/sCQ,wCAgtCEh+B,OACVg+B,EAASoK,GAEb,IAAMA,EAAQ,IA6DVjrC,CAAU4hC,EAAGf,MACrBvhC,KAAK,IAkDZ,SAAS6rC,EAAiBxK,GACtB,GAAIU,GAAWV,GAAI,CACf,IAAIiB,GAAKjB,EACT,GAAIiB,IAAMhyB,EAASgyB,GACf,OAAOnB,EAAuB,IAAIW,EAAa3nB,OAAOmoB,IAAM,IAAIT,EAAaS,GACjF,MAAM,IAAInkC,MAAM,oBAAsBkjC,GAE1C,IAAIhD,EAAgB,MAATgD,EAAE,GACThD,IAAMgD,EAAIA,EAAEplB,MAAM,IACtB,IAAIykB,EAAQW,EAAEX,MAAM,MACpB,GAAIA,EAAMn9B,OAAS,EAAG,MAAM,IAAIpF,MAAM,oBAAsBuiC,EAAM1gC,KAAK,MACvE,GAAqB,IAAjB0gC,EAAMn9B,OAAc,CACpB,IAAIw6B,EAAM2C,EAAM,GAGhB,GAFe,MAAX3C,EAAI,KAAYA,EAAMA,EAAI9hB,MAAM,KACpC8hB,GAAOA,KACKztB,EAASytB,KAASgE,EAAUhE,GAAM,MAAM,IAAI5/B,MAAM,oBAAsB4/B,EAAM,6BAC1F,IAAI7iB,EAAOwlB,EAAM,GACboL,EAAe5wB,EAAK6wB,QAAQ,KAKhC,GAJID,GAAgB,IAChB/N,GAAO7iB,EAAK3X,OAASuoC,EAAe,EACpC5wB,EAAOA,EAAKe,MAAM,EAAG6vB,GAAgB5wB,EAAKe,MAAM6vB,EAAe,IAE/D/N,EAAM,EAAG,MAAM,IAAI5/B,MAAM,sDAE7BkjC,EADAnmB,GAAQ,IAAKld,MAAM+/B,EAAM,GAAI/9B,KAAK,KAItC,IADc,kBAAkBwL,KAAK61B,GACvB,MAAM,IAAIljC,MAAM,oBAAsBkjC,GACpD,GAAIF,EACA,OAAO,IAAIW,EAAa3nB,OAAOkkB,EAAO,IAAMgD,EAAIA,IAGpD,IADA,IAAIplC,EAAI,GAAI2qC,EAAMvF,EAAE99B,OAAsBunC,EAAMlE,EAr2CrC,EAs2CJA,EAAM,GACT3qC,EAAEsD,MAAM8hC,EAAEplB,MAAM6uB,EAAKlE,KACrBkE,GAx2CO,GAy2CG,IAAGA,EAAM,GACnBlE,GA12CO,EA62CX,OADAttB,EAAKrd,GACE,IAAI0lC,EAAW1lC,EAAGoiC,GAc7B,SAASqD,EAAWL,GAChB,MAAiB,iBAANA,EAZf,SAA0BA,GACtB,GAAIF,EACA,OAAO,IAAIW,EAAa3nB,OAAOknB,IAEnC,GAAIU,EAAUV,GAAI,CACd,GAAIA,IAAM/wB,EAAS+wB,GAAI,MAAM,IAAIljC,MAAMkjC,EAAI,uBAC3C,OAAO,IAAIQ,EAAaR,GAE5B,OAAOwK,EAAiBxK,EAAExlB,YAKfmwB,CAAiB3K,GAEX,iBAANA,EACAwK,EAAiBxK,GAEX,iBAANA,EACA,IAAIS,EAAaT,GAErBA,EA9GXM,EAAW5kC,UAAUkvC,QAAU,SAAU3K,GACrC,OAAOgK,EAAOnyB,KAAMmoB,IAGxBO,EAAa9kC,UAAUkvC,QAAU,SAAU3K,GACvC,OAAOgK,EAAOnyB,KAAMmoB,IAGxBQ,EAAa/kC,UAAUkvC,QAAU,SAAU3K,GACvC,OAAOgK,EAAOnyB,KAAMmoB,IAGxBK,EAAW5kC,UAAU8e,SAAW,SAAUylB,EAAOC,GAE7C,QAzyCR,IAwyCYD,IAAqBA,EAAQ,IACnB,KAAVA,EAAc,OAAOsK,EAAazyB,KAAMmoB,EAAOC,GAEnD,IADA,IAA2EoK,EAAvEtK,EAAIloB,KAAK/c,MAAOhB,EAAIimC,EAAE99B,OAAQzF,EAAMs/B,OAAOiE,IAAIjmC,MAC1CA,GAAK,GACVuwC,EAAQvO,OAAOiE,EAAEjmC,IACjB0C,GAH4D,UAG/Cme,MAAM0vB,EAAMpoC,QAAUooC,EAGvC,OADWxyB,KAAKklB,KAAO,IAAM,IACfvgC,GAGlB+jC,EAAa9kC,UAAU8e,SAAW,SAAUylB,EAAOC,GAE/C,YArzCR,IAozCYD,IAAqBA,EAAQ,IACpB,IAATA,EAAoBsK,EAAazyB,KAAMmoB,EAAOC,GAC3CnE,OAAOjkB,KAAK/c,QAGvB0lC,EAAa/kC,UAAU8e,SAAWgmB,EAAa9kC,UAAU8e,SAEzDimB,EAAa/kC,UAAUmvC,OAASvK,EAAW5kC,UAAUmvC,OAASrK,EAAa9kC,UAAUmvC,OAAS,WAAc,OAAO/yB,KAAK0C,YAExH8lB,EAAW5kC,UAAUyuC,QAAU,WAC3B,OAAOlO,SAASnkB,KAAK0C,WAAY,KAErC8lB,EAAW5kC,UAAUgsC,WAAapH,EAAW5kC,UAAUyuC,QAEvD3J,EAAa9kC,UAAUyuC,QAAU,WAC7B,OAAOryB,KAAK/c,OAEhBylC,EAAa9kC,UAAUgsC,WAAalH,EAAa9kC,UAAUyuC,QAC3D1J,EAAa/kC,UAAUyuC,QAAU1J,EAAa/kC,UAAUgsC,WAAa,WACjE,OAAOzL,SAASnkB,KAAK0C,WAAY,KAqErC,IAAK,IAAI9gB,EAAI,EAAGA,EAAI,IAAMA,IACtBqmC,EAAQrmC,GAAK2mC,EAAW3mC,GACpBA,EAAI,IAAGqmC,GAASrmC,GAAK2mC,GAAY3mC,IAiBzC,OAdAqmC,EAAQoI,IAAMpI,EAAQ,GACtBA,EAAQkI,KAAOlI,EAAQ,GACvBA,EAAQ+K,SAAW/K,GAAS,GAC5BA,EAAQwF,IAAMA,EACdxF,EAAQ0J,IAAMA,EACd1J,EAAQ2J,IAAMA,EACd3J,EAAQgL,IA1QR,SAAatxC,EAAG0nC,GAGZ,OAFA1nC,EAAI4mC,EAAW5mC,GAAGypC,MAClB/B,EAAId,EAAWc,GAAG+B,MACXzpC,EAAEirC,OAAOgF,EAAIjwC,EAAG0nC,IAAI+D,SAAS/D,IAwQxCpB,EAAQiL,WAAa,SAAU/J,GAAK,OAAOA,aAAaX,GAAcW,aAAaT,GAAgBS,aAAaR,GAChHV,EAAQ+H,YAvQR,SAAqBruC,EAAG0nC,EAAG0G,GACvBpuC,EAAI4mC,EAAW5mC,GACf0nC,EAAId,EAAWc,GACf,IAAI8J,EAAUpD,GAAOlH,KAAKuK,OACtBC,EAAM1B,EAAIhwC,EAAG0nC,GACbiK,EADwB7F,EAAI9rC,EAAG0nC,GAClBQ,SAASwJ,GAAK1uB,IAAI,GACnC,GAAI2uB,EAAM7K,QAAS,OAAO4K,EAAI1uB,IAAIkkB,KAAKC,MAAMqK,IAAYG,IAGzD,IAFA,IAAIrB,EAASE,EAAOmB,EAAO1L,GAAM3kC,MAC7BiD,EAAS,GAAIqtC,GAAa,EACrB3xC,EAAI,EAAGA,EAAIqwC,EAAO7nC,OAAQxI,IAAK,CACpC,IAAI2X,EAAMg6B,EAAatB,EAAOrwC,GAAKgmC,EAC/B4K,EAAQr7B,EAASg8B,IAAY55B,GACjCrT,EAAOE,KAAKosC,GACRA,EAAQj5B,IAAKg6B,GAAa,GAElC,OAAOF,EAAI1uB,IAAIsjB,EAAQuL,UAAUttC,EAAQ0hC,GAAM,KA0PnDK,EAAQuL,UAAY,SAAUvB,EAAQvI,EAAM0E,GACxC,OAAO8D,EAAmBD,EAAOltC,IAAIwjC,GAAaA,EAAWmB,GAAQ,IAAK0E,IAGvEnG,EA/5CX,GAm6CqCzmC,EAAOqC,eAAe,aACvDrC,EAAOD,QAAUurC,QAOhB,KAFD,aACI,OAAOA,GACV,gC,mCC36CLtrC,EAAOD,QAAU,SAASC,GAoBzB,OAnBKA,EAAOiyC,kBACXjyC,EAAOkyC,UAAY,aACnBlyC,EAAOmyC,MAAQ,GAEVnyC,EAAOoyC,WAAUpyC,EAAOoyC,SAAW,IACxClxC,OAAOC,eAAenB,EAAQ,SAAU,CACvCoB,YAAY,EACZC,IAAK,WACJ,OAAOrB,EAAOS,KAGhBS,OAAOC,eAAenB,EAAQ,KAAM,CACnCoB,YAAY,EACZC,IAAK,WACJ,OAAOrB,EAAOI,KAGhBJ,EAAOiyC,gBAAkB,GAEnBjyC","file":"bigquery.umd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 20);\n","import { columnRefToSQL, columnOrderToSQL } from './column'\n\n// const escapeMap = {\n//   '\\0'   : '\\\\0',\n//   '\\''   : '\\\\\\'',\n//   '\"'    : '\\\\\"',\n//   '\\b'   : '\\\\b',\n//   '\\n'   : '\\\\n',\n//   '\\r'   : '\\\\r',\n//   '\\t'   : '\\\\t',\n//   '\\x1a' : '\\\\Z',\n//   // '\\\\'   : '\\\\\\\\',\n// }\n\nconst DEFAULT_OPT = {\n  database : PARSER_NAME || 'mysql',\n  type     : 'table',\n}\n\nlet parserOpt = DEFAULT_OPT\n\nfunction commonOptionConnector(keyword, action, opt) {\n  if (!opt) return\n  if (!keyword) return action(opt)\n  return `${keyword.toUpperCase()} ${action(opt)}`\n}\n\nfunction connector(keyword, str) {\n  if (!str) return\n  return `${keyword.toUpperCase()} ${str}`\n}\n\n/**\n * @param {(Array|boolean|string|number|null)} value\n * @return {Object}\n */\nfunction createValueExpr(value) {\n  const type = typeof value\n  if (Array.isArray(value)) return { type: 'expr_list', value: value.map(createValueExpr) }\n  if (value === null) return { type: 'null', value: null }\n  switch (type) {\n    case 'boolean':\n      return { type: 'bool', value }\n    case 'string':\n      return { type: 'string', value }\n    case 'number':\n      return { type: 'number', value }\n    default:\n      throw new Error(`Cannot convert value \"${type}\" to SQL`)\n  }\n}\n\n/**\n * @param operator\n * @param left\n * @param right\n * @return {Object}\n */\nfunction createBinaryExpr(operator, left, right) {\n  const expr = { operator, type: 'binary_expr' }\n  expr.left = left.type ? left : createValueExpr(left)\n  if (operator === 'BETWEEN' || operator === 'NOT BETWEEN') {\n    expr.right = {\n      type  : 'expr_list',\n      value : [createValueExpr(right[0]), createValueExpr(right[1])],\n    }\n    return expr\n  }\n  expr.right = right.type ? right : createValueExpr(right)\n  return expr\n}\n\n/**\n * Replace param expressions\n *\n * @param {Object} ast    - AST object\n * @param {Object} keys   - Keys = parameter names, values = parameter values\n * @return {Object}     - Newly created AST object\n */\nfunction replaceParamsInner(ast, keys) {\n  Object.keys(ast)\n    .filter(key => {\n      const value = ast[key]\n      return Array.isArray(value) || (typeof value === 'object' && value !== null)\n    })\n    .forEach(key => {\n      const expr = ast[key]\n      if (!(typeof expr === 'object' && expr.type === 'param')) return replaceParamsInner(expr, keys)\n      if (typeof keys[expr.value] === 'undefined') throw new Error(`no value for parameter :${expr.value} found`)\n      ast[key] = createValueExpr(keys[expr.value])\n      return null\n    })\n\n  return ast\n}\n\nfunction escape(str) {\n  return str\n  // const res = []\n  // for (let i = 0, len = str.length; i < len; ++i) {\n  //   let char = str[i]\n  //   const escaped = escapeMap[char]\n  //   if (escaped) char = escaped\n  //   res.push(char)\n  // }\n  // return res.join('')\n}\n\nfunction getParserOpt() {\n  return parserOpt\n}\n\nfunction setParserOpt(opt) {\n  parserOpt = opt\n}\n\nfunction topToSQL(opt) {\n  if (!opt) return\n  const { value, percent } = opt\n  const prefix = `TOP ${value}`\n  if (!percent) return prefix\n  return `${prefix} ${percent.toUpperCase()}`\n}\n\nfunction columnIdentifierToSql(ident) {\n  const { database } = getParserOpt()\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'postgresql':\n    case 'db2':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'mysql':\n    case 'mariadb':\n    case 'bigquery':\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction identifierToSql(ident, isDual) {\n  const { database } = getParserOpt()\n  if (isDual === true) return `'${ident}'`\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'mysql':\n    case 'mariadb':\n    case 'sqlite':\n      return `\\`${ident}\\``\n    case 'postgresql':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'bigquery':\n    case 'db2':\n      return ident\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction commonTypeValue(opt) {\n  const result = []\n  if (!opt) return result\n  const { type, symbol, value } = opt\n  result.push(type.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(value.toUpperCase())\n  return result\n}\n\nfunction toUpper(val) {\n  if (!val) return\n  return val.toUpperCase()\n}\n\nfunction hasVal(val) {\n  return val\n}\n\nfunction literalToSQL(literal) {\n  if (!literal) return\n  const { type, parentheses, value } = literal\n  let str = value\n  switch (type) {\n    case 'string':\n      str = `'${escape(value)}'`\n      break\n    case 'regex_string':\n      str = `r\"${escape(value)}\"`\n      break\n    case 'hex_string':\n      str = `X'${escape(value)}'`\n      break\n    case 'double_quote_string':\n      str = `\"${escape(value)}\"`\n      break\n    case 'single_quote_string':\n      str = `'${value}'`\n      break\n    case 'boolean':\n    case 'bool':\n      str = value ? 'TRUE' : 'FALSE'\n      break\n    case 'null':\n      str = 'NULL'\n      break\n    case 'star':\n      str = '*'\n      break\n    case 'param':\n      str = `:${value}`\n      break\n    case 'origin':\n      str = value.toUpperCase()\n      break\n    case 'date':\n    case 'datetime':\n    case 'time':\n    case 'timestamp':\n      str = `${type.toUpperCase()} '${value}'`\n      break\n    default:\n      break\n  }\n  const { prefix, suffix } = literal\n  const result = []\n  if (prefix) result.push(toUpper(prefix))\n  result.push(str)\n  if (suffix && suffix.collate) result.push(commonTypeValue(suffix.collate).join(' '))\n  str = result.join(' ')\n  return parentheses ? `(${str})` : str\n}\n\nfunction replaceParams(ast, params) {\n  return replaceParamsInner(JSON.parse(JSON.stringify(ast)), params)\n}\n\nfunction onPartitionsToSQL(expr) {\n  const { type, partitions } = expr\n  const result = [\n    toUpper(type),\n    `(${partitions.map(partition => {\n      const { type: partitionType } = partition\n      if (!(partitionType === 'range')) return literalToSQL(partition)\n      const { start, end, symbol } = partition\n      return `${literalToSQL(start)} ${toUpper(symbol)} ${literalToSQL(end)}`\n    }).join(', ')})`,\n  ]\n  return result.join(' ')\n}\n\nfunction arrayStructTypeToSQL(expr) {\n  if (!expr) return\n  const { dataType, definition, anglebracket } = expr\n  const dataTypeUpper = toUpper(dataType)\n  const isNotArrayOrStruct = dataTypeUpper !== 'ARRAY' && dataTypeUpper !== 'STRUCT'\n  if (isNotArrayOrStruct) return dataTypeUpper\n  const result = definition && definition.map(field => {\n    const {\n      field_name: fieldName, field_type: fieldType,\n    } = field\n    const fieldResult = [fieldName, arrayStructTypeToSQL(fieldType)]\n    return fieldResult.filter(hasVal).join(' ')\n  }).join(', ')\n  return anglebracket ? `${dataTypeUpper}<${result}>` : `${dataTypeUpper} ${result}`\n}\n\nfunction commentToSQL(comment) {\n  if (!comment) return\n  const result = []\n  const { keyword, symbol, value } = comment\n  result.push(keyword.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(literalToSQL(value))\n  return result.join(' ')\n}\n\nfunction triggerEventToSQL(events) {\n  return events.map(event => {\n    const { keyword: kw, args } = event\n    const result = [toUpper(kw)]\n    if (args) {\n      const { keyword: kwArgs, columns } = args\n      result.push(toUpper(kwArgs), columns.map(columnRefToSQL).join(', '))\n    }\n    return result.join(' ')\n  }).join(' OR ')\n}\n\nfunction returningToSQL(returning) {\n  if (!returning) return ''\n  const { columns } = returning\n  return ['RETURNING', columns.map(columnRefToSQL).filter(hasVal).join(', ')].join(' ')\n}\n\nfunction commonKeywordArgsToSQL(kwArgs) {\n  if (!kwArgs) return []\n  return [toUpper(kwArgs.keyword), toUpper(kwArgs.args)]\n}\n\nfunction autoIncreatementToSQL(autoIncreatement) {\n  if (!autoIncreatement || typeof autoIncreatement === 'string') return toUpper(autoIncreatement)\n  const { keyword, seed, increment, parentheses } = autoIncreatement\n  let result = toUpper(keyword)\n  if (parentheses) result += `(${literalToSQL(seed)}, ${literalToSQL(increment)})`\n  return result\n}\n\nfunction columnOrderListToSQL(columnOrderList) {\n  if (!columnOrderList) return\n  return columnOrderList.map(columnOrderToSQL).filter(hasVal).join(', ')\n}\n\nexport {\n  arrayStructTypeToSQL, autoIncreatementToSQL,\n  columnOrderListToSQL, commonKeywordArgsToSQL, commonOptionConnector,\n  connector, commonTypeValue,commentToSQL, createBinaryExpr,\n  createValueExpr, DEFAULT_OPT, escape, literalToSQL, columnIdentifierToSql,\n  identifierToSql, onPartitionsToSQL, replaceParams, returningToSQL,\n  hasVal, setParserOpt, toUpper, topToSQL, triggerEventToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { arrayStructTypeToSQL, hasVal, toUpper } from './util'\n\nfunction arrayExprListToSQL(expr) {\n  const {\n    array_path: arrayPath,\n    brackets,\n    expr_list: exprList,\n    parentheses,\n  } = expr\n  if (!exprList) return `[${columnsToSQL(arrayPath)}]`\n  if (Array.isArray(exprList)) return `[${exprList.map(col => `(${columnsToSQL(col)})`).filter(hasVal).join(', ')}]`\n  const result = exprToSQL(exprList)\n  if (brackets) return `[${result}]`\n  return parentheses ? `(${result})` : result\n}\n\nfunction arrayStructValueToSQL(expr) {\n  const {\n    expr_list: exprList,\n    type,\n  } = expr\n  switch (toUpper(type)) {\n    case 'STRUCT':\n      return `(${columnsToSQL(exprList)})`\n    case 'ARRAY':\n      return arrayExprListToSQL(expr)\n    default:\n      return ''\n  }\n}\n\nfunction arrayStructExprToSQL(expr) {\n  const { definition, keyword } = expr\n  const result = [toUpper(keyword)]\n  if (definition && typeof definition === 'object') {\n    result.length = 0\n    result.push(arrayStructTypeToSQL(definition))\n  }\n  result.push(arrayStructValueToSQL(expr))\n  return result.filter(hasVal).join('')\n}\n\nexport {\n  arrayStructExprToSQL,\n  arrayStructValueToSQL,\n}\n","import { literalToSQL, toUpper, connector } from './util'\nimport { alterExprToSQL } from './alter'\nimport { aggrToSQL } from './aggregation'\nimport { assignToSQL } from './assign'\nimport { binaryToSQL } from './binary'\nimport { caseToSQL } from './case'\nimport { columnRefToSQL } from './column'\nimport { castToSQL, extractFunToSQL, funcToSQL } from './func'\nimport { intervalToSQL } from './interval'\nimport { selectToSQL } from './select'\nimport { showToSQL } from './show'\nimport { arrayStructExprToSQL } from './array-struct'\nimport { unionToSQL } from './union'\nimport { namedWindowExprListToSQL, windowFuncToSQL } from './window'\n\nconst exprToSQLConvertFn = {\n  alter       : alterExprToSQL,\n  aggr_func   : aggrToSQL,\n  window_func : windowFuncToSQL,\n  'array'     : arrayStructExprToSQL,\n  assign      : assignToSQL,\n  binary_expr : binaryToSQL,\n  case        : caseToSQL,\n  cast        : castToSQL,\n  column_ref  : columnRefToSQL,\n  extract     : extractFunToSQL,\n  function    : funcToSQL,\n  interval    : intervalToSQL,\n  show        : showToSQL,\n  struct      : arrayStructExprToSQL,\n  'window'    : namedWindowExprListToSQL,\n}\n\nfunction varToSQL(expr) {\n  const { prefix = '@', name, members, keyword } = expr\n  const val = []\n  if (keyword) val.push(keyword)\n  const varName = members && members.length > 0 ? `${name}.${members.join('.')}` : name\n  val.push(`${prefix || ''}${varName}`)\n  return val.join(' ')\n}\n\nexprToSQLConvertFn.var = varToSQL\n\nfunction exprToSQL(exprOrigin) {\n  if (!exprOrigin) return\n  const expr = exprOrigin\n  if (exprOrigin.ast) {\n    const { ast } = expr\n    Reflect.deleteProperty(expr, ast)\n    for (const key of Object.keys(ast)) {\n      expr[key] = ast[key]\n    }\n  }\n  return exprToSQLConvertFn[expr.type] ? exprToSQLConvertFn[expr.type](expr) : literalToSQL(expr)\n}\n\nfunction unaryToSQL(unarExpr) {\n  const { operator, parentheses, expr } = unarExpr\n  const space = (operator === '-' || operator === '+') ? '' : ' '\n  const str = `${operator}${space}${exprToSQL(expr)}`\n  return parentheses ? `(${str})` : str\n}\n\nfunction getExprListSQL(exprList) {\n  if (!exprList) return []\n  return exprList.map(exprToSQL)\n}\n\nexprToSQLConvertFn.expr_list = expr => {\n  const str = getExprListSQL(expr.value)\n  return expr.parentheses ? `(${str.join(', ')})` : str\n}\n\nexprToSQLConvertFn.select = expr => {\n  const str = typeof expr._next === 'object' ? unionToSQL(expr) : selectToSQL(expr)\n  return expr.parentheses ? `(${str})` : str\n}\n\nexprToSQLConvertFn.unary_expr = unaryToSQL\n\nfunction orderOrPartitionByToSQL(expr, prefix) {\n  if (!Array.isArray(expr)) return ''\n  let expressions = []\n  const upperPrefix = toUpper(prefix)\n  switch (upperPrefix) {\n    case 'ORDER BY':\n      expressions = expr.map(info => `${exprToSQL(info.expr)} ${info.type}`)\n      break\n    case 'PARTITION BY':\n      expressions = expr.map(info => `${exprToSQL(info.expr)}`)\n      break\n    default:\n      expressions = expr.map(info => `${exprToSQL(info.expr)}`)\n      break\n  }\n  return connector(upperPrefix, expressions.join(', '))\n}\n\nexport {\n  exprToSQLConvertFn,\n  exprToSQL,\n  getExprListSQL,\n  varToSQL,\n  orderOrPartitionByToSQL,\n}\n","import { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { hasVal } from './util'\nimport { overToSQL } from './over'\n\nfunction aggrToSQL(expr) {\n  /** @type {Object} */\n  const { args, over, orderby, within_group_orderby } = expr\n  let str = exprToSQL(args.expr)\n  const fnName = expr.name\n  const overStr = overToSQL(over)\n  if (args.distinct) {\n    const separator = args.expr.parentheses ? '' : ' '\n    str = ['DISTINCT', str].join(separator)\n  }\n  if (args.orderby) str = `${str} ${orderOrPartitionByToSQL(args.orderby, 'order by')}`\n  if (orderby) str = `${str} ${orderOrPartitionByToSQL(orderby, 'order by')}`\n  const withinGroup = within_group_orderby ? `WITHIN GROUP (${orderOrPartitionByToSQL(within_group_orderby, 'order by')})` : ''\n  return [`${fnName}(${str})`, withinGroup, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  aggrToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction assignToSQL(expr) {\n  /** @type {Object} */\n  const { left, right, symbol, keyword } = expr\n  left.keyword = keyword\n  const leftVar = exprToSQL(left)\n  const rightVal = exprToSQL(right)\n  return `${leftVar} ${symbol} ${rightVal}`\n}\n\nexport {\n  assignToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction binaryToSQL(expr) {\n  let { operator } = expr\n  let rstr = exprToSQL(expr.right)\n  let isBetween = false\n  if (Array.isArray(rstr)) {\n    switch (operator) {\n      case '=':\n        operator = 'IN'\n        break\n      case '!=':\n        operator = 'NOT IN'\n        break\n      case 'BETWEEN':\n      case 'NOT BETWEEN':\n        isBetween = true\n        rstr = `${rstr[0]} AND ${rstr[1]}`\n        break\n      default:\n        break\n    }\n    if (!isBetween) rstr = `(${rstr.join(', ')})`\n  }\n  const str = [exprToSQL(expr.left), operator, rstr].join(' ')\n  return expr.parentheses ? `(${str})` : str\n}\n\nexport {\n  binaryToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction caseToSQL(expr) {\n  const res = ['CASE']\n  const conditions = expr.args\n\n  if (expr.expr) res.push(exprToSQL(expr.expr))\n\n  for (let i = 0, len = conditions.length; i < len; ++i) {\n    res.push(conditions[i].type.toUpperCase())\n    if (conditions[i].cond) {\n      res.push(exprToSQL(conditions[i].cond))\n      res.push('THEN')\n    }\n    res.push(exprToSQL(conditions[i].result))\n  }\n\n  res.push('END')\n\n  return res.join(' ')\n}\n\nexport {\n  caseToSQL,\n}\n","import { toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction intervalToSQL(intervalExpr) {\n  const { expr, unit } = intervalExpr\n  const result = ['INTERVAL', exprToSQL(expr), toUpper(unit)]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  intervalToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { valuesToSQL } from './insert'\nimport { commonOptionConnector, hasVal, identifierToSql, literalToSQL, toUpper } from './util'\n\nfunction unnestToSQL(unnestExpr) {\n  const { type, as, expr, with_offset: withOffset } = unnestExpr\n  const result = [\n    `${toUpper(type)}(${expr && exprToSQL(expr) || ''})`,\n    commonOptionConnector('AS', identifierToSql, as),\n    commonOptionConnector(\n      toUpper(withOffset && withOffset.keyword),\n      identifierToSql,\n      withOffset && withOffset.as\n    ),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction tableToSQL(tableInfo) {\n  if (toUpper(tableInfo.type) === 'UNNEST') return unnestToSQL(tableInfo)\n  const { table, db, as, expr, schema, tablesample } = tableInfo\n  const database = identifierToSql(db)\n  const schemaStr = identifierToSql(schema)\n  let tableName = table && identifierToSql(table)\n  if (expr && expr.type === 'values') {\n    const { parentheses, values } = expr\n    const valueSQL = [parentheses && '(', '', parentheses && ')']\n    valueSQL[1] = `${commonOptionConnector('VALUES', valuesToSQL, values)}`\n    tableName = valueSQL.filter(hasVal).join('')\n  }\n  if (expr && expr.type !== 'values') tableName = exprToSQL(expr)\n  const str = [database, schemaStr, tableName].filter(hasVal).join('.')\n  const result = [str]\n  if (tablesample) {\n    const tableSampleSQL = [\n      'TABLESAMPLE',\n      exprToSQL(tablesample.expr),\n      literalToSQL(tablesample.repeatable),\n    ].filter(hasVal).join(' ')\n    result.push(tableSampleSQL)\n  }\n  if (as) result.push('AS', identifierToSql(as))\n  return result.join(' ')\n}\n\n/**\n * @param {Array} tables\n * @return {string}\n */\nfunction tablesToSQL(tables) {\n  const baseTable = tables[0]\n  const clauses = []\n  if (baseTable.type === 'dual') return 'DUAL'\n  clauses.push(tableToSQL(baseTable))\n  for (let i = 1; i < tables.length; ++i) {\n    const joinExpr = tables[i]\n    const { on, using, join } = joinExpr\n    const str = []\n    str.push(join ? ` ${join}` : ',')\n    str.push(tableToSQL(joinExpr))\n    str.push(commonOptionConnector('ON', exprToSQL, on))\n    if (using) str.push(`USING (${using.map(identifierToSql).join(', ')})`)\n    clauses.push(str.filter(hasVal).join(' '))\n  }\n  return clauses.filter(hasVal).join('')\n}\n\nfunction tableOptionToSQL(tableOption) {\n  const { keyword, symbol, value } = tableOption\n  const sql = [keyword.toUpperCase()]\n  if (symbol) sql.push(symbol)\n  sql.push(value)\n  return sql.join(' ')\n}\n\nexport {\n  tablesToSQL,\n  tableOptionToSQL,\n  tableToSQL,\n  unnestToSQL,\n}\n","import { constraintDefinitionToSQL } from './constrain'\nimport { exprToSQL } from './expr'\nimport { castToSQL } from './func'\nimport { tablesToSQL } from './tables'\nimport {\n  autoIncreatementToSQL,\n  columnIdentifierToSql,\n  commonOptionConnector,\n  commonTypeValue,\n  commentToSQL,\n  hasVal,\n  identifierToSql,\n  literalToSQL,\n  toUpper,\n} from './util'\n\nfunction columnOffsetToSQL(column, isDual) {\n  if (typeof column === 'string') return identifierToSql(column, isDual)\n  const { expr, offset, suffix } = column\n  return [exprToSQL(expr), offset, suffix].filter(hasVal).join('')\n}\nfunction columnRefToSQL(expr) {\n  const {\n    array_index, arrow, as, collate, column, isDual, schema, table, parentheses, property,\n    suffix,\n  } = expr\n  let str = column === '*' ? '*' : columnOffsetToSQL(column, isDual)\n  if (table) str = `${identifierToSql(table)}.${str}`\n  if (schema) str = `${identifierToSql(schema)}.${str}`\n  if (array_index) str = `${str}[${array_index.number}]`\n  const result = [\n    str,\n    commonOptionConnector('AS', exprToSQL, as),\n    commonOptionConnector(arrow, literalToSQL, property),\n  ]\n  if (collate) result.push(commonTypeValue(collate).join(' '))\n  result.push(toUpper(suffix))\n  const sql = result.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nfunction columnDataType(definition) {\n  const { dataType, length, suffix, scale, expr } = definition || {}\n  let result = dataType\n  if (length != null) result += `(${[length, scale].filter(val => val != null).join(', ')})`\n  if (suffix && suffix.length) result += ` ${suffix.join(' ')}`\n  if (expr) result += exprToSQL(expr)\n  return result\n}\n\nfunction columnReferenceDefinitionToSQL(referenceDefinition) {\n  const reference = []\n  if (!referenceDefinition) return reference\n  const {\n    definition,\n    keyword,\n    match,\n    table,\n    on_delete: onDelete,\n    on_update: onUpdate,\n  } = referenceDefinition\n  reference.push(keyword.toUpperCase())\n  reference.push(tablesToSQL(table))\n  reference.push(`(${definition.map(identifierToSql).join(', ')})`)\n  reference.push(toUpper(match))\n  reference.push(...commonTypeValue(onDelete))\n  reference.push(...commonTypeValue(onUpdate))\n  return reference.filter(hasVal)\n}\n\nfunction columnOption(definition) {\n  const columnOpt = []\n  const {\n    nullable, character_set: characterSet, check, comment, collate, storage,\n    default_val: defaultOpt,\n    auto_increment: autoIncrement,\n    unique_or_primary: uniquePrimary,\n    column_format: columnFormat,\n    reference_definition: referenceDefinition,\n  } = definition\n\n  columnOpt.push(toUpper(nullable && nullable.value))\n  if (defaultOpt) {\n    const { type, value } = defaultOpt\n    columnOpt.push(type.toUpperCase(), exprToSQL(value))\n  }\n  columnOpt.push(constraintDefinitionToSQL(check))\n  columnOpt.push(autoIncreatementToSQL(autoIncrement), toUpper(uniquePrimary), commentToSQL(comment))\n  columnOpt.push(...commonTypeValue(characterSet))\n  columnOpt.push(...commonTypeValue(collate))\n  columnOpt.push(...commonTypeValue(columnFormat))\n  columnOpt.push(...commonTypeValue(storage))\n  columnOpt.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  return columnOpt.filter(hasVal).join(' ')\n}\n\nfunction columnOrderToSQL(columnOrder) {\n  const { column, collate, nulls, opclass, order } = columnOrder\n  const result = [\n    exprToSQL(column),\n    commonOptionConnector(collate && collate.type, identifierToSql, collate && collate.value),\n    opclass,\n    toUpper(order),\n    toUpper(nulls),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction columnDefinitionToSQL(columnDefinition) {\n  const column = []\n  const name = columnRefToSQL(columnDefinition.column)\n  const dataType = columnDataType(columnDefinition.definition)\n  column.push(name)\n  column.push(dataType)\n  const columnOpt = columnOption(columnDefinition)\n  column.push(columnOpt)\n  return column.filter(hasVal).join(' ')\n}\n\nfunction columnToSQL(column, isDual) {\n  const { expr, type } = column\n  if (type === 'cast') return castToSQL(column)\n  if (isDual) expr.isDual = isDual\n  let str = exprToSQL(expr)\n  if (expr.parentheses && Reflect.has(expr, 'array_index')) str = `(${str})`\n  if (expr.array_index && expr.type !== 'column_ref') str = `${str}[${expr.array_index.number}]`\n  if (column.as !== null) {\n    str = `${str} AS `\n    if (/^(`?)[a-z_][0-9a-z_]*(`?)$/i.test(column.as)) str = `${str}${identifierToSql(column.as)}`\n    else str = `${str}${columnIdentifierToSql(column.as)}`\n  }\n  return str\n}\n\nfunction getDual(tables) {\n  const baseTable = Array.isArray(tables) && tables[0]\n  if (baseTable && baseTable.type === 'dual') return true\n  return false\n}\n/**\n * Stringify column expressions\n *\n * @param {Array} columns\n * @return {string}\n */\nfunction columnsToSQL(columns, tables) {\n  if (!columns || columns === '*') return columns\n  const isDual = getDual(tables)\n  const result = []\n  const { expr_list: exprList, star, type } = columns\n  result.push(star, toUpper(type))\n  const exprListArr = exprList || columns\n  const columnsStr = exprListArr.map(col => columnToSQL(col, isDual)).join(', ')\n  result.push([type && '(', columnsStr, type && ')'].filter(hasVal).join(''))\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  columnDefinitionToSQL,\n  columnRefToSQL,\n  columnsToSQL,\n  columnDataType,\n  columnOrderToSQL,\n  columnReferenceDefinitionToSQL,\n}\n","import { connector, toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction composePrefixValSuffix(stmt) {\n  if (!stmt) return []\n  return [toUpper(stmt.prefix), exprToSQL(stmt.value), toUpper(stmt.suffix)]\n}\n\nfunction fetchOffsetToSQL(stmt) {\n  const { fetch, offset } = stmt\n  const result = [...composePrefixValSuffix(offset), ...composePrefixValSuffix(fetch)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction limitOffsetToSQL(limit) {\n  const { seperator, value } = limit\n  return connector('LIMIT', value.map(exprToSQL).join(`${seperator === 'offset' ? ' ' : ''}${toUpper(seperator)} `))\n}\n\nfunction limitToSQL(limit) {\n  if (!limit) return ''\n  if (limit.fetch) return fetchOffsetToSQL(limit)\n  return limitOffsetToSQL(limit)\n}\n\nexport {\n  limitToSQL,\n}\n","import { columnDefinitionToSQL, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { hasVal, toUpper, identifierToSql } from './util'\n\nfunction alterToSQL(stmt) {\n  const { type, table, expr = [] } = stmt\n  const action = toUpper(type)\n  const tableName = tablesToSQL(table)\n  const exprList = expr.map(exprToSQL)\n  const result = [action, 'TABLE', tableName, exprList.join(', ')]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterExprToSQL(expr) {\n  if (!expr) return ''\n  const {\n    action,\n    create_definitions: createDefinition,\n    first_after: firstAfter,\n    if_not_exists: ifNotExists,keyword,\n    old_column: oldColumn,\n    prefix,\n    resource,\n    symbol,\n  } = expr\n  let name = ''\n  let dataType = []\n  switch (resource) {\n    case 'column':\n      dataType = [columnDefinitionToSQL(expr)]\n      break\n    case 'index':\n      dataType = indexTypeAndOptionToSQL(expr)\n      name = expr[resource]\n      break\n    case 'table':\n      name = identifierToSql(expr[resource])\n      break\n    case 'algorithm':\n    case 'lock':\n      name = [symbol, toUpper(expr[resource])].filter(hasVal).join(' ')\n      break\n    case 'constraint':\n      name = identifierToSql(expr[resource])\n      dataType = [createDefinitionToSQL(createDefinition)]\n      break\n    case 'key':\n      name = identifierToSql(expr[resource])\n      break\n    default:\n      break\n  }\n  const alterArray = [\n    toUpper(action),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    oldColumn && columnRefToSQL(oldColumn),\n    toUpper(prefix),\n    name,\n    dataType.filter(hasVal).join(' '),\n    firstAfter && `${toUpper(firstAfter.keyword)} ${columnRefToSQL(firstAfter.column)}`,\n  ]\n  return alterArray.filter(hasVal).join(' ')\n}\n\nexport {\n  alterToSQL,\n  alterExprToSQL,\n}\n","import {\n  literalToSQL,\n  identifierToSql,\n  toUpper,\n  hasVal,\n  commentToSQL,\n  onPartitionsToSQL,\n} from './util'\nimport { exprToSQL } from './expr'\n\nfunction indexTypeToSQL(indexType) {\n  if (!indexType) return []\n  const { keyword, type } = indexType\n  return [keyword.toUpperCase(), type.toUpperCase()]\n}\n\nfunction indexOptionToSQL(indexOpt) {\n  if (!indexOpt) return\n  const { type, expr, symbol } = indexOpt\n  const upperType = type.toUpperCase()\n  const indexOptArray = []\n  indexOptArray.push(upperType)\n  switch (upperType) {\n    case 'KEY_BLOCK_SIZE':\n      if (symbol) indexOptArray.push(symbol)\n      indexOptArray.push(literalToSQL(expr))\n      break\n    case 'BTREE':\n    case 'HASH':\n      indexOptArray.length = 0\n      indexOptArray.push(...indexTypeToSQL(indexOpt))\n      break\n    case 'WITH PARSER':\n      indexOptArray.push(expr)\n      break\n    case 'VISIBLE':\n    case 'INVISIBLE':\n      break\n    case 'COMMENT':\n      indexOptArray.shift()\n      indexOptArray.push(commentToSQL(indexOpt))\n      break\n    case 'DATA_COMPRESSION':\n      indexOptArray.push(symbol, toUpper(expr.value), onPartitionsToSQL(expr.on))\n      break\n    default:\n      indexOptArray.push(symbol, literalToSQL(expr))\n      break\n  }\n  return indexOptArray.filter(hasVal).join(' ')\n}\n\nfunction indexOptionListToSQL(indexOptList) {\n  if (!indexOptList) return []\n  return indexOptList.map(indexOptionToSQL)\n}\n\nfunction indexTypeAndOptionToSQL(indexDefinition) {\n  const {\n    constraint_type: constraintType,\n    index_type: indexType,\n    index_options: indexOptions = [],\n    definition,\n  } = indexDefinition\n  const dataType = []\n  dataType.push(...indexTypeToSQL(indexType))\n  if (definition && definition.length) {\n    const definitionSQL = toUpper(constraintType) === 'CHECK' ? `(${exprToSQL(definition[0])})` : `(${definition.map(col => identifierToSql(col)).join(', ')})`\n    dataType.push(definitionSQL)\n  }\n  dataType.push(indexOptionListToSQL(indexOptions).join(' '))\n  return dataType\n}\n\nfunction indexDefinitionToSQL(indexDefinition) {\n  const indexSQL = []\n  const {\n    keyword,\n    index,\n  } = indexDefinition\n  indexSQL.push(toUpper(keyword))\n  indexSQL.push(index)\n  indexSQL.push(...indexTypeAndOptionToSQL(indexDefinition))\n  return indexSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  indexDefinitionToSQL,\n  indexTypeToSQL,\n  indexOptionToSQL,\n  indexOptionListToSQL,\n  indexTypeAndOptionToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { commonTypeValue, hasVal, identifierToSql, toUpper } from './util'\nimport { overToSQL } from './over'\n\nfunction arrayDimensionToSymbol(target) {\n  if (!target || !target.array) return ''\n  switch (target.array) {\n    case 'one':\n      return '[]'\n    case 'two':\n      return '[][]'\n  }\n}\n\nfunction castToSQL(expr) {\n  const { collate, target, expr: expression, symbol, as: alias, tail } = expr\n  const { length, dataType, parentheses, scale } = target\n  let str = ''\n  if (length != null) str = scale ? `${length}, ${scale}` : length\n  if (parentheses) str = `(${str})`\n  let prefix = exprToSQL(expression)\n  let symbolChar = '::'\n  let suffix = ''\n  if (symbol === 'as') {\n    prefix = `CAST(${prefix}`\n    suffix = ')'\n    symbolChar = ` ${symbol.toUpperCase()} `\n  }\n  if (tail) suffix += ` ${tail.operator} ${exprToSQL(tail.expr)}`\n  if (alias) suffix += ` AS ${identifierToSql(alias)}`\n  if (collate) suffix += ` ${commonTypeValue(collate).join(' ')}`\n  const arrayDimension = arrayDimensionToSymbol(target)\n  return `${prefix}${symbolChar}${dataType}${arrayDimension}${str}${suffix}`\n}\n\nfunction extractFunToSQL(stmt) {\n  const { args, type } = stmt\n  const { field, cast_type: castType, source } = args\n  const result = [`${toUpper(type)}(${toUpper(field)}`, 'FROM', toUpper(castType), exprToSQL(source)]\n  return `${result.filter(hasVal).join(' ')})`\n}\n\nfunction funcToSQL(expr) {\n  const { args, name } = expr\n  const { parentheses, over, collate } = expr\n  const collateStr = commonTypeValue(collate).join(' ')\n  const overStr = overToSQL(over)\n  if (!args) return [name, overStr].filter(hasVal).join(' ')\n  const str = `${name}(${exprToSQL(args).join(', ')})`\n  return [parentheses ? `(${str})` : str, collateStr, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  castToSQL,\n  extractFunToSQL,\n  funcToSQL,\n}\n","import { alterExprToSQL } from './alter'\nimport { columnDataType, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { identifierToSql, hasVal, toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { tablesToSQL, tableToSQL } from './tables'\n\nfunction callToSQL(stmt) {\n  const type = 'CALL'\n  const storeProcessCall = exprToSQL(stmt.expr)\n  return `${type} ${storeProcessCall}`\n}\n\nfunction commonCmdToSQL(stmt) {\n  const { type, keyword, name } = stmt\n  const clauses = [toUpper(type), toUpper(keyword)]\n  switch (keyword) {\n    case 'table':\n      clauses.push(tablesToSQL(name))\n      break\n    case 'procedure':\n      clauses.push(identifierToSql(name))\n      break\n    case 'index':\n      clauses.push(\n        columnRefToSQL(name),\n        'ON',\n        tableToSQL(stmt.table),\n        stmt.options && stmt.options.map(alterExprToSQL).filter(hasVal).join(' ')\n      )\n      break\n    default:\n      break\n  }\n  return clauses.filter(hasVal).join(' ')\n}\n\nfunction descToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  return `${action} ${identifierToSql(table)}`\n}\n\nfunction renameToSQL(stmt) {\n  const { type, table } = stmt\n  const clauses = []\n  const prefix = `${type && type.toUpperCase()} TABLE`\n  if (table) {\n    for (const tables of table) {\n      const renameInfo = tables.map(tableToSQL)\n      clauses.push(renameInfo.join(' TO '))\n    }\n  }\n  return `${prefix} ${clauses.join(', ')}`\n}\n\nfunction useToSQL(stmt) {\n  const { type, db } = stmt\n  const action = toUpper(type)\n  const database = identifierToSql(db)\n  return `${action} ${database}`\n}\n\nfunction setVarToSQL(stmt) {\n  const { expr } = stmt\n  const action = 'SET'\n  const val = exprToSQL(expr)\n  return `${action} ${val}`\n}\n\nfunction pgLock(stmt) {\n  const { lock_mode: lockMode, nowait } = stmt\n  const lockInfo = []\n  if (lockMode) {\n    const { mode } = lockMode\n    lockInfo.push(mode.toUpperCase())\n  }\n  if (nowait) lockInfo.push(nowait.toUpperCase())\n  return lockInfo\n}\n\nfunction lockUnlockToSQL(stmt) {\n  const { type, keyword, tables } = stmt\n  const result = [type.toUpperCase(), toUpper(keyword)]\n  if (type.toUpperCase() === 'UNLOCK') return result.join(' ')\n  const tableStmt = []\n  for (const tableInfo of tables) {\n    const { table, lock_type: lockType } = tableInfo\n    const tableInfoTemp = [tableToSQL(table)]\n    if (lockType) {\n      const lockKeyList = ['prefix', 'type', 'suffix']\n      tableInfoTemp.push(lockKeyList.map(key => toUpper(lockType[key])).filter(hasVal).join(' '))\n    }\n    tableStmt.push(tableInfoTemp.join(' '))\n  }\n  result.push(tableStmt.join(', '), ...pgLock(stmt))\n  return result.filter(hasVal).join(' ')\n}\n\nfunction declareToSQL(stmt) {\n  const { type, declare } = stmt\n  const result = [toUpper(type)]\n  const info = declare.map(dec => {\n    const { at, name, as, prefix, definition, keyword } = dec\n    const declareInfo = [`${at}${name}`, toUpper(as)]\n    switch (keyword) {\n      case 'variable':\n        declareInfo.push(columnDataType(prefix))\n        if (definition) declareInfo.push('=', exprToSQL(definition))\n        break\n      case 'cursor':\n        declareInfo.push(toUpper(prefix))\n        break\n      case 'table':\n        declareInfo.push(toUpper(prefix), `(${definition.map(createDefinitionToSQL).join(', ')})`)\n        break\n      default:\n        break\n    }\n    return declareInfo.filter(hasVal).join(' ')\n  }).join(', ')\n  result.push(info)\n  return result.join(' ')\n}\n\nexport {\n  callToSQL,\n  commonCmdToSQL,\n  declareToSQL,\n  descToSQL,\n  renameToSQL,\n  useToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n}\n","import { alterToSQL } from './alter'\nimport { createToSQL } from './create'\nimport { selectToSQL } from './select'\nimport { deleteToSQL } from './delete'\nimport { updateToSQL } from './update'\nimport { insertToSQL } from './insert'\nimport {\n  callToSQL,\n  commonCmdToSQL,\n  declareToSQL,\n  descToSQL,\n  useToSQL,\n  renameToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n} from './command'\nimport { orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { showToSQL } from './show'\nimport { analyzeToSQL, attachToSQL } from './sqlite'\nimport { withToSQL } from './with'\nimport { hasVal } from './util'\n\nconst typeToSQLFn = {\n  alter    : alterToSQL,\n  analyze  : analyzeToSQL,\n  attach   : attachToSQL,\n  create   : createToSQL,\n  select   : selectToSQL,\n  delete   : deleteToSQL,\n  update   : updateToSQL,\n  insert   : insertToSQL,\n  drop     : commonCmdToSQL,\n  truncate : commonCmdToSQL,\n  replace  : insertToSQL,\n  declare  : declareToSQL,\n  use      : useToSQL,\n  rename   : renameToSQL,\n  call     : callToSQL,\n  desc     : descToSQL,\n  set      : setVarToSQL,\n  lock     : lockUnlockToSQL,\n  unlock   : lockUnlockToSQL,\n  show     : showToSQL,\n}\n\nfunction unionToSQL(stmt) {\n  const fun = typeToSQLFn[stmt.type]\n  const res = [fun(stmt)]\n  const { _orderby, _limit } = stmt\n  while (stmt._next) {\n    const unionKeyword = (stmt.union || 'union').toUpperCase()\n    res.push(unionKeyword, fun(stmt._next))\n    stmt = stmt._next\n  }\n  res.push(orderOrPartitionByToSQL(_orderby, 'order by'), limitToSQL(_limit))\n  return res.filter(hasVal).join(' ')\n}\n\nfunction bigQueryToSQL(stmt) {\n  const { with: withExpr, parentheses, select, orderby, limit } = stmt\n  const result = [withToSQL(withExpr), parentheses && '(', unionToSQL(select), parentheses && ')']\n  // process with, orderby and limit\n  result.push(orderOrPartitionByToSQL(orderby, 'order by'), limitToSQL(limit))\n  return result.filter(val => val).join(' ')\n}\n\nfunction multipleToSQL(stmt) {\n  const res = []\n  for (let i = 0, len = stmt.length; i < len; ++i) {\n    let astInfo = stmt[i] && stmt[i].ast\n    if (!astInfo) astInfo = stmt[i]\n    res.push(unionToSQL(astInfo))\n  }\n  return res.join(' ; ')\n}\n\nexport {\n  bigQueryToSQL,\n  unionToSQL,\n  multipleToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { tableToSQL } from './tables'\nimport { hasVal, identifierToSql, toUpper } from './util'\n\nfunction analyzeToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  const tableName = tableToSQL(table)\n  return [action, tableName].join(' ')\n}\n\nfunction attachToSQL(stmt) {\n  const { type, database, expr, as, schema } = stmt\n  return [toUpper(type), toUpper(database), exprToSQL(expr), toUpper(as), identifierToSql(schema)].filter(hasVal).join(' ')\n}\n\nexport {\n  attachToSQL,\n  analyzeToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal } from './util'\n\nfunction deleteToSQL(stmt) {\n  const clauses = ['DELETE']\n  const { columns, from, table, where, orderby, limit } = stmt\n  const columnInfo = columnsToSQL(columns, from)\n  clauses.push(columnInfo)\n  if (Array.isArray(table)) {\n    if (!(table.length === 1 && table[0].addition === true)) clauses.push(tablesToSQL(table))\n  }\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  deleteToSQL,\n}\n","import { toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { asWindowSpecToSQL } from './window'\n\nfunction overToSQL(over) {\n  if (!over) return\n  const { as_window_specification: asWindowSpec, expr, keyword, type } = over\n  const upperType = toUpper(type)\n  if (upperType === 'WINDOW') return `OVER ${asWindowSpecToSQL(asWindowSpec)}`\n  if (upperType === 'ON UPDATE') {\n    let onUpdate = `${toUpper(type)} ${toUpper(keyword)}`\n    const args = exprToSQL(expr)\n    if (args) onUpdate = `${onUpdate}(${args.join(', ')})`\n    return onUpdate\n  }\n  throw new Error('unknown over type')\n}\n\nexport {\n  overToSQL,\n}\n","import { exprToSQL, getExprListSQL, orderOrPartitionByToSQL } from './expr'\nimport { columnRefToSQL, columnsToSQL } from './column'\nimport { limitToSQL } from './limit'\nimport { withToSQL } from './with'\nimport { tablesToSQL } from './tables'\nimport { hasVal, commonOptionConnector, connector, topToSQL, toUpper } from './util'\n\nfunction distinctToSQL(distinct) {\n  if (!distinct) return\n  if (typeof distinct === 'string') return distinct\n  const { type, columns } = distinct\n  const result = [toUpper(type)]\n  if (columns) result.push(`(${columns.map(columnRefToSQL).join(', ')})`)\n  return result.filter(hasVal).join(' ')\n}\n/**\n * @param {Object}      stmt\n * @param {?Array}      stmt.with\n * @param {?Array}      stmt.options\n * @param {?string}     stmt.distinct\n * @param {?Array|string}   stmt.columns\n * @param {?Array}      stmt.from\n * @param {?Object}     stmt.where\n * @param {?Array}      stmt.groupby\n * @param {?Object}     stmt.having\n * @param {?Array}      stmt.orderby\n * @param {?Array}      stmt.limit\n * @return {string}\n */\n\nfunction selectToSQL(stmt) {\n  const {\n    as_struct_val: asStructVal, columns, distinct, from, for_sys_time_as_of: forSystem = {}, for_update: forUpdate, groupby, having, limit, options, orderby, parentheses_symbol: parentheses, top, window: windowInfo, with: withInfo, where,\n  } = stmt\n  const clauses = [withToSQL(withInfo), 'SELECT', toUpper(asStructVal)]\n  clauses.push(topToSQL(top))\n  if (Array.isArray(options)) clauses.push(options.join(' '))\n  clauses.push(distinctToSQL(distinct), columnsToSQL(columns, from))\n  // FROM + joins\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  const { keyword, expr } = forSystem || {}\n  clauses.push(commonOptionConnector(keyword, exprToSQL, expr))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(connector('GROUP BY', getExprListSQL(groupby).join(', ')))\n  clauses.push(commonOptionConnector('HAVING', exprToSQL, having))\n  clauses.push(commonOptionConnector('WINDOW', exprToSQL, windowInfo))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  clauses.push(toUpper(forUpdate))\n  const sql = clauses.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nexport {\n  selectToSQL,\n}\n","import { alterExprToSQL } from './alter'\nimport { exprToSQL } from './expr'\nimport { indexDefinitionToSQL, indexOptionListToSQL, indexTypeToSQL } from './index-definition'\nimport { columnDefinitionToSQL } from './column'\nimport { constraintDefinitionToSQL } from './constrain'\nimport { funcToSQL } from './func'\nimport { tablesToSQL, tableOptionToSQL, tableToSQL } from './tables'\nimport { unionToSQL } from './union'\nimport { columnIdentifierToSql, columnOrderListToSQL, commonOptionConnector, commonKeywordArgsToSQL, toUpper, hasVal, identifierToSql, triggerEventToSQL, literalToSQL } from './util'\n\nfunction createDefinitionToSQL(definition) {\n  if (!definition) return []\n  const { resource } = definition\n  switch (resource) {\n    case 'column':\n      return columnDefinitionToSQL(definition)\n    case 'index':\n      return indexDefinitionToSQL(definition)\n    case 'constraint':\n      return constraintDefinitionToSQL(definition)\n    case 'sequence':\n      return [toUpper(definition.prefix), exprToSQL(definition.value)].filter(hasVal).join(' ')\n    default:\n      throw new Error(`unknown resource = ${resource} type`)\n  }\n}\n\nfunction createTableToSQL(stmt) {\n  const {\n    type, keyword, table, like, as, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n    table_options: tableOptions,\n    ignore_replace: ignoreReplace,\n    query_expr: queryExpr,\n  } = stmt\n  const sql = [toUpper(type), toUpper(temporary), toUpper(keyword), toUpper(ifNotExists), tablesToSQL(table)]\n  if (like) {\n    const { type: likeType, table: likeTable } = like\n    const likeTableName = tablesToSQL(likeTable)\n    sql.push(toUpper(likeType), likeTableName)\n    return sql.filter(hasVal).join(' ')\n  }\n  if (createDefinition) {\n    sql.push(`(${createDefinition.map(createDefinitionToSQL).join(', ')})`)\n  }\n  if (tableOptions) {\n    sql.push(tableOptions.map(tableOptionToSQL).join(' '))\n  }\n  sql.push(toUpper(ignoreReplace), toUpper(as))\n  if (queryExpr) sql.push(unionToSQL(queryExpr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createTriggerToSQL(stmt) {\n  const {\n    constraint, constraint_kw: constraintKw,\n    deferrable,\n    events, execute,\n    for_each: forEach, from,\n    location,\n    keyword,\n    type, table,\n    when,\n  } = stmt\n  const sql = [toUpper(type), toUpper(constraintKw), toUpper(keyword), identifierToSql(constraint), toUpper(location)]\n  const event = triggerEventToSQL(events)\n  sql.push(event, 'ON', tableToSQL(table))\n  if (from) sql.push('FROM', tableToSQL(from))\n  sql.push(...commonKeywordArgsToSQL(deferrable), ...commonKeywordArgsToSQL(forEach))\n  if (when) sql.push(toUpper(when.type), exprToSQL(when.cond))\n  sql.push(toUpper(execute.keyword), funcToSQL(execute.expr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createExtensionToSQL(stmt) {\n  const {\n    extension, from, if_not_exists: ifNotExists,\n    keyword, schema, type, with: withName, version,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    literalToSQL(extension),\n    toUpper(withName),\n    commonOptionConnector('SCHEMA', literalToSQL, schema),\n    commonOptionConnector('VERSION', literalToSQL, version),\n    commonOptionConnector('FROM', literalToSQL, from),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createIndexToSQL(stmt) {\n  const {\n    concurrently, filestream_on: fileStream, keyword, include, index_columns: indexColumns,\n    index_type: indexType, index_using: indexUsing, index, on, index_options: indexOpt, algorithm_option: algorithmOpt, lock_option: lockOpt, on_kw: onKw, table, tablespace, type, where,\n    with: withExpr, with_before_where: withBeforeWhere,\n  } = stmt\n  const withIndexOpt = withExpr && `WITH (${indexOptionListToSQL(withExpr).join(', ')})`\n  const includeColumns = include && `${toUpper(include.keyword)} (${include.columns.map(col => identifierToSql(col)).join(', ')})`\n  const sql = [\n    toUpper(type), toUpper(indexType), toUpper(keyword), toUpper(concurrently),\n    identifierToSql(index), toUpper(onKw), tableToSQL(table), ...indexTypeToSQL(indexUsing),\n    `(${columnOrderListToSQL(indexColumns)})`, includeColumns, indexOptionListToSQL(indexOpt).join(' '), alterExprToSQL(algorithmOpt), alterExprToSQL(lockOpt),\n    commonOptionConnector('TABLESPACE', literalToSQL, tablespace),\n  ]\n  if (withBeforeWhere) {\n    sql.push(withIndexOpt, commonOptionConnector('WHERE', exprToSQL, where))\n  } else {\n    sql.push(commonOptionConnector('WHERE', exprToSQL, where), withIndexOpt)\n  }\n  sql.push(commonOptionConnector('ON', exprToSQL, on), commonOptionConnector('FILESTREAM_ON', literalToSQL, fileStream))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createSequenceToSQL(stmt) {\n  const {\n    type, keyword, sequence, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(temporary),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    tablesToSQL(sequence),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(createDefinitionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createDatabaseToSQL(stmt) {\n  const {\n    type, keyword, database,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    columnIdentifierToSql(database),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(tableOptionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createToSQL(stmt) {\n  const { keyword } = stmt\n  let sql = ''\n  switch (keyword.toLowerCase()) {\n    case 'table':\n      sql = createTableToSQL(stmt)\n      break\n    case 'trigger':\n      sql = createTriggerToSQL(stmt)\n      break\n    case 'extension':\n      sql = createExtensionToSQL(stmt)\n      break\n    case 'index':\n      sql = createIndexToSQL(stmt)\n      break\n    case 'sequence':\n      sql = createSequenceToSQL(stmt)\n      break\n    case 'database':\n      sql = createDatabaseToSQL(stmt)\n      break\n    default:\n      throw new Error(`unknown create resource ${keyword}`)\n  }\n  return sql\n}\n\nexport {\n  createToSQL,\n  createDefinitionToSQL,\n}\n","import { hasVal, toUpper } from './util'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { overToSQL } from './over'\n\nfunction windowSpecificationToSQL(windowSpec) {\n  const {\n    name,\n    partitionby,\n    orderby,\n    window_frame_clause: windowFrame,\n  } = windowSpec\n  const result = [\n    name,\n    orderOrPartitionByToSQL(partitionby, 'partition by'),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    toUpper(windowFrame),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction asWindowSpecToSQL(asWindowSpec) {\n  if (typeof asWindowSpec === 'string') return asWindowSpec\n  const { window_specification: windowSpec } = asWindowSpec\n  return `(${windowSpecificationToSQL(windowSpec)})`\n}\n\nfunction namedWindowExprToSQL(namedWindowExpr) {\n  const { name, as_window_specification: asWindowSpec } = namedWindowExpr\n  return `${name} AS ${asWindowSpecToSQL(asWindowSpec)}`\n}\n\nfunction namedWindowExprListToSQL(namedWindowExprInfo) {\n  const { expr } = namedWindowExprInfo\n  return expr.map(namedWindowExprToSQL).join(', ')\n}\n\nfunction isConsiderNullsInArgs(fnName) {\n  // position of IGNORE/RESPECT NULLS varies by function\n  switch (toUpper(fnName)) {\n    case 'NTH_VALUE':\n    case 'LEAD':\n    case 'LAG':\n      return false\n    default:\n      return true\n  }\n}\n\nfunction constructArgsList(expr) {\n  const { args, name, consider_nulls = '' } = expr\n  const argsList = args ? exprToSQL(args).join(', ') : ''\n  // cover Syntax from FN_NAME(...args [RESPECT NULLS]) [RESPECT NULLS]\n  const isConsidernulls = isConsiderNullsInArgs(name)\n  const result = [name, '(', argsList, !isConsidernulls && ')', consider_nulls && ' ', consider_nulls, isConsidernulls && ')']\n  return result.filter(hasVal).join('')\n}\n\nfunction windowFuncToSQL(expr) {\n  const { over } = expr\n  const str = constructArgsList(expr)\n  const overStr = overToSQL(over)\n  return [str, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  asWindowSpecToSQL,\n  namedWindowExprToSQL,\n  namedWindowExprListToSQL,\n  windowFuncToSQL,\n  windowSpecificationToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { identifierToSql, commonOptionConnector, hasVal, toUpper, returningToSQL } from './util'\nimport { selectToSQL } from './select'\nimport { setToSQL } from './update'\n\n/**\n * @param {Array} values\n * @return {string}\n */\nfunction valuesToSQL(values) {\n  if (values.type === 'select') return selectToSQL(values)\n  const clauses = values.map(exprToSQL)\n  return `(${clauses.join('), (')})`\n}\n\nfunction partitionToSQL(partition) {\n  if (!partition) return ''\n  const partitionArr = ['PARTITION', '(']\n  if (Array.isArray(partition)) {\n    partitionArr.push(partition.map(identifierToSql).join(', '))\n  } else {\n    const { value } = partition\n    partitionArr.push(value.map(exprToSQL).join(', '))\n  }\n  partitionArr.push(')')\n  return partitionArr.filter(hasVal).join('')\n}\n\nfunction insertToSQL(stmt) {\n  const {\n    table,\n    type,\n    prefix = 'into',\n    columns,\n    values,\n    where,\n    on_duplicate_update: onDuplicateUpdate,\n    partition,\n    returning,\n    set,\n  } = stmt\n  const { keyword, set: duplicateSet } = onDuplicateUpdate || {}\n  const clauses = [toUpper(type), toUpper(prefix), tablesToSQL(table), partitionToSQL(partition)]\n  if (Array.isArray(columns)) clauses.push(`(${columns.map(identifierToSql).join(', ')})`)\n  clauses.push(commonOptionConnector(Array.isArray(values) ? 'VALUES' : '', valuesToSQL, values))\n  clauses.push(commonOptionConnector('SET', setToSQL, set))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(returningToSQL(returning))\n  clauses.push(commonOptionConnector(keyword, setToSQL, duplicateSet))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  insertToSQL,\n  valuesToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { hasVal, identifierToSql, commonOptionConnector, returningToSQL } from './util'\n\n/**\n * @param {Array} sets\n * @return {string}\n */\nfunction setToSQL(sets) {\n  if (!sets || sets.length === 0) return ''\n  const clauses = []\n  for (const set of sets) {\n    const { table, column, value } = set\n    const str = [table, column].filter(hasVal).map(info => identifierToSql(info)).join('.')\n    const setItem = [str]\n    let val = ''\n    if (value) {\n      val = exprToSQL(value)\n      setItem.push('=', val)\n    }\n    clauses.push(setItem.filter(hasVal).join(' '))\n  }\n  return clauses.join(', ')\n}\n\nfunction updateToSQL(stmt) {\n  const { table, set, where, orderby, limit, returning } = stmt\n  const clauses = [\n    'UPDATE',\n    tablesToSQL(table),\n    commonOptionConnector('SET', setToSQL, set),\n    commonOptionConnector('WHERE', exprToSQL, where),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    limitToSQL(limit),\n    returningToSQL(returning),\n  ]\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  updateToSQL,\n  setToSQL,\n}\n","import {\n  identifierToSql,\n  toUpper,\n  hasVal,\n} from './util'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { columnReferenceDefinitionToSQL } from './column'\n\nfunction constraintDefinitionToSQL(constraintDefinition) {\n  if (!constraintDefinition) return\n  const {\n    constraint,\n    constraint_type: constraintType,\n    enforced,\n    index,\n    keyword,\n    reference_definition: referenceDefinition,\n  } = constraintDefinition\n  const constraintSQL = []\n  constraintSQL.push(toUpper(keyword))\n  constraintSQL.push(identifierToSql(constraint))\n  constraintSQL.push(toUpper(constraintType))\n  constraintSQL.push(identifierToSql(index))\n  constraintSQL.push(...indexTypeAndOptionToSQL(constraintDefinition))\n  constraintSQL.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  constraintSQL.push(toUpper(enforced))\n  return constraintSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  constraintDefinitionToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { literalToSQL } from './util'\n\n/**\n * @param {Array<Object>} withExpr\n */\nfunction withToSQL(withExpr) {\n  if (!withExpr || withExpr.length === 0) return\n  const isRecursive = withExpr[0].recursive ? 'RECURSIVE ' : ''\n  const withExprStr = withExpr.map(cte => {\n    const { name, stmt, columns } = cte\n    const column = Array.isArray(columns) ? `(${columns.join(', ')})` : ''\n    return `${literalToSQL(name)}${column} AS (${exprToSQL(stmt)})`\n  }).join(', ')\n\n  return `WITH ${isRecursive}${withExprStr}`\n}\n\nexport {\n  withToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal, literalToSQL, toUpper } from './util'\n\nfunction showEventToSQL(showEventExpr) {\n  const { in: inClause, from , limit } = showEventExpr\n  return [\n    commonOptionConnector('IN', literalToSQL, inClause && inClause.right),\n    commonOptionConnector('FROM', tablesToSQL, from),\n    limitToSQL(limit),\n  ].filter(hasVal).join(' ')\n}\n\nfunction showLikeAndWhereToSQL(showCharacterSetExpr) {\n  const { expr } = showCharacterSetExpr\n  if (!expr) return\n  const { op } = expr\n  if (toUpper(op) === 'LIKE') return commonOptionConnector('LIKE', literalToSQL, expr.right)\n  return commonOptionConnector('WHERE', exprToSQL, expr)\n}\n\nfunction showGrantsForUser(showGrantsForExpr) {\n  const { for: forExpr } = showGrantsForExpr\n  if (!forExpr) return\n  const { user, host, role_list } = forExpr\n  let userAndHost = `'${user}'`\n  if (host) userAndHost += `@'${host}'`\n  return ['FOR', userAndHost, role_list && 'USING', role_list && role_list.map(role => `'${role}'`).join(', ')].filter(hasVal).join(' ')\n}\n\nfunction showToSQL(showExpr) {\n  const { suffix, keyword } = showExpr\n  let str = ''\n  switch (toUpper(keyword)) {\n    case 'BINLOG':\n      str = showEventToSQL(showExpr)\n      break\n    case 'CHARACTER':\n    case 'COLLATION':\n      str = showLikeAndWhereToSQL(showExpr)\n      break\n    case 'GRANTS':\n      str = showGrantsForUser(showExpr)\n      break\n    default:\n      break\n  }\n  const result = ['SHOW', toUpper(keyword), toUpper(suffix), str]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  showToSQL,\n}\n","import { parse } from '../pegjs/mysql.pegjs'\n\nexport default {\n  [PARSER_NAME] : parse,\n}\n","import { bigQueryToSQL, unionToSQL, multipleToSQL } from './union'\n\nconst surportedTypes = ['analyze', 'attach', 'select', 'delete', 'update', 'insert', 'drop', 'rename', 'truncate', 'call', 'desc', 'use', 'alter', 'set', 'create', 'lock', 'unlock', 'bigquery', 'declare', 'show', 'replace']\n\nfunction checkSupported(expr) {\n  const ast = expr && expr.ast ? expr.ast : expr\n  if (!surportedTypes.includes(ast.type)) throw new Error(`${ast.type} statements not supported at the moment`)\n}\n\nfunction toSQL(ast) {\n  if (Array.isArray(ast)) {\n    ast.forEach(checkSupported)\n    return multipleToSQL(ast)\n  }\n  checkSupported(ast)\n  const { type } = ast\n  if (type === 'bigquery') return bigQueryToSQL(ast)\n  return unionToSQL(ast)\n}\n\nfunction goToSQL(stmt) {\n  if (!stmt || stmt.length === 0) return ''\n  const res = [toSQL(stmt.ast)]\n  if (stmt.go_next) res.push(stmt.go.toUpperCase(), goToSQL(stmt.go_next))\n  return res.filter(sqlItem => sqlItem).join(' ')\n}\n\nexport default function astToSQL(ast) {\n  if (ast.go === 'go') return goToSQL(ast)\n  return toSQL(ast)\n}\n","import parsers from './parser.all'\nimport astToSQL from './sql'\nimport { DEFAULT_OPT, setParserOpt } from './util'\n\nclass Parser {\n  astify(sql, opt = DEFAULT_OPT) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.ast\n  }\n\n  sqlify(ast, opt = DEFAULT_OPT) {\n    setParserOpt(opt)\n    return astToSQL(ast, opt)\n  }\n\n  parse(sql, opt = DEFAULT_OPT) {\n    const { database = (PARSER_NAME || 'mysql') } = opt\n    setParserOpt(opt)\n    const typeCase = database.toLowerCase()\n    if (parsers[typeCase]) return parsers[typeCase](sql.trim())\n    throw new Error(`${database} is not supported currently`)\n  }\n\n  whiteListCheck(sql, whiteList, opt = DEFAULT_OPT) {\n    if (!whiteList || whiteList.length === 0) return\n    const { type = 'table' } = opt\n    if (!this[`${type}List`] || typeof this[`${type}List`] !== 'function') throw new Error(`${type} is not valid check mode`)\n    const checkFun = this[`${type}List`].bind(this)\n    const authorityList = checkFun(sql, opt)\n    let hasAuthority = true\n    let denyInfo = ''\n    for (const authority of authorityList) {\n      let hasCorrespondingAuthority = false\n      for (const whiteAuthority of whiteList) {\n        const regex = new RegExp(whiteAuthority, 'i')\n        if (regex.test(authority)) {\n          hasCorrespondingAuthority = true\n          break\n        }\n      }\n      if (!hasCorrespondingAuthority) {\n        denyInfo = authority\n        hasAuthority = false\n        break\n      }\n    }\n    if (!hasAuthority) throw new Error(`authority = '${denyInfo}' is required in ${type} whiteList to execute SQL = '${sql}'`)\n  }\n\n  tableList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.tableList\n  }\n\n  columnList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.columnList\n  }\n}\n\nexport default Parser\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nvar BigInt = require(\"big-integer\");\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { start: peg$parsestart },\n      peg$startRuleFunction  = peg$parsestart,\n\n      peg$c0 = function(n) {\n          return n\n        },\n      peg$c1 = function(head, tail) {\n            const cur = [head && head.ast || head];\n            for (let i = 0; i < tail.length; i++) {\n              if(!tail[i][3] || tail[i][3].length === 0) continue;\n              cur.push(tail[i][3] && tail[i][3].ast || tail[i][3]);\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: cur\n            }\n          },\n      peg$c2 = \"(\",\n      peg$c3 = peg$literalExpectation(\"(\", false),\n      peg$c4 = \")\",\n      peg$c5 = peg$literalExpectation(\")\", false),\n      peg$c6 = function(s) {\n            return {\n              ...s[2],\n              parentheses: true,\n            }\n          },\n      peg$c7 = function(cte, s, o, l, se) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'bigquery',\n              with: cte,\n              select: s && s.ast,\n              orderby: o,\n              limit: l,\n              parentheses: s && s.parentheses || false,\n            }\n          }\n        },\n      peg$c8 = function(u, s) {\n          return s ? `union ${s.toLowerCase()}` : 'union'\n        },\n      peg$c9 = \"intersect\",\n      peg$c10 = peg$literalExpectation(\"INTERSECT\", true),\n      peg$c11 = \"except\",\n      peg$c12 = peg$literalExpectation(\"EXCEPT\", true),\n      peg$c13 = function(u, s) {\n          return `${u.toLowerCase()} ${s.toLowerCase()}`\n        },\n      peg$c14 = function(s) {\n            return {\n              ...s[2],\n              parentheses: true\n            }\n          },\n      peg$c15 = function(head, tail) {\n            let cur = head\n            for (let i = 0; i < tail.length; i++) {\n              cur._next = tail[i][3]\n              cur.union = tail[i][1]\n              cur = cur._next\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: head\n            }\n          },\n      peg$c16 = function(s) {\n            return {\n              ...s[2],\n              parentheses_symbol: true\n            }\n          },\n      peg$c17 = function(head, tail) {\n            return createList(head, tail);\n          },\n      peg$c18 = function(name, stmt) {\n          if (typeof name === 'string') name = { type: 'default', value: name }\n          return { name, stmt };\n        },\n      peg$c19 = function(cte, sv, d, c, f, fs, w, g, h, o, l, win) {\n            if(Array.isArray(f)) f.forEach(info => info.table && tableList.add(`select::${info.db}::${info.table}`));\n            return {\n                type: 'select',\n                as_struct_val: sv,\n                distinct: d,\n                columns: c,\n                from: f,\n                for_sys_time_as_of: fs,\n                where: w,\n                with: cte,\n                groupby: g,\n                having: h,\n                orderby: o,\n                limit: l,\n                window:win,\n            };\n        },\n      peg$c20 = \"for\",\n      peg$c21 = peg$literalExpectation(\"FOR\", true),\n      peg$c22 = \"system_time\",\n      peg$c23 = peg$literalExpectation(\"SYSTEM_TIME\", true),\n      peg$c24 = \"as\",\n      peg$c25 = peg$literalExpectation(\"AS\", true),\n      peg$c26 = \"of\",\n      peg$c27 = peg$literalExpectation(\"OF\", true),\n      peg$c28 = function(e) {\n          return {\n            keyword: 'for system_time as of',\n            expr: e\n          }\n        },\n      peg$c29 = function(a, k) {\n          return `${a[0].toLowerCase()} ${k.toLowerCase()}`\n        },\n      peg$c30 = function(e, alias) {\n            return { expr: e, as:alias };\n          },\n      peg$c31 = \"replace\",\n      peg$c32 = peg$literalExpectation(\"REPLACE\", true),\n      peg$c33 = function(k, c) {\n          columnList.add('select::null::(.*)')\n          return {\n            expr_list: c,\n            parentheses: true,\n            star: '*',\n            type: k.toLowerCase(),\n          }\n        },\n      peg$c34 = function(head, tail) {\n            columnList.add('select::null::(.*)');\n            if (tail && tail.length > 0) {\n              head[0] = {\n                expr: {\n                  type: 'column_ref',\n                  table: null,\n                  column: '*'\n                },\n                as: null\n              };\n              return createList(head[0], tail);\n            }\n            return head[0];\n          },\n      peg$c35 = function(c) {\n          return c\n        },\n      peg$c36 = function(n, t, l) {\n          return {\n            expr: n,\n            offset: `[${t}(${l.value})]`\n          }\n        },\n      peg$c37 = function(tbl, pro) {\n            columnList.add(`select::${tbl}::(.*)`)\n            let column = '*'\n            const mid = pro && pro[0]\n            if (typeof mid === 'string') column = `${mid}.*`\n            if (mid && mid.expr && mid.offset) column = { ...mid, suffix: '.*' }\n            return {\n              expr: {\n                type: 'column_ref',\n                table: tbl,\n                column,\n              },\n              as: null\n            }\n          },\n      peg$c38 = function(c, as) {\n          return {\n              expr: {\n                type: 'column_ref',\n                table: null,\n                column: c\n              },\n              as: as\n            }\n        },\n      peg$c39 = function(i) { return i; },\n      peg$c40 = \"unnest\",\n      peg$c41 = peg$literalExpectation(\"UNNEST\", true),\n      peg$c42 = function(a, alias, wf) {\n          return {\n            type: 'unnest',\n            expr: a,\n            parentheses: true,\n            as:alias,\n            with_offset: wf,\n          }\n        },\n      peg$c43 = function(l) {\n          return l\n        },\n      peg$c44 = function(alias) {\n          return {\n            keyword: 'with offset as',\n            as: alias\n          }\n        },\n      peg$c45 = function(head, tail) {\n            return [head, tail]\n          },\n      peg$c46 = function(head, tail) {\n            tail.unshift(head);\n            tail.forEach(tableInfo => {\n              const { table, as } = tableInfo\n              tableAlias[table] = table\n              if (as) tableAlias[as] = table\n              refreshColumnList(columnList)\n            })\n            return tail;\n          },\n      peg$c47 = function(t) { return t; },\n      peg$c48 = function(op, t, head, tail) {\n            t.join = op;\n            t.using = createList(head, tail);\n            return t;\n          },\n      peg$c49 = function(op, t, expr) {\n            t.join = op;\n            t.on   = expr;\n            return t;\n          },\n      peg$c50 = function(op, stmt, alias, expr) {\n          stmt.parentheses = true;\n          return {\n            expr: stmt,\n            as: alias,\n            join: op,\n            on: expr\n          };\n        },\n      peg$c51 = function(t, alias) {\n            if (t.type === 'var') {\n              t.as = alias;\n              return t;\n            } else {\n              return {\n                db: t.db,\n                table: t.table,\n                as: alias\n              };\n            }\n          },\n      peg$c52 = function(stmt, alias) {\n            stmt.parentheses = true;\n            return {\n              expr: stmt,\n              as: alias\n            };\n          },\n      peg$c53 = function() { return 'LEFT JOIN'; },\n      peg$c54 = function() { return 'RIGHT JOIN'; },\n      peg$c55 = function() { return 'FULL JOIN'; },\n      peg$c56 = function(k) { return `${k[0].toUpperCase()} JOIN`; },\n      peg$c57 = function(k) { return k ? `${k[0].toUpperCase()} JOIN` : 'JOIN'; },\n      peg$c58 = function(project, dt, tail) {\n            const obj = { db: null, table: project };\n            if (tail !== null) {\n              obj.db = `${project}.${dt[3]}`;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c59 = function(dt, tail) {\n            const obj = { db: null, table: dt };\n            if (tail !== null) {\n              obj.db = dt;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c60 = function(e) { return e; },\n      peg$c61 = function(e) { return e.value; },\n      peg$c62 = function(l) {\n          return {\n            keyword: 'window',\n            type: 'window',\n            expr: l,\n          }\n        },\n      peg$c63 = function(nw, anw) {\n          return {\n            name: nw,\n            as_window_specification: anw,\n          }\n        },\n      peg$c64 = function(n) { return n },\n      peg$c65 = function(ws) {\n          return {\n            window_specification: ws,\n            parentheses: true\n          }\n        },\n      peg$c66 = function(n, bc, l, w) {\n          return {\n            name: n,\n            partitionby: bc,\n            orderby: l,\n            window_frame_clause: w\n          }\n        },\n      peg$c67 = \"range\",\n      peg$c68 = peg$literalExpectation(\"RANGE\", true),\n      peg$c69 = \"unbounded\",\n      peg$c70 = peg$literalExpectation(\"UNBOUNDED\", true),\n      peg$c71 = \"preceding\",\n      peg$c72 = peg$literalExpectation(\"PRECEDING\", true),\n      peg$c73 = \"current\",\n      peg$c74 = peg$literalExpectation(\"CURRENT\", true),\n      peg$c75 = \"ROW\",\n      peg$c76 = peg$literalExpectation(\"ROW\", false),\n      peg$c77 = function() {\n          return 'range between unbounded preceding and current row'\n        },\n      peg$c78 = \"rows\",\n      peg$c79 = peg$literalExpectation(\"ROWS\", true),\n      peg$c80 = \"following\",\n      peg$c81 = peg$literalExpectation(\"FOLLOWING\", true),\n      peg$c82 = function(s, e) {\n          return `rows between ${s.value} preceding and ${e.value} following`\n        },\n      peg$c83 = function(bc) { return bc; },\n      peg$c84 = function(l) { return l; },\n      peg$c85 = function(e, d) {\n          const obj = { expr: e, type: 'ASC' };\n          if (d === 'DESC') obj.type = 'DESC';\n          return obj;\n        },\n      peg$c86 = function(i1, tail) {\n            const res = [i1];\n            if (tail) res.push(tail[2]);\n            return {\n              seperator: tail && tail[0] && tail[0].toLowerCase() || '',\n              value: res\n            };\n          },\n      peg$c87 = function(head, tail) {\n            const el = { type: 'expr_list' };\n            el.value = createList(head, tail);\n            return el;\n          },\n      peg$c88 = function(c) {\n          return {\n            array_path: c,\n            type: 'array',\n            keyword: '',\n            parentheses: true\n          }\n        },\n      peg$c89 = function(s, c) {\n          return {\n            definition: s,\n            array_path: c.map(l => ({ expr: l, as: null })),\n            type: 'array',\n            keyword: s && 'array',\n            parentheses: true\n          }\n        },\n      peg$c90 = function(s, c) {\n          return {\n            definition: s,\n            expr_list: c,\n            type: 'array',\n            keyword: s && 'array',\n            parentheses: true\n          }\n        },\n      peg$c91 = function(s, c) {\n          return {\n            definition: s,\n            expr_list: c,\n            type: 'struct',\n            keyword: s && 'struct',\n            parentheses: true\n          }\n        },\n      peg$c92 = function(head, tail) {\n          return createBinaryExprChain(head, tail);\n        },\n      peg$c93 = function(op, tail) {\n          return createUnaryExpr(op, tail[0][1]);\n        },\n      peg$c94 = function(head, tail) {\n          let result = head;\n          let seperator = ''\n          for (let i = 0; i < tail.length; i++) {\n            if (tail[i][1] === ',') {\n              seperator = ','\n              if (!Array.isArray(result)) result = [result]\n              result.push(tail[i][3])\n            } else {\n              result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n            }\n          }\n          if (seperator === ',') {\n            const el = { type: 'expr_list' };\n            el.value = result\n            return el\n          }\n          return result;\n        },\n      peg$c95 = function(head, tail) {\n            return createBinaryExprChain(head, tail);\n          },\n      peg$c96 = \"!\",\n      peg$c97 = peg$literalExpectation(\"!\", false),\n      peg$c98 = \"=\",\n      peg$c99 = peg$literalExpectation(\"=\", false),\n      peg$c100 = function(expr) {\n            return createUnaryExpr('NOT', expr);\n          },\n      peg$c101 = function(left, rh) {\n            if (rh === null) return left;\n            else if (rh.type === 'arithmetic') return createBinaryExprChain(left, rh.tail);\n            else return createBinaryExpr(rh.op, left, rh.right);\n          },\n      peg$c102 = function(op, stmt) {\n          stmt.parentheses = true;\n          return createUnaryExpr(op, stmt);\n        },\n      peg$c103 = function(nk) { return nk[0] + ' ' + nk[2]; },\n      peg$c104 = function(l) {\n            return { type: 'arithmetic', tail: l };\n          },\n      peg$c105 = \">=\",\n      peg$c106 = peg$literalExpectation(\">=\", false),\n      peg$c107 = \">\",\n      peg$c108 = peg$literalExpectation(\">\", false),\n      peg$c109 = \"<=\",\n      peg$c110 = peg$literalExpectation(\"<=\", false),\n      peg$c111 = \"<>\",\n      peg$c112 = peg$literalExpectation(\"<>\", false),\n      peg$c113 = \"<\",\n      peg$c114 = peg$literalExpectation(\"<\", false),\n      peg$c115 = \"!=\",\n      peg$c116 = peg$literalExpectation(\"!=\", false),\n      peg$c117 = function(right) {\n            return { op: 'IS', right: right };\n          },\n      peg$c118 = function(right) {\n            return { op: 'IS NOT', right: right };\n        },\n      peg$c119 = function(op, begin, end) {\n            return {\n              op: op,\n              right: {\n                type: 'expr_list',\n                value: [begin, end]\n              }\n            };\n          },\n      peg$c120 = function(op, right) {\n            return { op: op, right: right };\n          },\n      peg$c121 = function(op, l) {\n            return { op: op, right: l };\n          },\n      peg$c122 = function(op, e) {\n            return { op: op, right: e };\n          },\n      peg$c123 = \"+\",\n      peg$c124 = peg$literalExpectation(\"+\", false),\n      peg$c125 = \"-\",\n      peg$c126 = peg$literalExpectation(\"-\", false),\n      peg$c127 = function(head, tail) {\n            return createBinaryExprChain(head, tail)\n          },\n      peg$c128 = \"*\",\n      peg$c129 = peg$literalExpectation(\"*\", false),\n      peg$c130 = \"/\",\n      peg$c131 = peg$literalExpectation(\"/\", false),\n      peg$c132 = \"%\",\n      peg$c133 = peg$literalExpectation(\"%\", false),\n      peg$c134 = function(list) {\n              list.parentheses = true;\n              return list;\n          },\n      peg$c135 = function(e, u) {\n            return {\n              type: 'interval',\n              expr: e,\n              unit: u.toLowerCase(),\n            }\n          },\n      peg$c136 = function(condition_list, otherwise) {\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: null,\n              args: condition_list\n            };\n          },\n      peg$c137 = function(expr, condition_list, otherwise) {\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: expr,\n              args: condition_list\n            };\n          },\n      peg$c138 = function(condition, result) {\n          return {\n            type: 'when',\n            cond: condition,\n            result: result\n          };\n        },\n      peg$c139 = function(result) {\n          return { type: 'else', result: result };\n        },\n      peg$c140 = function(tbl, col) {\n            columnList.add(`select::${tbl}::${col}`);\n            return {\n              type: 'column_ref',\n              table: tbl,\n              column: col\n            };\n          },\n      peg$c141 = function(col) {\n            columnList.add(`select::null::${col}`);\n            return {\n              type: 'column_ref',\n              table: null,\n              column: col\n            };\n          },\n      peg$c142 = function(name) { return reservedMap[name.toUpperCase()] === true; },\n      peg$c143 = function(name) {\n            return name;\n          },\n      peg$c144 = function(name) {\n            if (reservedMap[name.toUpperCase()] === true) throw new Error(\"Error: \"+ JSON.stringify(name)+\" is a reserved word, can not as alias clause\");\n            return false\n          },\n      peg$c145 = \"\\\"\",\n      peg$c146 = peg$literalExpectation(\"\\\"\", false),\n      peg$c147 = /^[^\"]/,\n      peg$c148 = peg$classExpectation([\"\\\"\"], true, false),\n      peg$c149 = function(chars) { return chars.join(''); },\n      peg$c150 = \"'\",\n      peg$c151 = peg$literalExpectation(\"'\", false),\n      peg$c152 = /^[^']/,\n      peg$c153 = peg$classExpectation([\"'\"], true, false),\n      peg$c154 = \"`\",\n      peg$c155 = peg$literalExpectation(\"`\", false),\n      peg$c156 = /^[^`]/,\n      peg$c157 = peg$classExpectation([\"`\"], true, false),\n      peg$c158 = function(chars) { return `\\`${chars.join('')}\\``; },\n      peg$c159 = function(name) {\n          return name;\n        },\n      peg$c160 = function(name) { return name; },\n      peg$c161 = function(start, parts) { return start + parts.join(''); },\n      peg$c162 = /^[A-Za-z_]/,\n      peg$c163 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], \"_\"], false, false),\n      peg$c164 = /^[A-Za-z0-9_]/,\n      peg$c165 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\"], false, false),\n      peg$c166 = /^[A-Za-z0-9_:]/,\n      peg$c167 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \":\"], false, false),\n      peg$c168 = \":\",\n      peg$c169 = peg$literalExpectation(\":\", false),\n      peg$c170 = function(l) {\n            return { type: 'param', value: l[1] };\n          },\n      peg$c171 = function(name, e) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: {\n                expr: e\n              }\n            };\n          },\n      peg$c172 = \"update\",\n      peg$c173 = peg$literalExpectation(\"UPDATE\", true),\n      peg$c174 = function(kw, l) {\n          return {\n            type: 'on update',\n            keyword: kw,\n            parentheses: true,\n            expr: l\n          }\n        },\n      peg$c175 = function(kw) {\n          return {\n            type: 'on update',\n            keyword: kw,\n          }\n        },\n      peg$c176 = function(aws) {\n          return {\n            type: 'window',\n            as_window_specification: aws,\n          }\n        },\n      peg$c177 = function(bc, l) {\n          return {\n            partitionby: bc,\n            orderby: l\n          }\n        },\n      peg$c178 = function(name, arg, bc) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: arg,\n              over: bc\n            };\n          },\n      peg$c179 = function(e) { return { expr: e }; },\n      peg$c180 = function(d, c) { return { distinct: d, expr: c }; },\n      peg$c181 = function(d, c, or) {  c.parentheses = true; return { distinct: d, expr: c, orderby: or }; },\n      peg$c182 = function() { return { type: 'star', value: '*' }; },\n      peg$c183 = function(name, l, bc) {\n          if (l && l.type !== 'expr_list') l = { type: 'expr_list', value: [l] }\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c184 = function(name, l, bc) {\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c185 = function(f, up) {\n          return {\n              type: 'function',\n              name: f,\n              over: up\n          }\n        },\n      peg$c186 = function(dt, tail) {\n            let name = dt\n            if (tail !== null) {\n              name = `${dt}.${tail[3]}`\n            }\n            return name;\n          },\n      peg$c187 = \"century\",\n      peg$c188 = peg$literalExpectation(\"CENTURY\", true),\n      peg$c189 = \"day\",\n      peg$c190 = peg$literalExpectation(\"DAY\", true),\n      peg$c191 = \"decade\",\n      peg$c192 = peg$literalExpectation(\"DECADE\", true),\n      peg$c193 = \"dow\",\n      peg$c194 = peg$literalExpectation(\"DOW\", true),\n      peg$c195 = \"doy\",\n      peg$c196 = peg$literalExpectation(\"DOY\", true),\n      peg$c197 = \"epoch\",\n      peg$c198 = peg$literalExpectation(\"EPOCH\", true),\n      peg$c199 = \"hour\",\n      peg$c200 = peg$literalExpectation(\"HOUR\", true),\n      peg$c201 = \"isodow\",\n      peg$c202 = peg$literalExpectation(\"ISODOW\", true),\n      peg$c203 = \"isoyear\",\n      peg$c204 = peg$literalExpectation(\"ISOYEAR\", true),\n      peg$c205 = \"microseconds\",\n      peg$c206 = peg$literalExpectation(\"MICROSECONDS\", true),\n      peg$c207 = \"millennium\",\n      peg$c208 = peg$literalExpectation(\"MILLENNIUM\", true),\n      peg$c209 = \"milliseconds\",\n      peg$c210 = peg$literalExpectation(\"MILLISECONDS\", true),\n      peg$c211 = \"minute\",\n      peg$c212 = peg$literalExpectation(\"MINUTE\", true),\n      peg$c213 = \"month\",\n      peg$c214 = peg$literalExpectation(\"MONTH\", true),\n      peg$c215 = \"quarter\",\n      peg$c216 = peg$literalExpectation(\"QUARTER\", true),\n      peg$c217 = \"second\",\n      peg$c218 = peg$literalExpectation(\"SECOND\", true),\n      peg$c219 = \"timezone\",\n      peg$c220 = peg$literalExpectation(\"TIMEZONE\", true),\n      peg$c221 = \"timezone_hour\",\n      peg$c222 = peg$literalExpectation(\"TIMEZONE_HOUR\", true),\n      peg$c223 = \"timezone_minute\",\n      peg$c224 = peg$literalExpectation(\"TIMEZONE_MINUTE\", true),\n      peg$c225 = \"week\",\n      peg$c226 = peg$literalExpectation(\"WEEK\", true),\n      peg$c227 = \"year\",\n      peg$c228 = peg$literalExpectation(\"YEAR\", true),\n      peg$c229 = function() {\n          return f\n        },\n      peg$c230 = function(kw, f, t, s) {\n          return {\n              type: kw.toLowerCase(),\n              args: {\n                field: f,\n                cast_type: t,\n                source: s,\n              }\n          }\n        },\n      peg$c231 = function(e, t) {\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: t\n          };\n        },\n      peg$c232 = function(e, precision) {\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: 'DECIMAL(' + precision + ')'\n            }\n          };\n        },\n      peg$c233 = function(e, precision, scale) {\n            return {\n              type: 'cast',\n              expr: e,\n              symbol: 'as',\n              target: {\n                dataType: 'DECIMAL(' + precision + ', ' + scale + ')'\n              }\n            };\n          },\n      peg$c234 = function(e, s, t) { /* MySQL cast to un-/signed integer */\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: s + (t ? ' ' + t: '')\n            }\n          };\n        },\n      peg$c235 = function() {\n            return { type: 'null', value: null };\n          },\n      peg$c236 = function() {\n          return {\n            type: 'not null',\n            value: 'not null',\n          }\n        },\n      peg$c237 = function() {\n            return { type: 'bool', value: true };\n          },\n      peg$c238 = function() {\n            return { type: 'bool', value: false };\n          },\n      peg$c239 = \"r\",\n      peg$c240 = peg$literalExpectation(\"R\", true),\n      peg$c241 = function(r, ca) {\n            return {\n              type: r ? 'regex_string' : 'single_quote_string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c242 = function(r, ca) {\n            return {\n              type: r ? 'regex_string' : 'string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c243 = function(type, ca) {\n            return {\n              type: type.toLowerCase(),\n              value: ca[1].join('')\n            };\n          },\n      peg$c244 = /^[^\"\\\\\\0-\\x1F\\x7F]/,\n      peg$c245 = peg$classExpectation([\"\\\"\", \"\\\\\", [\"\\0\", \"\\x1F\"], \"\\x7F\"], true, false),\n      peg$c246 = /^[^'\\\\]/,\n      peg$c247 = peg$classExpectation([\"'\", \"\\\\\"], true, false),\n      peg$c248 = \"\\\\'\",\n      peg$c249 = peg$literalExpectation(\"\\\\'\", false),\n      peg$c250 = function() { return \"\\\\'\";  },\n      peg$c251 = \"\\\\\\\"\",\n      peg$c252 = peg$literalExpectation(\"\\\\\\\"\", false),\n      peg$c253 = function() { return '\\\\\"';  },\n      peg$c254 = \"\\\\\\\\\",\n      peg$c255 = peg$literalExpectation(\"\\\\\\\\\", false),\n      peg$c256 = function() { return \"\\\\\\\\\"; },\n      peg$c257 = \"\\\\/\",\n      peg$c258 = peg$literalExpectation(\"\\\\/\", false),\n      peg$c259 = function() { return \"\\\\/\";  },\n      peg$c260 = \"\\\\b\",\n      peg$c261 = peg$literalExpectation(\"\\\\b\", false),\n      peg$c262 = function() { return \"\\b\"; },\n      peg$c263 = \"\\\\f\",\n      peg$c264 = peg$literalExpectation(\"\\\\f\", false),\n      peg$c265 = function() { return \"\\f\"; },\n      peg$c266 = \"\\\\n\",\n      peg$c267 = peg$literalExpectation(\"\\\\n\", false),\n      peg$c268 = function() { return \"\\n\"; },\n      peg$c269 = \"\\\\r\",\n      peg$c270 = peg$literalExpectation(\"\\\\r\", false),\n      peg$c271 = function() { return \"\\r\"; },\n      peg$c272 = \"\\\\t\",\n      peg$c273 = peg$literalExpectation(\"\\\\t\", false),\n      peg$c274 = function() { return \"\\t\"; },\n      peg$c275 = \"\\\\u\",\n      peg$c276 = peg$literalExpectation(\"\\\\u\", false),\n      peg$c277 = function(h1, h2, h3, h4) {\n            return String.fromCharCode(parseInt(\"0x\" + h1 + h2 + h3 + h4));\n          },\n      peg$c278 = \"\\\\\",\n      peg$c279 = peg$literalExpectation(\"\\\\\", false),\n      peg$c280 = function() { return \"\\\\\"; },\n      peg$c281 = /^[\\n\\r]/,\n      peg$c282 = peg$classExpectation([\"\\n\", \"\\r\"], false, false),\n      peg$c283 = function(n) {\n            if (n && n.type === 'bigint') return n\n            return { type: 'number', value: n };\n          },\n      peg$c284 = function(int_, frac, exp) {\n          const numStr = int_ + frac + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c285 = function(int_, frac) {\n          const numStr = int_ + frac\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: numStr\n          }\n          return parseFloat(numStr);\n        },\n      peg$c286 = function(int_, exp) {\n          const numStr = int_ + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c287 = function(int_) {\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: int_\n          }\n          return parseFloat(int_);\n        },\n      peg$c288 = function(op, digits) { return \"-\" + digits; },\n      peg$c289 = function(op, digit) { return \"-\" + digit; },\n      peg$c290 = \".\",\n      peg$c291 = peg$literalExpectation(\".\", false),\n      peg$c292 = function(digits) { return \".\" + digits; },\n      peg$c293 = function(e, digits) { return e + digits; },\n      peg$c294 = function(digits) { return digits.join(\"\"); },\n      peg$c295 = /^[0-9]/,\n      peg$c296 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c297 = /^[0-9a-fA-F]/,\n      peg$c298 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"], [\"A\", \"F\"]], false, false),\n      peg$c299 = /^[eE]/,\n      peg$c300 = peg$classExpectation([\"e\", \"E\"], false, false),\n      peg$c301 = /^[+\\-]/,\n      peg$c302 = peg$classExpectation([\"+\", \"-\"], false, false),\n      peg$c303 = function(e, sign) { return e + (sign !== null ? sign: ''); },\n      peg$c304 = \"null\",\n      peg$c305 = peg$literalExpectation(\"NULL\", true),\n      peg$c306 = \"default\",\n      peg$c307 = peg$literalExpectation(\"DEFAULT\", true),\n      peg$c308 = \"not null\",\n      peg$c309 = peg$literalExpectation(\"NOT NULL\", true),\n      peg$c310 = \"true\",\n      peg$c311 = peg$literalExpectation(\"TRUE\", true),\n      peg$c312 = \"to\",\n      peg$c313 = peg$literalExpectation(\"TO\", true),\n      peg$c314 = \"false\",\n      peg$c315 = peg$literalExpectation(\"FALSE\", true),\n      peg$c316 = \"drop\",\n      peg$c317 = peg$literalExpectation(\"DROP\", true),\n      peg$c318 = function() { return 'DROP'; },\n      peg$c319 = \"use\",\n      peg$c320 = peg$literalExpectation(\"USE\", true),\n      peg$c321 = \"select\",\n      peg$c322 = peg$literalExpectation(\"SELECT\", true),\n      peg$c323 = \"if not exists\",\n      peg$c324 = peg$literalExpectation(\"IF NOT EXISTS\", true),\n      peg$c325 = \"RECURSIVE\",\n      peg$c326 = peg$literalExpectation(\"RECURSIVE\", false),\n      peg$c327 = \"ignore\",\n      peg$c328 = peg$literalExpectation(\"IGNORE\", true),\n      peg$c329 = \"explain\",\n      peg$c330 = peg$literalExpectation(\"EXPLAIN\", true),\n      peg$c331 = \"partition\",\n      peg$c332 = peg$literalExpectation(\"PARTITION\", true),\n      peg$c333 = function() { return 'PARTITION' },\n      peg$c334 = \"into\",\n      peg$c335 = peg$literalExpectation(\"INTO\", true),\n      peg$c336 = \"from\",\n      peg$c337 = peg$literalExpectation(\"FROM\", true),\n      peg$c338 = \"set\",\n      peg$c339 = peg$literalExpectation(\"SET\", true),\n      peg$c340 = \"unlock\",\n      peg$c341 = peg$literalExpectation(\"UNLOCK\", true),\n      peg$c342 = \"lock\",\n      peg$c343 = peg$literalExpectation(\"LOCK\", true),\n      peg$c344 = \"table\",\n      peg$c345 = peg$literalExpectation(\"TABLE\", true),\n      peg$c346 = function() { return 'TABLE'; },\n      peg$c347 = \"tables\",\n      peg$c348 = peg$literalExpectation(\"TABLES\", true),\n      peg$c349 = function() { return 'TABLES'; },\n      peg$c350 = \"collate\",\n      peg$c351 = peg$literalExpectation(\"COLLATE\", true),\n      peg$c352 = function() { return 'COLLATE'; },\n      peg$c353 = \"on\",\n      peg$c354 = peg$literalExpectation(\"ON\", true),\n      peg$c355 = \"left\",\n      peg$c356 = peg$literalExpectation(\"LEFT\", true),\n      peg$c357 = \"right\",\n      peg$c358 = peg$literalExpectation(\"RIGHT\", true),\n      peg$c359 = \"full\",\n      peg$c360 = peg$literalExpectation(\"FULL\", true),\n      peg$c361 = \"inner\",\n      peg$c362 = peg$literalExpectation(\"INNER\", true),\n      peg$c363 = \"cross\",\n      peg$c364 = peg$literalExpectation(\"CROSS\", true),\n      peg$c365 = \"join\",\n      peg$c366 = peg$literalExpectation(\"JOIN\", true),\n      peg$c367 = \"outer\",\n      peg$c368 = peg$literalExpectation(\"OUTER\", true),\n      peg$c369 = \"over\",\n      peg$c370 = peg$literalExpectation(\"OVER\", true),\n      peg$c371 = \"union\",\n      peg$c372 = peg$literalExpectation(\"UNION\", true),\n      peg$c373 = \"value\",\n      peg$c374 = peg$literalExpectation(\"VALUE\", true),\n      peg$c375 = function() { return 'VALUE' },\n      peg$c376 = \"values\",\n      peg$c377 = peg$literalExpectation(\"VALUES\", true),\n      peg$c378 = \"using\",\n      peg$c379 = peg$literalExpectation(\"USING\", true),\n      peg$c380 = \"where\",\n      peg$c381 = peg$literalExpectation(\"WHERE\", true),\n      peg$c382 = \"with\",\n      peg$c383 = peg$literalExpectation(\"WITH\", true),\n      peg$c384 = \"group\",\n      peg$c385 = peg$literalExpectation(\"GROUP\", true),\n      peg$c386 = \"by\",\n      peg$c387 = peg$literalExpectation(\"BY\", true),\n      peg$c388 = \"order\",\n      peg$c389 = peg$literalExpectation(\"ORDER\", true),\n      peg$c390 = \"having\",\n      peg$c391 = peg$literalExpectation(\"HAVING\", true),\n      peg$c392 = \"window\",\n      peg$c393 = peg$literalExpectation(\"WINDOW\", true),\n      peg$c394 = \"ordinal\",\n      peg$c395 = peg$literalExpectation(\"ORDINAL\", true),\n      peg$c396 = function() { return 'ORDINAL' },\n      peg$c397 = \"limit\",\n      peg$c398 = peg$literalExpectation(\"LIMIT\", true),\n      peg$c399 = \"offset\",\n      peg$c400 = peg$literalExpectation(\"OFFSET\", true),\n      peg$c401 = function() { return 'OFFSET'; },\n      peg$c402 = \"asc\",\n      peg$c403 = peg$literalExpectation(\"ASC\", true),\n      peg$c404 = function() { return 'ASC'; },\n      peg$c405 = \"desc\",\n      peg$c406 = peg$literalExpectation(\"DESC\", true),\n      peg$c407 = function() { return 'DESC'; },\n      peg$c408 = \"all\",\n      peg$c409 = peg$literalExpectation(\"ALL\", true),\n      peg$c410 = function() { return 'ALL'; },\n      peg$c411 = \"distinct\",\n      peg$c412 = peg$literalExpectation(\"DISTINCT\", true),\n      peg$c413 = function() { return 'DISTINCT';},\n      peg$c414 = \"between\",\n      peg$c415 = peg$literalExpectation(\"BETWEEN\", true),\n      peg$c416 = function() { return 'BETWEEN'; },\n      peg$c417 = \"in\",\n      peg$c418 = peg$literalExpectation(\"IN\", true),\n      peg$c419 = function() { return 'IN'; },\n      peg$c420 = \"is\",\n      peg$c421 = peg$literalExpectation(\"IS\", true),\n      peg$c422 = function() { return 'IS'; },\n      peg$c423 = \"like\",\n      peg$c424 = peg$literalExpectation(\"LIKE\", true),\n      peg$c425 = function() { return 'LIKE'; },\n      peg$c426 = \"exists\",\n      peg$c427 = peg$literalExpectation(\"EXISTS\", true),\n      peg$c428 = function() { return 'EXISTS'; },\n      peg$c429 = \"not\",\n      peg$c430 = peg$literalExpectation(\"NOT\", true),\n      peg$c431 = function() { return 'NOT'; },\n      peg$c432 = \"and\",\n      peg$c433 = peg$literalExpectation(\"AND\", true),\n      peg$c434 = function() { return 'AND'; },\n      peg$c435 = \"or\",\n      peg$c436 = peg$literalExpectation(\"OR\", true),\n      peg$c437 = function() { return 'OR'; },\n      peg$c438 = \"count\",\n      peg$c439 = peg$literalExpectation(\"COUNT\", true),\n      peg$c440 = function() { return 'COUNT'; },\n      peg$c441 = \"max\",\n      peg$c442 = peg$literalExpectation(\"MAX\", true),\n      peg$c443 = function() { return 'MAX'; },\n      peg$c444 = \"min\",\n      peg$c445 = peg$literalExpectation(\"MIN\", true),\n      peg$c446 = function() { return 'MIN'; },\n      peg$c447 = \"sum\",\n      peg$c448 = peg$literalExpectation(\"SUM\", true),\n      peg$c449 = function() { return 'SUM'; },\n      peg$c450 = \"avg\",\n      peg$c451 = peg$literalExpectation(\"AVG\", true),\n      peg$c452 = function() { return 'AVG'; },\n      peg$c453 = \"extract\",\n      peg$c454 = peg$literalExpectation(\"EXTRACT\", true),\n      peg$c455 = function() { return 'EXTRACT'; },\n      peg$c456 = \"call\",\n      peg$c457 = peg$literalExpectation(\"CALL\", true),\n      peg$c458 = function() { return 'CALL'; },\n      peg$c459 = \"case\",\n      peg$c460 = peg$literalExpectation(\"CASE\", true),\n      peg$c461 = \"when\",\n      peg$c462 = peg$literalExpectation(\"WHEN\", true),\n      peg$c463 = \"then\",\n      peg$c464 = peg$literalExpectation(\"THEN\", true),\n      peg$c465 = \"else\",\n      peg$c466 = peg$literalExpectation(\"ELSE\", true),\n      peg$c467 = \"end\",\n      peg$c468 = peg$literalExpectation(\"END\", true),\n      peg$c469 = \"cast\",\n      peg$c470 = peg$literalExpectation(\"CAST\", true),\n      peg$c471 = \"array\",\n      peg$c472 = peg$literalExpectation(\"ARRAY\", true),\n      peg$c473 = function() { return 'ARRAY'; },\n      peg$c474 = \"bytes\",\n      peg$c475 = peg$literalExpectation(\"BYTES\", true),\n      peg$c476 = function() { return 'BYTES'; },\n      peg$c477 = \"bool\",\n      peg$c478 = peg$literalExpectation(\"BOOL\", true),\n      peg$c479 = function() { return 'BOOL'; },\n      peg$c480 = \"char\",\n      peg$c481 = peg$literalExpectation(\"CHAR\", true),\n      peg$c482 = function() { return 'CHAR'; },\n      peg$c483 = \"geography\",\n      peg$c484 = peg$literalExpectation(\"GEOGRAPHY\", true),\n      peg$c485 = function() { return 'GEOGRAPHY'; },\n      peg$c486 = \"varchar\",\n      peg$c487 = peg$literalExpectation(\"VARCHAR\", true),\n      peg$c488 = function() { return 'VARCHAR';},\n      peg$c489 = \"numeric\",\n      peg$c490 = peg$literalExpectation(\"NUMERIC\", true),\n      peg$c491 = function() { return 'NUMERIC'; },\n      peg$c492 = \"decimal\",\n      peg$c493 = peg$literalExpectation(\"DECIMAL\", true),\n      peg$c494 = function() { return 'DECIMAL'; },\n      peg$c495 = \"signed\",\n      peg$c496 = peg$literalExpectation(\"SIGNED\", true),\n      peg$c497 = function() { return 'SIGNED'; },\n      peg$c498 = \"unsigned\",\n      peg$c499 = peg$literalExpectation(\"UNSIGNED\", true),\n      peg$c500 = function() { return 'UNSIGNED'; },\n      peg$c501 = \"int64\",\n      peg$c502 = peg$literalExpectation(\"INT64\", true),\n      peg$c503 = function() { return 'INT64'; },\n      peg$c504 = \"zerofill\",\n      peg$c505 = peg$literalExpectation(\"ZEROFILL\", true),\n      peg$c506 = function() { return 'ZEROFILL'; },\n      peg$c507 = \"integer\",\n      peg$c508 = peg$literalExpectation(\"INTEGER\", true),\n      peg$c509 = function() { return 'INTEGER'; },\n      peg$c510 = \"json\",\n      peg$c511 = peg$literalExpectation(\"JSON\", true),\n      peg$c512 = function() { return 'JSON'; },\n      peg$c513 = \"smallint\",\n      peg$c514 = peg$literalExpectation(\"SMALLINT\", true),\n      peg$c515 = function() { return 'SMALLINT'; },\n      peg$c516 = \"string\",\n      peg$c517 = peg$literalExpectation(\"STRING\", true),\n      peg$c518 = function() { return 'STRING'; },\n      peg$c519 = \"struct\",\n      peg$c520 = peg$literalExpectation(\"STRUCT\", true),\n      peg$c521 = function() { return 'STRUCT'; },\n      peg$c522 = \"tinyint\",\n      peg$c523 = peg$literalExpectation(\"TINYINT\", true),\n      peg$c524 = function() { return 'TINYINT'; },\n      peg$c525 = \"tinytext\",\n      peg$c526 = peg$literalExpectation(\"TINYTEXT\", true),\n      peg$c527 = function() { return 'TINYTEXT'; },\n      peg$c528 = \"text\",\n      peg$c529 = peg$literalExpectation(\"TEXT\", true),\n      peg$c530 = function() { return 'TEXT'; },\n      peg$c531 = \"mediumtext\",\n      peg$c532 = peg$literalExpectation(\"MEDIUMTEXT\", true),\n      peg$c533 = function() { return 'MEDIUMTEXT'; },\n      peg$c534 = \"longtext\",\n      peg$c535 = peg$literalExpectation(\"LONGTEXT\", true),\n      peg$c536 = function() { return 'LONGTEXT'; },\n      peg$c537 = \"bigint\",\n      peg$c538 = peg$literalExpectation(\"BIGINT\", true),\n      peg$c539 = function() { return 'BIGINT'; },\n      peg$c540 = \"float64\",\n      peg$c541 = peg$literalExpectation(\"FLOAT64\", true),\n      peg$c542 = function() { return 'FLOAT64'; },\n      peg$c543 = \"double\",\n      peg$c544 = peg$literalExpectation(\"DOUBLE\", true),\n      peg$c545 = function() { return 'DOUBLE'; },\n      peg$c546 = \"date\",\n      peg$c547 = peg$literalExpectation(\"DATE\", true),\n      peg$c548 = function() { return 'DATE'; },\n      peg$c549 = \"datetime\",\n      peg$c550 = peg$literalExpectation(\"DATETIME\", true),\n      peg$c551 = function() { return 'DATETIME'; },\n      peg$c552 = \"time\",\n      peg$c553 = peg$literalExpectation(\"TIME\", true),\n      peg$c554 = function() { return 'TIME'; },\n      peg$c555 = \"timestamp\",\n      peg$c556 = peg$literalExpectation(\"TIMESTAMP\", true),\n      peg$c557 = function() { return 'TIMESTAMP'; },\n      peg$c558 = \"truncate\",\n      peg$c559 = peg$literalExpectation(\"TRUNCATE\", true),\n      peg$c560 = function() { return 'TRUNCATE'; },\n      peg$c561 = \"user\",\n      peg$c562 = peg$literalExpectation(\"USER\", true),\n      peg$c563 = function() { return 'USER'; },\n      peg$c564 = \"current_date\",\n      peg$c565 = peg$literalExpectation(\"CURRENT_DATE\", true),\n      peg$c566 = function() { return 'CURRENT_DATE'; },\n      peg$c567 = \"adddate\",\n      peg$c568 = peg$literalExpectation(\"ADDDATE\", true),\n      peg$c569 = function() { return 'ADDDATE'; },\n      peg$c570 = \"interval\",\n      peg$c571 = peg$literalExpectation(\"INTERVAL\", true),\n      peg$c572 = function() { return 'INTERVAL'; },\n      peg$c573 = function() { return 'YEAR'; },\n      peg$c574 = function() { return 'MONTH'; },\n      peg$c575 = function() { return 'DAY'; },\n      peg$c576 = function() { return 'HOUR'; },\n      peg$c577 = function() { return 'MINUTE'; },\n      peg$c578 = function() { return 'SECOND'; },\n      peg$c579 = \"current_time\",\n      peg$c580 = peg$literalExpectation(\"CURRENT_TIME\", true),\n      peg$c581 = function() { return 'CURRENT_TIME'; },\n      peg$c582 = \"current_timestamp\",\n      peg$c583 = peg$literalExpectation(\"CURRENT_TIMESTAMP\", true),\n      peg$c584 = function() { return 'CURRENT_TIMESTAMP'; },\n      peg$c585 = \"global\",\n      peg$c586 = peg$literalExpectation(\"GLOBAL\", true),\n      peg$c587 = function() { return 'GLOBAL'; },\n      peg$c588 = \"session\",\n      peg$c589 = peg$literalExpectation(\"SESSION\", true),\n      peg$c590 = function() { return 'SESSION'; },\n      peg$c591 = \"local\",\n      peg$c592 = peg$literalExpectation(\"LOCAL\", true),\n      peg$c593 = function() { return 'LOCAL'; },\n      peg$c594 = \"persist\",\n      peg$c595 = peg$literalExpectation(\"PERSIST\", true),\n      peg$c596 = function() { return 'PERSIST'; },\n      peg$c597 = \"persist_only\",\n      peg$c598 = peg$literalExpectation(\"PERSIST_ONLY\", true),\n      peg$c599 = function() { return 'PERSIST_ONLY'; },\n      peg$c600 = \"add\",\n      peg$c601 = peg$literalExpectation(\"ADD\", true),\n      peg$c602 = function() { return 'ADD'; },\n      peg$c603 = \"column\",\n      peg$c604 = peg$literalExpectation(\"COLUMN\", true),\n      peg$c605 = function() { return 'COLUMN'; },\n      peg$c606 = \"index\",\n      peg$c607 = peg$literalExpectation(\"INDEX\", true),\n      peg$c608 = function() { return 'INDEX'; },\n      peg$c609 = \"key\",\n      peg$c610 = peg$literalExpectation(\"KEY\", true),\n      peg$c611 = function() { return 'KEY'; },\n      peg$c612 = \"fulltext\",\n      peg$c613 = peg$literalExpectation(\"FULLTEXT\", true),\n      peg$c614 = function() { return 'FULLTEXT'; },\n      peg$c615 = \"unique\",\n      peg$c616 = peg$literalExpectation(\"UNIQUE\", true),\n      peg$c617 = function() { return 'UNIQUE'; },\n      peg$c618 = \"comment\",\n      peg$c619 = peg$literalExpectation(\"COMMENT\", true),\n      peg$c620 = function() { return 'COMMENT'; },\n      peg$c621 = \"constraint\",\n      peg$c622 = peg$literalExpectation(\"CONSTRAINT\", true),\n      peg$c623 = function() { return 'CONSTRAINT'; },\n      peg$c624 = \"references\",\n      peg$c625 = peg$literalExpectation(\"REFERENCES\", true),\n      peg$c626 = function() { return 'REFERENCES'; },\n      peg$c627 = \",\",\n      peg$c628 = peg$literalExpectation(\",\", false),\n      peg$c629 = \"[\",\n      peg$c630 = peg$literalExpectation(\"[\", false),\n      peg$c631 = \"]\",\n      peg$c632 = peg$literalExpectation(\"]\", false),\n      peg$c633 = \";\",\n      peg$c634 = peg$literalExpectation(\";\", false),\n      peg$c635 = \"||\",\n      peg$c636 = peg$literalExpectation(\"||\", false),\n      peg$c637 = \"&&\",\n      peg$c638 = peg$literalExpectation(\"&&\", false),\n      peg$c639 = \"/*\",\n      peg$c640 = peg$literalExpectation(\"/*\", false),\n      peg$c641 = \"*/\",\n      peg$c642 = peg$literalExpectation(\"*/\", false),\n      peg$c643 = \"--\",\n      peg$c644 = peg$literalExpectation(\"--\", false),\n      peg$c645 = \"#\",\n      peg$c646 = peg$literalExpectation(\"#\", false),\n      peg$c647 = peg$anyExpectation(),\n      peg$c648 = /^[ \\t\\n\\r]/,\n      peg$c649 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n      peg$c650 = function(n) { return DATA_TYPES[n.toUpperCase()] === true; },\n      peg$c651 = function(n) {\n            return n\n          },\n      peg$c652 = function(n, t) {\n          return {\n            field_name: n,\n            field_type: t,\n          }\n        },\n      peg$c653 = function(t) { return { dataType: t }; },\n      peg$c654 = function(t, l) { return { dataType: t, length: parseInt(l.join(''), 10) }; },\n      peg$c655 = function(t, a) {\n          return {\n            dataType: t,\n            definition: a,\n            anglebracket: true\n          }\n        },\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsestart() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemultiple_stmt();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parsequery_statement();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiple_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsequery_statement();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseSEMICOLON();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsequery_statement();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseSEMICOLON();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsequery_statement();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_statement() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parsequery_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewith_clause();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseunion_stmt();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parselimit_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseSEMICOLON();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c7(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_op() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UNION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ALL();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_DISTINCT();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c8(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c9) {\n        s1 = input.substr(peg$currPos, 9);\n        peg$currPos += 9;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c10); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c11) {\n          s1 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c12); }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_DISTINCT();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c13(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseunion_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseunion_stmt_nake();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c14(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseselect_stmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseset_op();\n        if (s5 === peg$FAILED) {\n          s5 = null;\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseselect_stmt();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseset_op();\n          if (s5 === peg$FAILED) {\n            s5 = null;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseselect_stmt();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c15(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseselect_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecte_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecte_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecte_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c17(s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral_string();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseident_name();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseunion_stmt();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c18(s1, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsewith_clause();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_SELECT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse___();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsestruct_value();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseKW_ALL();\n                  if (s8 === peg$FAILED) {\n                    s8 = peg$parseKW_DISTINCT();\n                  }\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parsecolumn_clause();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parsefrom_clause();\n                          if (s12 === peg$FAILED) {\n                            s12 = null;\n                          }\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parse__();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parsefor_sys_time_as_of();\n                              if (s14 === peg$FAILED) {\n                                s14 = null;\n                              }\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parse__();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parsewhere_clause();\n                                  if (s16 === peg$FAILED) {\n                                    s16 = null;\n                                  }\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parse__();\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parsegroup_by_clause();\n                                      if (s18 === peg$FAILED) {\n                                        s18 = null;\n                                      }\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parse__();\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parsehaving_clause();\n                                          if (s20 === peg$FAILED) {\n                                            s20 = null;\n                                          }\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parse__();\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parseorder_by_clause();\n                                              if (s22 === peg$FAILED) {\n                                                s22 = null;\n                                              }\n                                              if (s22 !== peg$FAILED) {\n                                                s23 = peg$parse__();\n                                                if (s23 !== peg$FAILED) {\n                                                  s24 = peg$parselimit_clause();\n                                                  if (s24 === peg$FAILED) {\n                                                    s24 = null;\n                                                  }\n                                                  if (s24 !== peg$FAILED) {\n                                                    s25 = peg$parse__();\n                                                    if (s25 !== peg$FAILED) {\n                                                      s26 = peg$parsewindow_clause();\n                                                      if (s26 === peg$FAILED) {\n                                                        s26 = null;\n                                                      }\n                                                      if (s26 !== peg$FAILED) {\n                                                        peg$savedPos = s0;\n                                                        s1 = peg$c19(s2, s6, s8, s10, s12, s14, s16, s18, s20, s22, s24, s26);\n                                                        s0 = s1;\n                                                      } else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s0;\n                                                      s0 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefor_sys_time_as_of() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c20) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c21); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c22) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c23); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c24) {\n              s5 = input.substr(peg$currPos, 2);\n              peg$currPos += 2;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c25); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c26) {\n                  s7 = input.substr(peg$currPos, 2);\n                  peg$currPos += 2;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c27); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c28(s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_value() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_STRUCT();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_VALUE();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c29(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_alias() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c30(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseSTAR();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c11) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c12); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c31) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c32); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumns_list();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c33(s3, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ALL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        s2 = peg$parseSTAR();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          peg$silentFails++;\n          s4 = peg$parseident_start();\n          peg$silentFails--;\n          if (s4 === peg$FAILED) {\n            s3 = void 0;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            s2 = [s2, s3];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseSTAR();\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseCOMMA();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_list_item();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseCOMMA();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c34(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecolumns_list();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseCOMMA();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c35(s1);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumns_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_list_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_list_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_offset_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLBRAKE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_OFFSET();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_ORDINAL();\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseliteral_numeric();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRBRAKE();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c36(s1, s5, s9);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = peg$parsecolumn_offset_expr();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseident();\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseDOT();\n              if (s7 !== peg$FAILED) {\n                s5 = [s5, s6, s7];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseSTAR();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c37(s1, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn_offset_expr();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsealias_clause();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c38(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseexpr_alias();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_ident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c39(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_AS();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseident();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c39(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrom_unnest_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c40) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c41); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsealias_clause();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsewith_offset();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c42(s5, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrom_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FROM();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c43(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_offset() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OFFSET();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsealias_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c44(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_to_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_to_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_to_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c45(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref_list() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_base();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsetable_ref();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsetable_ref();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c46(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseCOMMA();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsetable_base();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c47(s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsetable_join();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c47(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parsejoin_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_base();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_USING();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident_name();\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      s11 = peg$currPos;\n                      s12 = peg$parse__();\n                      if (s12 !== peg$FAILED) {\n                        s13 = peg$parseCOMMA();\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse__();\n                          if (s14 !== peg$FAILED) {\n                            s15 = peg$parseident_name();\n                            if (s15 !== peg$FAILED) {\n                              s12 = [s12, s13, s14, s15];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s11;\n                        s11 = peg$FAILED;\n                      }\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        s11 = peg$currPos;\n                        s12 = peg$parse__();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parseCOMMA();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse__();\n                            if (s14 !== peg$FAILED) {\n                              s15 = peg$parseident_name();\n                              if (s15 !== peg$FAILED) {\n                                s12 = [s12, s13, s14, s15];\n                                s11 = s12;\n                              } else {\n                                peg$currPos = s11;\n                                s11 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseRPAREN();\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c48(s1, s3, s9, s10);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsejoin_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetable_base();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseon_clause();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c49(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsejoin_op();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseunion_stmt();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsealias_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseon_clause();\n                            if (s11 === peg$FAILED) {\n                              s11 = null;\n                            }\n                            if (s11 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c50(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_base() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c51(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseunion_stmt();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsealias_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c52(s3, s7);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsefrom_unnest_item();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejoin_op() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LEFT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OUTER();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_JOIN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c53();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_RIGHT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_OUTER();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_JOIN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c54();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_FULL();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_OUTER();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseKW_JOIN();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c55();\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CROSS();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_JOIN();\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c56(s1);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseKW_INNER();\n            if (s1 === peg$FAILED) {\n              s1 = null;\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseKW_JOIN();\n                if (s3 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c57(s1);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_name() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseDOT();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseident();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c58(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseident();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c59(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c60(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhere_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHERE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c60(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsegroup_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_GROUP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c61(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsehaving_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_HAVING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c60(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WINDOW();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenamed_window_expr_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c62(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenamed_window_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenamed_window_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenamed_window_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseas_window_specification();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c63(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseas_window_specification() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c64(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsewindow_specification();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c65(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_specification() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsepartition_by_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewindow_frame_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c66(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c67) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c68); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BETWEEN();\n        if (s3 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c69) {\n            s4 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c70); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c71) {\n                s6 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c72); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseKW_AND();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c73) {\n                        s10 = input.substr(peg$currPos, 7);\n                        peg$currPos += 7;\n                      } else {\n                        s10 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          if (input.substr(peg$currPos, 3) === peg$c75) {\n                            s12 = peg$c75;\n                            peg$currPos += 3;\n                          } else {\n                            s12 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c76); }\n                          }\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c77();\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c78) {\n        s1 = input.substr(peg$currPos, 4);\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c79); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_BETWEEN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseliteral_numeric();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  if (input.substr(peg$currPos, 9).toLowerCase() === peg$c71) {\n                    s7 = input.substr(peg$currPos, 9);\n                    peg$currPos += 9;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c72); }\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_AND();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseliteral_numeric();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c80) {\n                                s13 = input.substr(peg$currPos, 9);\n                                peg$currPos += 9;\n                              } else {\n                                s13 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c81); }\n                              }\n                              if (s13 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c82(s5, s11);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsepartition_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PARTITION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c83(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ORDER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c84(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseorder_by_element();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseorder_by_element();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseorder_by_element();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_element() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DESC();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ASC();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c85(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber_or_param() {\n    var s0;\n\n    s0 = peg$parseliteral_numeric();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseparam();\n    }\n\n    return s0;\n  }\n\n  function peg$parselimit_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIMIT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenumber_or_param();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parseCOMMA();\n            if (s6 === peg$FAILED) {\n              s6 = peg$parseKW_OFFSET();\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsenumber_or_param();\n                if (s8 !== peg$FAILED) {\n                  s6 = [s6, s7, s8];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c86(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c87(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr() {\n    var s0;\n\n    s0 = peg$parsestruct_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parselogic_operator_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseor_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseunary_expr();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseselect_stmt();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsearray_expr();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_list_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseparentheses_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseparentheses_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseparentheses_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_clause();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c35(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsearray_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_clause();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c88(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsearray_type();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_ARRAY();\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseLBRAKE();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseliteral_list();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseRBRAKE();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c89(s1, s4);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsearray_type();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_ARRAY();\n        }\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLBRAKE();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseLPAREN();\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseparentheses_list_expr();\n                if (s5 === peg$FAILED) {\n                  s5 = peg$parseexpr();\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRBRAKE();\n                    if (s7 === peg$FAILED) {\n                      s7 = peg$parseRPAREN();\n                    }\n                    if (s7 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c90(s1, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestruct_type();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_STRUCT();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c91(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselogic_operator_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseLOGIC_OPERATOR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLOGIC_OPERATOR();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseprimary();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c92(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunary_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_operator();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseprimary();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseprimary();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c93(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_and_where_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseCOMMA();\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseKW_OR();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseCOMMA();\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c94(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseand_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_OR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseand_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseand_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c95(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseand_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenot_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenot_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenot_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c95(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenot_expr() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$parsecomparison_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexists_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_NOT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 33) {\n            s2 = peg$c96;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c97); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            peg$silentFails++;\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s4 = peg$c98;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c99); }\n            }\n            peg$silentFails--;\n            if (s4 === peg$FAILED) {\n              s3 = void 0;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n              s2 = [s2, s3];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenot_expr();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c100(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecomparison_op_right();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c101(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_string();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecolumn_ref();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexists_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseunion_stmt();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c102(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_EXISTS();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c103(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_EXISTS();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_op_right() {\n    var s0;\n\n    s0 = peg$parsearithmetic_op_right();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsein_op_right();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebetween_op_right();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseis_op_right();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parselike_op_right();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parse__();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parsearithmetic_comparison_operator();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parseadditive_expr();\n          if (s6 !== peg$FAILED) {\n            s3 = [s3, s4, s5, s6];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsearithmetic_comparison_operator();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseadditive_expr();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c104(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_comparison_operator() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c105) {\n      s0 = peg$c105;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c106); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 62) {\n        s0 = peg$c107;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c108); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c109) {\n          s0 = peg$c109;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c110); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c111) {\n            s0 = peg$c111;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c112); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 60) {\n              s0 = peg$c113;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c114); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s0 = peg$c98;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c99); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c115) {\n                  s0 = peg$c115;\n                  peg$currPos += 2;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c116); }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseis_op_right() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_IS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c117(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseKW_IS();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_NOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseadditive_expr();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c118(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebetween_or_not_between_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AND();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c119(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_or_not_between_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_BETWEEN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c103(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_BETWEEN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_LIKE();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c103(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_LIKE();\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_IN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c103(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_IN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op_right() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parselike_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsecomparison_expr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c120(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsein_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c121(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsein_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseliteral_string();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c122(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsemultiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsemultiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsemultiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c95(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 43) {\n      s0 = peg$c123;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c124); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s0 = peg$c125;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c126); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseprimary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c127(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c128;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c129); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 47) {\n        s0 = peg$c130;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c131); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s0 = peg$c132;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c133); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseprimary() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parsecast_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseaggr_func();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsefunc_call();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsecase_expr();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseinterval_expr();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsecolumn_ref();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseparam();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    s1 = peg$parseLPAREN();\n                    if (s1 !== peg$FAILED) {\n                      s2 = peg$parse__();\n                      if (s2 !== peg$FAILED) {\n                        s3 = peg$parseor_and_where_expr();\n                        if (s3 !== peg$FAILED) {\n                          s4 = peg$parse__();\n                          if (s4 !== peg$FAILED) {\n                            s5 = peg$parseRPAREN();\n                            if (s5 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c134(s3);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INTERVAL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseinterval_unit();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c135(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CASE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsecase_when_then();\n        if (s4 !== peg$FAILED) {\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parsecase_when_then();\n          }\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecase_else();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_END();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_CASE();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c136(s3, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CASE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseexpr();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$parsecase_when_then();\n              if (s6 !== peg$FAILED) {\n                while (s6 !== peg$FAILED) {\n                  s5.push(s6);\n                  s6 = peg$parsecase_when_then();\n                }\n              } else {\n                s5 = peg$FAILED;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsecase_else();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_END();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseKW_CASE();\n                          if (s11 === peg$FAILED) {\n                            s11 = null;\n                          }\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c137(s3, s5, s7);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_when_then() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHEN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_THEN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c138(s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_else() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ELSE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c139(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_without_kw();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c140(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c141(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c142(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c143(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c143(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_ident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c144(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c143(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c143(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequoted_ident() {\n    var s0;\n\n    s0 = peg$parsedouble_quoted_ident();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsesingle_quoted_ident();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebackticks_quoted_ident();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedouble_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s1 = peg$c145;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c146); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c147.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c148); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c147.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c148); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s3 = peg$c145;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c146); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c149(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c150;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c151); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c152.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c153); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c152.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c153); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s3 = peg$c150;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c151); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c149(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebackticks_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 96) {\n      s1 = peg$c154;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c155); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c156.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c157); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c156.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c157); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 96) {\n          s3 = peg$c154;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c155); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c158(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_without_kw() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c159(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c142(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c160(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsecolumn_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsecolumn_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c161(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseident_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parseident_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c161(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_start() {\n    var s0;\n\n    if (peg$c162.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c163); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_part() {\n    var s0;\n\n    if (peg$c164.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c165); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_part() {\n    var s0;\n\n    if (peg$c166.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c167); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparam() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 58) {\n      s2 = peg$c168;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c169); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseident_name();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c170(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseaggr_func() {\n    var s0;\n\n    s0 = peg$parseaggr_fun_count();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseaggr_fun_smma();\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_smma() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SUM_MAX_MIN_AVG();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseadditive_expr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c171(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM_MAX_MIN_AVG() {\n    var s0;\n\n    s0 = peg$parseKW_SUM();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_MAX();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_MIN();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_AVG();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_update_current_timestamp() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c172) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c173); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_CURRENT_TIMESTAMP();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr_list();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c174(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ON();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c172) {\n            s3 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c173); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_CURRENT_TIMESTAMP();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c175(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseover_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_OVER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseas_window_specification();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c176(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_OVER();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepartition_by_clause();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseorder_by_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseRPAREN();\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c177(s5, s7);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseon_update_current_timestamp();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_count() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COUNT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecount_arg();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c178(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecount_arg() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestar_expr();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c179(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DISTINCT();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecolumn_ref();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c180(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_DISTINCT();\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseorder_by_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c181(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestar_expr() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s1 = peg$c128;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c129); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c182();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsefunc_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$parseextract_func();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseproc_func_name();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseor_and_where_expr();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseRPAREN();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseover_partition();\n                      if (s9 === peg$FAILED) {\n                        s9 = null;\n                      }\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c183(s1, s5, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsescalar_func();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr_list();\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseover_partition();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c184(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CURRENT_TIMESTAMP();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseon_update_current_timestamp();\n              if (s3 === peg$FAILED) {\n                s3 = null;\n              }\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c185(s1, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_name() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c186(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsescalar_func() {\n    var s0;\n\n    s0 = peg$parseKW_CURRENT_DATE();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_CURRENT_TIME();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_CURRENT_TIMESTAMP();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_filed() {\n    var s0, s1;\n\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c187) {\n      s0 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c188); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c189) {\n        s0 = input.substr(peg$currPos, 3);\n        peg$currPos += 3;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c190); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c191) {\n          s0 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c192); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c193) {\n            s0 = input.substr(peg$currPos, 3);\n            peg$currPos += 3;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c194); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c195) {\n              s0 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c196); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c197) {\n                s0 = input.substr(peg$currPos, 5);\n                peg$currPos += 5;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c198); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c199) {\n                  s0 = input.substr(peg$currPos, 4);\n                  peg$currPos += 4;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c200); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c201) {\n                    s0 = input.substr(peg$currPos, 6);\n                    peg$currPos += 6;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c202); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c203) {\n                      s0 = input.substr(peg$currPos, 7);\n                      peg$currPos += 7;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c204); }\n                    }\n                    if (s0 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c205) {\n                        s0 = input.substr(peg$currPos, 12);\n                        peg$currPos += 12;\n                      } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c206); }\n                      }\n                      if (s0 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c207) {\n                          s0 = input.substr(peg$currPos, 10);\n                          peg$currPos += 10;\n                        } else {\n                          s0 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c208); }\n                        }\n                        if (s0 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 12).toLowerCase() === peg$c209) {\n                            s0 = input.substr(peg$currPos, 12);\n                            peg$currPos += 12;\n                          } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c210); }\n                          }\n                          if (s0 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c211) {\n                              s0 = input.substr(peg$currPos, 6);\n                              peg$currPos += 6;\n                            } else {\n                              s0 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c212); }\n                            }\n                            if (s0 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c213) {\n                                s0 = input.substr(peg$currPos, 5);\n                                peg$currPos += 5;\n                              } else {\n                                s0 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c214); }\n                              }\n                              if (s0 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c215) {\n                                  s0 = input.substr(peg$currPos, 7);\n                                  peg$currPos += 7;\n                                } else {\n                                  s0 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c216); }\n                                }\n                                if (s0 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c217) {\n                                    s0 = input.substr(peg$currPos, 6);\n                                    peg$currPos += 6;\n                                  } else {\n                                    s0 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c218); }\n                                  }\n                                  if (s0 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c219) {\n                                      s0 = input.substr(peg$currPos, 8);\n                                      peg$currPos += 8;\n                                    } else {\n                                      s0 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c220); }\n                                    }\n                                    if (s0 === peg$FAILED) {\n                                      if (input.substr(peg$currPos, 13).toLowerCase() === peg$c221) {\n                                        s0 = input.substr(peg$currPos, 13);\n                                        peg$currPos += 13;\n                                      } else {\n                                        s0 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c222); }\n                                      }\n                                      if (s0 === peg$FAILED) {\n                                        if (input.substr(peg$currPos, 15).toLowerCase() === peg$c223) {\n                                          s0 = input.substr(peg$currPos, 15);\n                                          peg$currPos += 15;\n                                        } else {\n                                          s0 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c224); }\n                                        }\n                                        if (s0 === peg$FAILED) {\n                                          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c225) {\n                                            s0 = input.substr(peg$currPos, 4);\n                                            peg$currPos += 4;\n                                          } else {\n                                            s0 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c226); }\n                                          }\n                                          if (s0 === peg$FAILED) {\n                                            s0 = peg$currPos;\n                                            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c227) {\n                                              s1 = input.substr(peg$currPos, 4);\n                                              peg$currPos += 4;\n                                            } else {\n                                              s1 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c228); }\n                                            }\n                                            if (s1 !== peg$FAILED) {\n                                              peg$savedPos = s0;\n                                              s1 = peg$c229();\n                                            }\n                                            s0 = s1;\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_func() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_EXTRACT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseextract_filed();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_FROM();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_TIMESTAMP();\n                    if (s9 === peg$FAILED) {\n                      s9 = peg$parseKW_INTERVAL();\n                      if (s9 === peg$FAILED) {\n                        s9 = peg$parseKW_TIME();\n                        if (s9 === peg$FAILED) {\n                          s9 = peg$parseKW_DATE();\n                        }\n                      }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseexpr();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c230(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecast_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CAST();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_AS();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsedata_type();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c231(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CAST();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_AS();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_DECIMAL();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseLPAREN();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              s13 = peg$parseint();\n                              if (s13 !== peg$FAILED) {\n                                s14 = peg$parse__();\n                                if (s14 !== peg$FAILED) {\n                                  s15 = peg$parseRPAREN();\n                                  if (s15 !== peg$FAILED) {\n                                    s16 = peg$parse__();\n                                    if (s16 !== peg$FAILED) {\n                                      s17 = peg$parseRPAREN();\n                                      if (s17 !== peg$FAILED) {\n                                        peg$savedPos = s0;\n                                        s1 = peg$c232(s5, s13);\n                                        s0 = s1;\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_CAST();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseKW_AS();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseKW_DECIMAL();\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseLPAREN();\n                            if (s11 !== peg$FAILED) {\n                              s12 = peg$parse__();\n                              if (s12 !== peg$FAILED) {\n                                s13 = peg$parseint();\n                                if (s13 !== peg$FAILED) {\n                                  s14 = peg$parse__();\n                                  if (s14 !== peg$FAILED) {\n                                    s15 = peg$parseCOMMA();\n                                    if (s15 !== peg$FAILED) {\n                                      s16 = peg$parse__();\n                                      if (s16 !== peg$FAILED) {\n                                        s17 = peg$parseint();\n                                        if (s17 !== peg$FAILED) {\n                                          s18 = peg$parse__();\n                                          if (s18 !== peg$FAILED) {\n                                            s19 = peg$parseRPAREN();\n                                            if (s19 !== peg$FAILED) {\n                                              s20 = peg$parse__();\n                                              if (s20 !== peg$FAILED) {\n                                                s21 = peg$parseRPAREN();\n                                                if (s21 !== peg$FAILED) {\n                                                  peg$savedPos = s0;\n                                                  s1 = peg$c233(s5, s13, s17);\n                                                  s0 = s1;\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CAST();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseLPAREN();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseexpr();\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parse__();\n                    if (s6 !== peg$FAILED) {\n                      s7 = peg$parseKW_AS();\n                      if (s7 !== peg$FAILED) {\n                        s8 = peg$parse__();\n                        if (s8 !== peg$FAILED) {\n                          s9 = peg$parsesignedness();\n                          if (s9 !== peg$FAILED) {\n                            s10 = peg$parse__();\n                            if (s10 !== peg$FAILED) {\n                              s11 = peg$parseKW_INTEGER();\n                              if (s11 === peg$FAILED) {\n                                s11 = null;\n                              }\n                              if (s11 !== peg$FAILED) {\n                                s12 = peg$parse__();\n                                if (s12 !== peg$FAILED) {\n                                  s13 = peg$parseRPAREN();\n                                  if (s13 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c234(s5, s9, s11);\n                                    s0 = s1;\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesignedness() {\n    var s0;\n\n    s0 = peg$parseKW_SIGNED();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNSIGNED();\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral() {\n    var s0;\n\n    s0 = peg$parseliteral_string();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseliteral_bool();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseliteral_null();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseliteral_datetime();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseliteral();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseliteral();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c235();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_not_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NOT_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c236();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_bool() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUE();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c237();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_FALSE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c238();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_string() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c239) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c240); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c150;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c151); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c150;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c151); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c241(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c239) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c240); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c145;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c146); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesingle_quote_char();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesingle_quote_char();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s6 = peg$c145;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c146); }\n              }\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c242(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_datetime() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TIME();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIMESTAMP();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_DATETIME();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c150;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c151); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c150;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c151); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c243(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_TIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATE();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_DATETIME();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c145;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c146); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesingle_quote_char();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesingle_quote_char();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s6 = peg$c145;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c146); }\n              }\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c243(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quote_char() {\n    var s0;\n\n    if (peg$c244.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c245); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_char() {\n    var s0;\n\n    if (peg$c246.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c247); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parseescape_char() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c248) {\n      s1 = peg$c248;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c249); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c250();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c251) {\n        s1 = peg$c251;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c252); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c253();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c254) {\n          s1 = peg$c254;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c255); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c256();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c257) {\n            s1 = peg$c257;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c258); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c259();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c260) {\n              s1 = peg$c260;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c261); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c262();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c263) {\n                s1 = peg$c263;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c264); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c265();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c266) {\n                  s1 = peg$c266;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c267); }\n                }\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c268();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.substr(peg$currPos, 2) === peg$c269) {\n                    s1 = peg$c269;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c270); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c271();\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 2) === peg$c272) {\n                      s1 = peg$c272;\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c273); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c274();\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      if (input.substr(peg$currPos, 2) === peg$c275) {\n                        s1 = peg$c275;\n                        peg$currPos += 2;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c276); }\n                      }\n                      if (s1 !== peg$FAILED) {\n                        s2 = peg$parsehexDigit();\n                        if (s2 !== peg$FAILED) {\n                          s3 = peg$parsehexDigit();\n                          if (s3 !== peg$FAILED) {\n                            s4 = peg$parsehexDigit();\n                            if (s4 !== peg$FAILED) {\n                              s5 = peg$parsehexDigit();\n                              if (s5 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c277(s2, s3, s4, s5);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 92) {\n                          s1 = peg$c278;\n                          peg$currPos++;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c279); }\n                        }\n                        if (s1 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c280();\n                        }\n                        s0 = s1;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_terminator() {\n    var s0;\n\n    if (peg$c281.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c282); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_numeric() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenumber();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c283(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseint();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsefrac();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexp();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c284(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseint();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsefrac();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c285(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseint();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseexp();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c286(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseint();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c287(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseint() {\n    var s0, s1, s2;\n\n    s0 = peg$parsedigits();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedigit();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c125;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c126); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c123;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c124); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsedigits();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c288(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c125;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c126); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s1 = peg$c123;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c124); }\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsedigit();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c289(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrac() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s1 = peg$c290;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c291); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c292(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsee();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c293(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigits() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsedigit();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsedigit();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c294(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedigit() {\n    var s0;\n\n    if (peg$c295.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c296); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsehexDigit() {\n    var s0;\n\n    if (peg$c297.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c298); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsee() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (peg$c299.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c300); }\n    }\n    if (s1 !== peg$FAILED) {\n      if (peg$c301.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c302); }\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c303(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c304) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c305); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DEFAULT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c306) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c307); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c308) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c309); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c310) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c311); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c312) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c313); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FALSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c314) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c315); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DROP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c316) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c317); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c318();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c319) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c320); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SELECT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c321) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c322); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IF_NOT_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c323) {\n      s1 = input.substr(peg$currPos, 13);\n      peg$currPos += 13;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c324); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RECURSIVE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9) === peg$c325) {\n      s1 = peg$c325;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c326); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IGNORE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c327) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c328); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXPLAIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c329) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c330); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PARTITION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c331) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c332); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c333();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c334) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c335); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FROM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c336) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c337); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c338) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c339); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNLOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c340) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c341); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c342) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c343); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c24) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c25); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c344) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c345); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c346();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c347) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c348); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c349();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLLATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c350) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c351); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c352();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c353) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c354); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LEFT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c355) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c356); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RIGHT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c357) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c358); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c359) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c360); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INNER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c361) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c362); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CROSS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c363) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c364); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JOIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c365) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c366); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OUTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c367) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c368); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OVER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c369) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c370); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c371) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c372); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c373) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c374); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c375();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c376) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c377); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c378) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c379); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHERE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c380) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c381); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WITH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c382) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c383); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GROUP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c384) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c385); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c386) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c387); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c388) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c389); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_HAVING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c390) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c391); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WINDOW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c392) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c393); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDINAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c394) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c395); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c396();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIMIT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c397) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c398); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OFFSET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c399) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c400); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c401();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c402) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c403); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c404();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DESC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c405) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c406); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c407();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c408) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c409); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c410();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DISTINCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c411) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c412); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c413();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BETWEEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c414) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c415); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c416();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c417) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c418); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c419();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c420) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c421); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c422();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIKE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c423) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c424); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c425();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c426) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c427); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c428();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c429) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c430); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c431();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c432) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c433); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c434();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c435) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c436); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c437();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COUNT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c438) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c439); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c440();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MAX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c441) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c442); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c443();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c444) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c445); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c446();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c447) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c448); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c449();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AVG() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c450) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c451); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c452();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXTRACT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c453) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c454); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c455();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c456) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c457); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c458();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c459) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c460); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c461) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c462); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_THEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c463) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c464); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ELSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c465) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c466); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_END() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c467) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c468); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CAST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c469) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c470); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ARRAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c471) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c472); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c473();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BYTES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c474) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c475); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c476();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BOOL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c477) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c478); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c479();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c480) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c481); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c482();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GEOGRAPHY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c483) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c484); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c485();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VARCHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c486) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c487); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c488();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NUMERIC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c489) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c490); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c491();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DECIMAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c492) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c493); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c494();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c495) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c496); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c497();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNSIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c498) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c499); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c500();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INT_64() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c501) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c502); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c503();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ZEROFILL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c504) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c505); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c506();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTEGER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c507) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c508); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c509();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JSON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c510) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c511); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c512();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SMALLINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c513) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c514); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c515();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c516) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c517); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c518();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRUCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c519) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c520); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c521();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c522) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c523); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c524();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c525) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c526); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c527();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c528) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c529); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c530();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MEDIUMTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c531) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c532); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c533();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LONGTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c534) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c535); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c536();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BIGINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c537) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c538); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c539();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FLOAT_64() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c540) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c541); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c542();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DOUBLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c543) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c544); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c545();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c546) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c547); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c548();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATETIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c549) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c550); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c551();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c552) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c553); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c554();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c555) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c556); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c557();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUNCATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c558) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c559); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c560();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c561) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c562); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c563();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c564) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c565); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c566();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c567) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c568); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c569();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTERVAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c570) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c571); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c572();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_YEAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c227) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c228); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c573();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MONTH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c213) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c214); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c574();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_DAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c189) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c190); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c575();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_HOUR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c199) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c200); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c576();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MINUTE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c211) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c212); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c577();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_SECOND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c217) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c218); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c578();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c579) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c580); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c581();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c582) {\n      s1 = input.substr(peg$currPos, 17);\n      peg$currPos += 17;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c583); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c584();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GLOBAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c585) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c586); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c587();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c588) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c589); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c590();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c591) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c592); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c593();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c594) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c595); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c596();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST_ONLY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c597) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c598); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c599();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c600) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c601); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c602();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLUMN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c603) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c604); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c605();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INDEX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c606) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c607); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c608();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c609) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c610); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c611();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULLTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c612) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c613); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c614();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIQUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c615) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c616); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c617();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COMMENT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c618) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c619); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c620();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CONSTRAINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c621) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c622); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c623();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REFERENCES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c624) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c625); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c626();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s0 = peg$c290;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c291); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseCOMMA() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c627;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c628); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSTAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c128;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c129); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s0 = peg$c2;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c3); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 41) {\n      s0 = peg$c4;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c5); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLANGLE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 60) {\n      s0 = peg$c113;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c114); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRANGLE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 62) {\n      s0 = peg$c107;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c108); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s0 = peg$c629;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c630); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 93) {\n      s0 = peg$c631;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c632); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSEMICOLON() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 59) {\n      s0 = peg$c633;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c634); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_CONCATENATION() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c635) {\n      s0 = peg$c635;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c636); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_AND() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c637) {\n      s0 = peg$c637;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c638); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLOGIC_OPERATOR() {\n    var s0;\n\n    s0 = peg$parseOPERATOR_CONCATENATION();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseOPERATOR_AND();\n    }\n\n    return s0;\n  }\n\n  function peg$parse__() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsewhitespace();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsecomment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse___() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsewhitespace();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsecomment();\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0;\n\n    s0 = peg$parseblock_comment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseline_comment();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsepound_sign_comment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseblock_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c639) {\n      s1 = peg$c639;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c640); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      if (input.substr(peg$currPos, 2) === peg$c641) {\n        s5 = peg$c641;\n        peg$currPos += 2;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c642); }\n      }\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        if (input.substr(peg$currPos, 2) === peg$c641) {\n          s5 = peg$c641;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c642); }\n        }\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c641) {\n          s3 = peg$c641;\n          peg$currPos += 2;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c642); }\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c643) {\n      s1 = peg$c643;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c644); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepound_sign_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s1 = peg$c645;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c646); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsechar() {\n    var s0;\n\n    if (input.length > peg$currPos) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c647); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_unit() {\n    var s0;\n\n    s0 = peg$parseKW_UNIT_YEAR();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNIT_MONTH();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_UNIT_DAY();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_UNIT_HOUR();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_UNIT_MINUTE();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseKW_UNIT_SECOND();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhitespace() {\n    var s0;\n\n    if (peg$c648.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c649); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOL() {\n    var s0, s1;\n\n    s0 = peg$parseEOF();\n    if (s0 === peg$FAILED) {\n      s0 = [];\n      if (peg$c281.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c282); }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$c281.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c282); }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOF() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    peg$silentFails++;\n    if (input.length > peg$currPos) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c647); }\n    }\n    peg$silentFails--;\n    if (s1 === peg$FAILED) {\n      s0 = void 0;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedata_type_alias();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsedata_type_alias();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsedata_type_alias();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type_alias() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseident_name();\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s3 = peg$c650(s2);\n      if (s3) {\n        s3 = peg$FAILED;\n      } else {\n        s3 = void 0;\n      }\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s1;\n        s2 = peg$c651(s2);\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c652(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type() {\n    var s0;\n\n    s0 = peg$parsestruct_type();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsearray_type();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecharacter_string_type();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsenumeric_type();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsedatetime_type();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsebool_byte_geography_type();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecharacter_string_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_STRING();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c653(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumeric_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NUMERIC();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_INT_64();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_FLOAT_64();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c653(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedatetime_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DATE();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATETIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIME();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c295.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c296); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c295.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c296); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c654(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATETIME();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIME();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_TIMESTAMP();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c653(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebool_byte_geography_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_BYTES();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_BOOL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_GEOGRAPHY();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c653(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearray_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ARRAY();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLANGLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRANGLE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c655(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_STRUCT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLANGLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRANGLE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c655(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n\n    const reservedMap = {\n      'ARRAY': true,\n      'ALTER': true,\n      'ALL': true,\n      'ADD': true,\n      'AND': true,\n      'AS': true,\n      'ASC': true,\n\n      'BETWEEN': true,\n      'BY': true,\n\n      'CALL': true,\n      'CASE': true,\n      'CREATE': true,\n      'CROSS': true,\n      'CONTAINS': true,\n      'CURRENT_DATE': true,\n      'CURRENT_TIME': true,\n      'CURRENT_TIMESTAMP': true,\n      'CURRENT_USER': true,\n\n      'DELETE': true,\n      'DESC': true,\n      'DISTINCT': true,\n      'DROP': true,\n\n      'ELSE': true,\n      'END': true,\n      'EXISTS': true,\n      'EXPLAIN': true,\n\n      'FALSE': true,\n      'FROM': true,\n      'FULL': true,\n      'FOR': true,\n\n      'GROUP': true,\n\n      'HAVING': true,\n\n      'IN': true,\n      'INNER': true,\n      'INSERT': true,\n      'INTO': true,\n      'IS': true,\n\n      'JOIN': true,\n      'JSON': true,\n\n      'KEY': true,\n\n      'LEFT': true,\n      'LIKE': true,\n      'LIMIT': true,\n      'LOW_PRIORITY': true, // for lock table\n\n      'NOT': true,\n      'NULL': true,\n\n      'ON': true,\n      'OR': true,\n      'ORDER': true,\n      'OUTER': true,\n\n      'PARTITION': true,\n\n      'RECURSIVE': true,\n      'RENAME': true,\n      'READ': true, // for lock table\n      'RIGHT': true,\n\n      'SELECT': true,\n      'SESSION_USER': true,\n      'SET': true,\n      'SHOW': true,\n      'SYSTEM_USER': true,\n\n      'TABLE': true,\n      'THEN': true,\n      'TRUE': true,\n      'TRUNCATE': true,\n      'TYPE': true,   // reserved (MySQL)\n\n      'UNION': true,\n      'UPDATE': true,\n      'USING': true,\n\n      'VALUES': true,\n\n      'WINDOW': true,\n      'WITH': true,\n      'WHEN': true,\n      'WHERE': true,\n      'WRITE': true, // for lock table\n\n      'GLOBAL': true,\n      'SESSION': true,\n      'LOCAL': true,\n      'PERSIST': true,\n      'PERSIST_ONLY': true,\n      'UNNEST': true,\n    };\n\n    const DATA_TYPES = {\n      'BOOL': true,\n      'BYTE': true,\n      'DATE': true,\n      'DATETIME': true,\n      'FLOAT64': true,\n      'INT64': true,\n      'NUMERIC': true,\n      'STRING': true,\n      'TIME': true,\n      'TIMESTAMP': true,\n      'ARRAY': true,\n      'STRUCT': true,\n    }\n\n    function createUnaryExpr(op, e) {\n      return {\n        type: 'unary_expr',\n        operator: op,\n        expr: e\n      };\n    }\n\n    function createBinaryExpr(op, left, right) {\n      return {\n        type: 'binary_expr',\n        operator: op,\n        left: left,\n        right: right\n      };\n    }\n\n    function isBigInt(numberStr) {\n      const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER)\n      const num = BigInt(numberStr)\n      if (num < previousMaxSafe) return false\n      return true\n    }\n\n    function createList(head, tail, po = 3) {\n      const result = [head];\n      for (let i = 0; i < tail.length; i++) {\n        delete tail[i][po].tableList\n        delete tail[i][po].columnList\n        result.push(tail[i][po]);\n      }\n      return result;\n    }\n\n    function createBinaryExprChain(head, tail) {\n      let result = head;\n      for (let i = 0; i < tail.length; i++) {\n        result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n      }\n      return result;\n    }\n\n    function queryTableAlias(tableName) {\n      const alias = tableAlias[tableName]\n      if (alias) return alias\n      if (tableName) return tableName\n      return null\n    }\n\n    function columnListTableAlias(columnList) {\n      const newColumnsList = new Set()\n      const symbolChar = '::'\n      for(let column of columnList.keys()) {\n        const columnInfo = column.split(symbolChar)\n        if (!columnInfo) {\n          newColumnsList.add(column)\n          break\n        }\n        if (columnInfo && columnInfo[1]) columnInfo[1] = queryTableAlias(columnInfo[1])\n        newColumnsList.add(columnInfo.join(symbolChar))\n      }\n      return Array.from(newColumnsList)\n    }\n\n    function refreshColumnList(columnList) {\n      const columns = columnListTableAlias(columnList)\n      columnList.clear()\n      columns.forEach(col => columnList.add(col))\n    }\n\n    const cmpPrefixMap = {\n      '+': true,\n      '-': true,\n      '*': true,\n      '/': true,\n      '>': true,\n      '<': true,\n      '!': true,\n      '=': true,\n\n      //between\n      'B': true,\n      'b': true,\n      //for is or in\n      'I': true,\n      'i': true,\n      //for like\n      'L': true,\n      'l': true,\n      //for not\n      'N': true,\n      'n': true\n    };\n\n    // used for dependency analysis\n    let varList = [];\n\n    const tableList = new Set();\n    const columnList = new Set();\n    const tableAlias = {};\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n","import Parser from './src/parser'\nimport * as util from './src/util'\n\nexport {\n  Parser,\n  util,\n}\n\nif (global && global.window) {\n  global.window.NodeSQLParser = {\n    Parser,\n    util,\n  }\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","var bigInt = (function (undefined) {\r\n    \"use strict\";\r\n\r\n    var BASE = 1e7,\r\n        LOG_BASE = 7,\r\n        MAX_INT = 9007199254740992,\r\n        MAX_INT_ARR = smallToArray(MAX_INT),\r\n        DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n\r\n    var supportsNativeBigInt = typeof BigInt === \"function\";\r\n\r\n    function Integer(v, radix, alphabet, caseSensitive) {\r\n        if (typeof v === \"undefined\") return Integer[0];\r\n        if (typeof radix !== \"undefined\") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\r\n        return parseValue(v);\r\n    }\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n        this.isSmall = false;\r\n    }\r\n    BigInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function SmallInteger(value) {\r\n        this.value = value;\r\n        this.sign = value < 0;\r\n        this.isSmall = true;\r\n    }\r\n    SmallInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function NativeBigInt(value) {\r\n        this.value = value;\r\n    }\r\n    NativeBigInt.prototype = Object.create(Integer.prototype);\r\n\r\n    function isPrecise(n) {\r\n        return -MAX_INT < n && n < MAX_INT;\r\n    }\r\n\r\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\r\n        if (n < 1e7)\r\n            return [n];\r\n        if (n < 1e14)\r\n            return [n % 1e7, Math.floor(n / 1e7)];\r\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\r\n    }\r\n\r\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\r\n        trim(arr);\r\n        var length = arr.length;\r\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\r\n            switch (length) {\r\n                case 0: return 0;\r\n                case 1: return arr[0];\r\n                case 2: return arr[0] + arr[1] * BASE;\r\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function trim(v) {\r\n        var i = v.length;\r\n        while (v[--i] === 0);\r\n        v.length = i + 1;\r\n    }\r\n\r\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\r\n        var x = new Array(length);\r\n        var i = -1;\r\n        while (++i < length) {\r\n            x[i] = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function truncate(n) {\r\n        if (n > 0) return Math.floor(n);\r\n        return Math.ceil(n);\r\n    }\r\n\r\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\r\n        var l_a = a.length,\r\n            l_b = b.length,\r\n            r = new Array(l_a),\r\n            carry = 0,\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l_b; i++) {\r\n            sum = a[i] + b[i] + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            r[i] = sum - carry * base;\r\n        }\r\n        while (i < l_a) {\r\n            sum = a[i] + carry;\r\n            carry = sum === base ? 1 : 0;\r\n            r[i++] = sum - carry * base;\r\n        }\r\n        if (carry > 0) r.push(carry);\r\n        return r;\r\n    }\r\n\r\n    function addAny(a, b) {\r\n        if (a.length >= b.length) return add(a, b);\r\n        return add(b, a);\r\n    }\r\n\r\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l; i++) {\r\n            sum = a[i] - base + carry;\r\n            carry = Math.floor(sum / base);\r\n            r[i] = sum - carry * base;\r\n            carry += 1;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall) {\r\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\r\n        }\r\n        return new BigInteger(addAny(a, b), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    SmallInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\r\n            b = smallToArray(Math.abs(b));\r\n        }\r\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\r\n    };\r\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\r\n\r\n    NativeBigInt.prototype.add = function (v) {\r\n        return new NativeBigInt(this.value + parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\r\n\r\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            r = new Array(a_l),\r\n            borrow = 0,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < b_l; i++) {\r\n            difference = a[i] - borrow - b[i];\r\n            if (difference < 0) {\r\n                difference += base;\r\n                borrow = 1;\r\n            } else borrow = 0;\r\n            r[i] = difference;\r\n        }\r\n        for (i = b_l; i < a_l; i++) {\r\n            difference = a[i] - borrow;\r\n            if (difference < 0) difference += base;\r\n            else {\r\n                r[i++] = difference;\r\n                break;\r\n            }\r\n            r[i] = difference;\r\n        }\r\n        for (; i < a_l; i++) {\r\n            r[i] = a[i];\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function subtractAny(a, b, sign) {\r\n        var value;\r\n        if (compareAbs(a, b) >= 0) {\r\n            value = subtract(a, b);\r\n        } else {\r\n            value = subtract(b, a);\r\n            sign = !sign;\r\n        }\r\n        value = arrayToSmall(value);\r\n        if (typeof value === \"number\") {\r\n            if (sign) value = -value;\r\n            return new SmallInteger(value);\r\n        }\r\n        return new BigInteger(value, sign);\r\n    }\r\n\r\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            carry = -b,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < l; i++) {\r\n            difference = a[i] + carry;\r\n            carry = Math.floor(difference / base);\r\n            difference %= base;\r\n            r[i] = difference < 0 ? difference + base : difference;\r\n        }\r\n        r = arrayToSmall(r);\r\n        if (typeof r === \"number\") {\r\n            if (sign) r = -r;\r\n            return new SmallInteger(r);\r\n        } return new BigInteger(r, sign);\r\n    }\r\n\r\n    BigInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall)\r\n            return subtractSmall(a, Math.abs(b), this.sign);\r\n        return subtractAny(a, b, this.sign);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    SmallInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            return new SmallInteger(a - b);\r\n        }\r\n        return subtractSmall(b, Math.abs(a), a >= 0);\r\n    };\r\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\r\n\r\n    NativeBigInt.prototype.subtract = function (v) {\r\n        return new NativeBigInt(this.value - parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\r\n\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    SmallInteger.prototype.negate = function () {\r\n        var sign = this.sign;\r\n        var small = new SmallInteger(-this.value);\r\n        small.sign = !sign;\r\n        return small;\r\n    };\r\n    NativeBigInt.prototype.negate = function () {\r\n        return new NativeBigInt(-this.value);\r\n    }\r\n\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, false);\r\n    };\r\n    SmallInteger.prototype.abs = function () {\r\n        return new SmallInteger(Math.abs(this.value));\r\n    };\r\n    NativeBigInt.prototype.abs = function () {\r\n        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\r\n    }\r\n\r\n\r\n    function multiplyLong(a, b) {\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            l = a_l + b_l,\r\n            r = createArray(l),\r\n            base = BASE,\r\n            product, carry, i, a_i, b_j;\r\n        for (i = 0; i < a_l; ++i) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < b_l; ++j) {\r\n                b_j = b[j];\r\n                product = a_i * b_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            carry = 0,\r\n            product, i;\r\n        for (i = 0; i < l; i++) {\r\n            product = a[i] * b + carry;\r\n            carry = Math.floor(product / base);\r\n            r[i] = product - carry * base;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function shiftLeft(x, n) {\r\n        var r = [];\r\n        while (n-- > 0) r.push(0);\r\n        return r.concat(x);\r\n    }\r\n\r\n    function multiplyKaratsuba(x, y) {\r\n        var n = Math.max(x.length, y.length);\r\n\r\n        if (n <= 30) return multiplyLong(x, y);\r\n        n = Math.ceil(n / 2);\r\n\r\n        var b = x.slice(n),\r\n            a = x.slice(0, n),\r\n            d = y.slice(n),\r\n            c = y.slice(0, n);\r\n\r\n        var ac = multiplyKaratsuba(a, c),\r\n            bd = multiplyKaratsuba(b, d),\r\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\r\n\r\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\r\n        trim(product);\r\n        return product;\r\n    }\r\n\r\n    // The following function is derived from a surface fit of a graph plotting the performance difference\r\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\r\n    function useKaratsuba(l1, l2) {\r\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\r\n    }\r\n\r\n    BigInteger.prototype.multiply = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value, b = n.value,\r\n            sign = this.sign !== n.sign,\r\n            abs;\r\n        if (n.isSmall) {\r\n            if (b === 0) return Integer[0];\r\n            if (b === 1) return this;\r\n            if (b === -1) return this.negate();\r\n            abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                return new BigInteger(multiplySmall(a, abs), sign);\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\r\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\r\n        return new BigInteger(multiplyLong(a, b), sign);\r\n    };\r\n\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\r\n        if (a < BASE) {\r\n            return new BigInteger(multiplySmall(b, a), sign);\r\n        }\r\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\r\n    }\r\n    SmallInteger.prototype._multiplyBySmall = function (a) {\r\n        if (isPrecise(a.value * this.value)) {\r\n            return new SmallInteger(a.value * this.value);\r\n        }\r\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\r\n    };\r\n    BigInteger.prototype._multiplyBySmall = function (a) {\r\n        if (a.value === 0) return Integer[0];\r\n        if (a.value === 1) return this;\r\n        if (a.value === -1) return this.negate();\r\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\r\n    };\r\n    SmallInteger.prototype.multiply = function (v) {\r\n        return parseValue(v)._multiplyBySmall(this);\r\n    };\r\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\r\n\r\n    NativeBigInt.prototype.multiply = function (v) {\r\n        return new NativeBigInt(this.value * parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\r\n\r\n    function square(a) {\r\n        //console.assert(2 * BASE * BASE < MAX_INT);\r\n        var l = a.length,\r\n            r = createArray(l + l),\r\n            base = BASE,\r\n            product, carry, i, a_i, a_j;\r\n        for (i = 0; i < l; i++) {\r\n            a_i = a[i];\r\n            carry = 0 - a_i * a_i;\r\n            for (var j = i; j < l; j++) {\r\n                a_j = a[j];\r\n                product = 2 * (a_i * a_j) + r[i + j] + carry;\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n            }\r\n            r[i + l] = carry;\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.square = function () {\r\n        return new BigInteger(square(this.value), false);\r\n    };\r\n\r\n    SmallInteger.prototype.square = function () {\r\n        var value = this.value * this.value;\r\n        if (isPrecise(value)) return new SmallInteger(value);\r\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\r\n    };\r\n\r\n    NativeBigInt.prototype.square = function (v) {\r\n        return new NativeBigInt(this.value * this.value);\r\n    }\r\n\r\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            base = BASE,\r\n            result = createArray(b.length),\r\n            divisorMostSignificantDigit = b[b_l - 1],\r\n            // normalization\r\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\r\n            remainder = multiplySmall(a, lambda),\r\n            divisor = multiplySmall(b, lambda),\r\n            quotientDigit, shift, carry, borrow, i, l, q;\r\n        if (remainder.length <= a_l) remainder.push(0);\r\n        divisor.push(0);\r\n        divisorMostSignificantDigit = divisor[b_l - 1];\r\n        for (shift = a_l - b_l; shift >= 0; shift--) {\r\n            quotientDigit = base - 1;\r\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\r\n                quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // quotientDigit <= base - 1\r\n            carry = 0;\r\n            borrow = 0;\r\n            l = divisor.length;\r\n            for (i = 0; i < l; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = borrow + base;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                carry = 0;\r\n                for (i = 0; i < l; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = carry + base;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry;\r\n                        carry = 1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit;\r\n        }\r\n        // denormalization\r\n        remainder = divModSmall(remainder, lambda)[0];\r\n        return [arrayToSmall(result), arrayToSmall(remainder)];\r\n    }\r\n\r\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\r\n        // Performs faster than divMod1 on larger input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            result = [],\r\n            part = [],\r\n            base = BASE,\r\n            guess, xlen, highx, highy, check;\r\n        while (a_l) {\r\n            part.unshift(a[--a_l]);\r\n            trim(part);\r\n            if (compareAbs(part, b) < 0) {\r\n                result.push(0);\r\n                continue;\r\n            }\r\n            xlen = part.length;\r\n            highx = part[xlen - 1] * base + part[xlen - 2];\r\n            highy = b[b_l - 1] * base + b[b_l - 2];\r\n            if (xlen > b_l) {\r\n                highx = (highx + 1) * base;\r\n            }\r\n            guess = Math.ceil(highx / highy);\r\n            do {\r\n                check = multiplySmall(b, guess);\r\n                if (compareAbs(check, part) <= 0) break;\r\n                guess--;\r\n            } while (guess);\r\n            result.push(guess);\r\n            part = subtract(part, check);\r\n        }\r\n        result.reverse();\r\n        return [arrayToSmall(result), arrayToSmall(part)];\r\n    }\r\n\r\n    function divModSmall(value, lambda) {\r\n        var length = value.length,\r\n            quotient = createArray(length),\r\n            base = BASE,\r\n            i, q, remainder, divisor;\r\n        remainder = 0;\r\n        for (i = length - 1; i >= 0; --i) {\r\n            divisor = remainder * base + value[i];\r\n            q = truncate(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return [quotient, remainder | 0];\r\n    }\r\n\r\n    function divModAny(self, v) {\r\n        var value, n = parseValue(v);\r\n        if (supportsNativeBigInt) {\r\n            return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];\r\n        }\r\n        var a = self.value, b = n.value;\r\n        var quotient;\r\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\r\n        if (self.isSmall) {\r\n            if (n.isSmall) {\r\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\r\n            }\r\n            return [Integer[0], self];\r\n        }\r\n        if (n.isSmall) {\r\n            if (b === 1) return [self, Integer[0]];\r\n            if (b == -1) return [self.negate(), Integer[0]];\r\n            var abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                value = divModSmall(a, abs);\r\n                quotient = arrayToSmall(value[0]);\r\n                var remainder = value[1];\r\n                if (self.sign) remainder = -remainder;\r\n                if (typeof quotient === \"number\") {\r\n                    if (self.sign !== n.sign) quotient = -quotient;\r\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\r\n                }\r\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        var comparison = compareAbs(a, b);\r\n        if (comparison === -1) return [Integer[0], self];\r\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\r\n\r\n        // divMod1 is faster on smaller input sizes\r\n        if (a.length + b.length <= 200)\r\n            value = divMod1(a, b);\r\n        else value = divMod2(a, b);\r\n\r\n        quotient = value[0];\r\n        var qSign = self.sign !== n.sign,\r\n            mod = value[1],\r\n            mSign = self.sign;\r\n        if (typeof quotient === \"number\") {\r\n            if (qSign) quotient = -quotient;\r\n            quotient = new SmallInteger(quotient);\r\n        } else quotient = new BigInteger(quotient, qSign);\r\n        if (typeof mod === \"number\") {\r\n            if (mSign) mod = -mod;\r\n            mod = new SmallInteger(mod);\r\n        } else mod = new BigInteger(mod, mSign);\r\n        return [quotient, mod];\r\n    }\r\n\r\n    BigInteger.prototype.divmod = function (v) {\r\n        var result = divModAny(this, v);\r\n        return {\r\n            quotient: result[0],\r\n            remainder: result[1]\r\n        };\r\n    };\r\n    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\r\n\r\n\r\n    BigInteger.prototype.divide = function (v) {\r\n        return divModAny(this, v)[0];\r\n    };\r\n    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function (v) {\r\n        return new NativeBigInt(this.value / parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (v) {\r\n        return divModAny(this, v)[1];\r\n    };\r\n    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function (v) {\r\n        return new NativeBigInt(this.value % parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value,\r\n            value, x, y;\r\n        if (b === 0) return Integer[1];\r\n        if (a === 0) return Integer[0];\r\n        if (a === 1) return Integer[1];\r\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.sign) {\r\n            return Integer[0];\r\n        }\r\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\r\n        if (this.isSmall) {\r\n            if (isPrecise(value = Math.pow(a, b)))\r\n                return new SmallInteger(truncate(value));\r\n        }\r\n        x = this;\r\n        y = Integer[1];\r\n        while (true) {\r\n            if (b & 1 === 1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === 0) break;\r\n            b /= 2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    };\r\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\r\n\r\n    NativeBigInt.prototype.pow = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value, b = n.value;\r\n        var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);\r\n        if (b === _0) return Integer[1];\r\n        if (a === _0) return Integer[0];\r\n        if (a === _1) return Integer[1];\r\n        if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.isNegative()) return new NativeBigInt(_0);\r\n        var x = this;\r\n        var y = Integer[1];\r\n        while (true) {\r\n            if ((b & _1) === _1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === _0) break;\r\n            b /= _2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    }\r\n\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseValue(exp);\r\n        mod = parseValue(mod);\r\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = Integer[1],\r\n            base = this.mod(mod);\r\n        if (exp.isNegative()) {\r\n            exp = exp.multiply(Integer[-1]);\r\n            base = base.modInv(mod);\r\n        }\r\n        while (exp.isPositive()) {\r\n            if (base.isZero()) return Integer[0];\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\r\n\r\n    function compareAbs(a, b) {\r\n        if (a.length !== b.length) {\r\n            return a.length > b.length ? 1 : -1;\r\n        }\r\n        for (var i = a.length - 1; i >= 0; i--) {\r\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    BigInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) return 1;\r\n        return compareAbs(a, b);\r\n    };\r\n    SmallInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = Math.abs(this.value),\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            b = Math.abs(b);\r\n            return a === b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        return -1;\r\n    };\r\n    NativeBigInt.prototype.compareAbs = function (v) {\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        a = a >= 0 ? a : -a;\r\n        b = b >= 0 ? b : -b;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n\r\n    BigInteger.prototype.compare = function (v) {\r\n        // See discussion about comparison with Infinity:\r\n        // https://github.com/peterolson/BigInteger.js/issues/61\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (this.sign !== n.sign) {\r\n            return n.sign ? 1 : -1;\r\n        }\r\n        if (n.isSmall) {\r\n            return this.sign ? -1 : 1;\r\n        }\r\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\r\n    };\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n\r\n    SmallInteger.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            return a == b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        if (a < 0 !== n.sign) {\r\n            return a < 0 ? -1 : 1;\r\n        }\r\n        return a < 0 ? 1 : -1;\r\n    };\r\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\r\n\r\n    NativeBigInt.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\r\n\r\n    BigInteger.prototype.equals = function (v) {\r\n        return this.compare(v) === 0;\r\n    };\r\n    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n\r\n    BigInteger.prototype.notEquals = function (v) {\r\n        return this.compare(v) !== 0;\r\n    };\r\n    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    BigInteger.prototype.greater = function (v) {\r\n        return this.compare(v) > 0;\r\n    };\r\n    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n\r\n    BigInteger.prototype.lesser = function (v) {\r\n        return this.compare(v) < 0;\r\n    };\r\n    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n\r\n    BigInteger.prototype.greaterOrEquals = function (v) {\r\n        return this.compare(v) >= 0;\r\n    };\r\n    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n\r\n    BigInteger.prototype.lesserOrEquals = function (v) {\r\n        return this.compare(v) <= 0;\r\n    };\r\n    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n\r\n    BigInteger.prototype.isEven = function () {\r\n        return (this.value[0] & 1) === 0;\r\n    };\r\n    SmallInteger.prototype.isEven = function () {\r\n        return (this.value & 1) === 0;\r\n    };\r\n    NativeBigInt.prototype.isEven = function () {\r\n        return (this.value & BigInt(1)) === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isOdd = function () {\r\n        return (this.value[0] & 1) === 1;\r\n    };\r\n    SmallInteger.prototype.isOdd = function () {\r\n        return (this.value & 1) === 1;\r\n    };\r\n    NativeBigInt.prototype.isOdd = function () {\r\n        return (this.value & BigInt(1)) === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isPositive = function () {\r\n        return !this.sign;\r\n    };\r\n    SmallInteger.prototype.isPositive = function () {\r\n        return this.value > 0;\r\n    };\r\n    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\r\n\r\n    BigInteger.prototype.isNegative = function () {\r\n        return this.sign;\r\n    };\r\n    SmallInteger.prototype.isNegative = function () {\r\n        return this.value < 0;\r\n    };\r\n    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\r\n\r\n    BigInteger.prototype.isUnit = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isUnit = function () {\r\n        return Math.abs(this.value) === 1;\r\n    };\r\n    NativeBigInt.prototype.isUnit = function () {\r\n        return this.abs().value === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isZero = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isZero = function () {\r\n        return this.value === 0;\r\n    };\r\n    NativeBigInt.prototype.isZero = function () {\r\n        return this.value === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isDivisibleBy = function (v) {\r\n        var n = parseValue(v);\r\n        if (n.isZero()) return false;\r\n        if (n.isUnit()) return true;\r\n        if (n.compareAbs(2) === 0) return this.isEven();\r\n        return this.mod(n).isZero();\r\n    };\r\n    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\r\n\r\n    function isBasicPrime(v) {\r\n        var n = v.abs();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(49)) return true;\r\n        // we don't know if it's prime: let the other functions figure it out\r\n    }\r\n\r\n    function millerRabinTest(n, a) {\r\n        var nPrev = n.prev(),\r\n            b = nPrev,\r\n            r = 0,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2), r++;\r\n        next: for (i = 0; i < a.length; i++) {\r\n            if (n.lesser(a[i])) continue;\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.isUnit() || x.equals(nPrev)) continue;\r\n            for (d = r - 1; d != 0; d--) {\r\n                x = x.square().mod(n);\r\n                if (x.isUnit()) return false;\r\n                if (x.equals(nPrev)) continue next;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Set \"strict\" to true to force GRH-supported lower bound of 2*log(N)^2\r\n    BigInteger.prototype.isPrime = function (strict) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var bits = n.bitLength();\r\n        if (bits <= 64)\r\n            return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);\r\n        var logN = Math.log(2) * bits.toJSNumber();\r\n        var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt(i + 2));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\r\n\r\n    BigInteger.prototype.isProbablePrime = function (iterations, rng) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var t = iterations === undefined ? 5 : iterations;\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt.randBetween(2, n.minus(2), rng));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\r\n\r\n    BigInteger.prototype.modInv = function (n) {\r\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\r\n        while (!newR.isZero()) {\r\n            q = r.divide(newR);\r\n            lastT = t;\r\n            lastR = r;\r\n            t = newT;\r\n            r = newR;\r\n            newT = lastT.subtract(q.multiply(newT));\r\n            newR = lastR.subtract(q.multiply(newR));\r\n        }\r\n        if (!r.isUnit()) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\r\n        if (t.compare(0) === -1) {\r\n            t = t.add(n);\r\n        }\r\n        if (this.isNegative()) {\r\n            return t.negate();\r\n        }\r\n        return t;\r\n    };\r\n\r\n    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\r\n\r\n    BigInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return subtractSmall(value, 1, this.sign);\r\n        }\r\n        return new BigInteger(addSmall(value, 1), this.sign);\r\n    };\r\n    SmallInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\r\n        return new BigInteger(MAX_INT_ARR, false);\r\n    };\r\n    NativeBigInt.prototype.next = function () {\r\n        return new NativeBigInt(this.value + BigInt(1));\r\n    }\r\n\r\n    BigInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return new BigInteger(addSmall(value, 1), true);\r\n        }\r\n        return subtractSmall(value, 1, this.sign);\r\n    };\r\n    SmallInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\r\n        return new BigInteger(MAX_INT_ARR, true);\r\n    };\r\n    NativeBigInt.prototype.prev = function () {\r\n        return new NativeBigInt(this.value - BigInt(1));\r\n    }\r\n\r\n    var powersOfTwo = [1];\r\n    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    function shift_isSmall(n) {\r\n        return Math.abs(n) <= BASE;\r\n    }\r\n\r\n    BigInteger.prototype.shiftLeft = function (v) {\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        if (result.isZero()) return result;\r\n        while (n >= powers2Length) {\r\n            result = result.multiply(highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return result.multiply(powersOfTwo[n]);\r\n    };\r\n    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\r\n\r\n    BigInteger.prototype.shiftRight = function (v) {\r\n        var remQuo;\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.isZero() || (result.isNegative() && result.isUnit())) return result;\r\n            remQuo = divModAny(result, highestPower2);\r\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n            n -= powers2Length - 1;\r\n        }\r\n        remQuo = divModAny(result, powersOfTwo[n]);\r\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n    };\r\n    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\r\n\r\n    function bitwise(x, y, fn) {\r\n        y = parseValue(y);\r\n        var xSign = x.isNegative(), ySign = y.isNegative();\r\n        var xRem = xSign ? x.not() : x,\r\n            yRem = ySign ? y.not() : y;\r\n        var xDigit = 0, yDigit = 0;\r\n        var xDivMod = null, yDivMod = null;\r\n        var result = [];\r\n        while (!xRem.isZero() || !yRem.isZero()) {\r\n            xDivMod = divModAny(xRem, highestPower2);\r\n            xDigit = xDivMod[1].toJSNumber();\r\n            if (xSign) {\r\n                xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            yDivMod = divModAny(yRem, highestPower2);\r\n            yDigit = yDivMod[1].toJSNumber();\r\n            if (ySign) {\r\n                yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            xRem = xDivMod[0];\r\n            yRem = yDivMod[0];\r\n            result.push(fn(xDigit, yDigit));\r\n        }\r\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\r\n        for (var i = result.length - 1; i >= 0; i -= 1) {\r\n            sum = sum.multiply(highestPower2).add(bigInt(result[i]));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        return this.negate().prev();\r\n    };\r\n    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a & b; });\r\n    };\r\n    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a | b; });\r\n    };\r\n    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a ^ b; });\r\n    };\r\n    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\r\n\r\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\r\n    function roughLOB(n) { // get lowestOneBit (rough)\r\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\r\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\r\n        var v = n.value,\r\n            x = typeof v === \"number\" ? v | LOBMASK_I :\r\n                typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) :\r\n                    v[0] + v[1] * BASE | LOBMASK_BI;\r\n        return x & -x;\r\n    }\r\n\r\n    function integerLogarithm(value, base) {\r\n        if (base.compareTo(value) <= 0) {\r\n            var tmp = integerLogarithm(value, base.square(base));\r\n            var p = tmp.p;\r\n            var e = tmp.e;\r\n            var t = p.multiply(base);\r\n            return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p: p, e: e * 2 };\r\n        }\r\n        return { p: bigInt(1), e: 0 };\r\n    }\r\n\r\n    BigInteger.prototype.bitLength = function () {\r\n        var n = this;\r\n        if (n.compareTo(bigInt(0)) < 0) {\r\n            n = n.negate().subtract(bigInt(1));\r\n        }\r\n        if (n.compareTo(bigInt(0)) === 0) {\r\n            return bigInt(0);\r\n        }\r\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\r\n    }\r\n    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\r\n\r\n    function max(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    function gcd(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.isZero()) return b;\r\n        if (b.isZero()) return a;\r\n        var c = Integer[1], d, t;\r\n        while (a.isEven() && b.isEven()) {\r\n            d = min(roughLOB(a), roughLOB(b));\r\n            a = a.divide(d);\r\n            b = b.divide(d);\r\n            c = c.multiply(d);\r\n        }\r\n        while (a.isEven()) {\r\n            a = a.divide(roughLOB(a));\r\n        }\r\n        do {\r\n            while (b.isEven()) {\r\n                b = b.divide(roughLOB(b));\r\n            }\r\n            if (a.greater(b)) {\r\n                t = b; b = a; a = t;\r\n            }\r\n            b = b.subtract(a);\r\n        } while (!b.isZero());\r\n        return c.isUnit() ? a : a.multiply(c);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        return a.divide(gcd(a, b)).multiply(b);\r\n    }\r\n    function randBetween(a, b, rng) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        var usedRNG = rng || Math.random;\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low).add(1);\r\n        if (range.isSmall) return low.add(Math.floor(usedRNG() * range));\r\n        var digits = toBase(range, BASE).value;\r\n        var result = [], restricted = true;\r\n        for (var i = 0; i < digits.length; i++) {\r\n            var top = restricted ? digits[i] : BASE;\r\n            var digit = truncate(usedRNG() * top);\r\n            result.push(digit);\r\n            if (digit < top) restricted = false;\r\n        }\r\n        return low.add(Integer.fromArray(result, BASE, false));\r\n    }\r\n\r\n    var parseBase = function (text, base, alphabet, caseSensitive) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        text = String(text);\r\n        if (!caseSensitive) {\r\n            text = text.toLowerCase();\r\n            alphabet = alphabet.toLowerCase();\r\n        }\r\n        var length = text.length;\r\n        var i;\r\n        var absBase = Math.abs(base);\r\n        var alphabetValues = {};\r\n        for (i = 0; i < alphabet.length; i++) {\r\n            alphabetValues[alphabet[i]] = i;\r\n        }\r\n        for (i = 0; i < length; i++) {\r\n            var c = text[i];\r\n            if (c === \"-\") continue;\r\n            if (c in alphabetValues) {\r\n                if (alphabetValues[c] >= absBase) {\r\n                    if (c === \"1\" && absBase === 1) continue;\r\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\r\n                }\r\n            }\r\n        }\r\n        base = parseValue(base);\r\n        var digits = [];\r\n        var isNegative = text[0] === \"-\";\r\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\r\n            var c = text[i];\r\n            if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\" && i < text.length);\r\n                digits.push(parseValue(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        return parseBaseFromArray(digits, base, isNegative);\r\n    };\r\n\r\n    function parseBaseFromArray(digits, base, isNegative) {\r\n        var val = Integer[0], pow = Integer[1], i;\r\n        for (i = digits.length - 1; i >= 0; i--) {\r\n            val = val.add(digits[i].times(pow));\r\n            pow = pow.times(base);\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    }\r\n\r\n    function stringify(digit, alphabet) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        if (digit < alphabet.length) {\r\n            return alphabet[digit];\r\n        }\r\n        return \"<\" + digit + \">\";\r\n    }\r\n\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.isZero()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            if (n.isNegative())\r\n                return {\r\n                    value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber()))\r\n                        .map(Array.prototype.valueOf, [1, 0])\r\n                    ),\r\n                    isNegative: false\r\n                };\r\n\r\n            var arr = Array.apply(null, Array(n.toJSNumber() - 1))\r\n                .map(Array.prototype.valueOf, [0, 1]);\r\n            arr.unshift([1]);\r\n            return {\r\n                value: [].concat.apply([], arr),\r\n                isNegative: false\r\n            };\r\n        }\r\n\r\n        var neg = false;\r\n        if (n.isNegative() && base.isPositive()) {\r\n            neg = true;\r\n            n = n.abs();\r\n        }\r\n        if (base.isUnit()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n\r\n            return {\r\n                value: Array.apply(null, Array(n.toJSNumber()))\r\n                    .map(Number.prototype.valueOf, 1),\r\n                isNegative: neg\r\n            };\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.isNegative()) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(digit.toJSNumber());\r\n        }\r\n        out.push(left.toJSNumber());\r\n        return { value: out.reverse(), isNegative: neg };\r\n    }\r\n\r\n    function toBaseString(n, base, alphabet) {\r\n        var arr = toBase(n, base);\r\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function (x) {\r\n            return stringify(x, alphabet);\r\n        }).join('');\r\n    }\r\n\r\n    BigInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    SmallInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    NativeBigInt.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    BigInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix !== 10) return toBaseString(this, radix, alphabet);\r\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\r\n        while (--l >= 0) {\r\n            digit = String(v[l]);\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var sign = this.sign ? \"-\" : \"\";\r\n        return sign + str;\r\n    };\r\n\r\n    SmallInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix != 10) return toBaseString(this, radix, alphabet);\r\n        return String(this.value);\r\n    };\r\n\r\n    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\r\n\r\n    NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () { return this.toString(); }\r\n\r\n    BigInteger.prototype.valueOf = function () {\r\n        return parseInt(this.toString(), 10);\r\n    };\r\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\r\n\r\n    SmallInteger.prototype.valueOf = function () {\r\n        return this.value;\r\n    };\r\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\r\n    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {\r\n        return parseInt(this.toString(), 10);\r\n    }\r\n\r\n    function parseStringValue(v) {\r\n        if (isPrecise(+v)) {\r\n            var x = +v;\r\n            if (x === truncate(x))\r\n                return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\r\n            throw new Error(\"Invalid integer: \" + v);\r\n        }\r\n        var sign = v[0] === \"-\";\r\n        if (sign) v = v.slice(1);\r\n        var split = v.split(/e/i);\r\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\r\n        if (split.length === 2) {\r\n            var exp = split[1];\r\n            if (exp[0] === \"+\") exp = exp.slice(1);\r\n            exp = +exp;\r\n            if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\r\n            var text = split[0];\r\n            var decimalPlace = text.indexOf(\".\");\r\n            if (decimalPlace >= 0) {\r\n                exp -= text.length - decimalPlace - 1;\r\n                text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\r\n            }\r\n            if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\r\n            text += (new Array(exp + 1)).join(\"0\");\r\n            v = text;\r\n        }\r\n        var isValid = /^([0-9][0-9]*)$/.test(v);\r\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(sign ? \"-\" + v : v));\r\n        }\r\n        var r = [], max = v.length, l = LOG_BASE, min = max - l;\r\n        while (max > 0) {\r\n            r.push(+v.slice(min, max));\r\n            min -= l;\r\n            if (min < 0) min = 0;\r\n            max -= l;\r\n        }\r\n        trim(r);\r\n        return new BigInteger(r, sign);\r\n    }\r\n\r\n    function parseNumberValue(v) {\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(v));\r\n        }\r\n        if (isPrecise(v)) {\r\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\r\n            return new SmallInteger(v);\r\n        }\r\n        return parseStringValue(v.toString());\r\n    }\r\n\r\n    function parseValue(v) {\r\n        if (typeof v === \"number\") {\r\n            return parseNumberValue(v);\r\n        }\r\n        if (typeof v === \"string\") {\r\n            return parseStringValue(v);\r\n        }\r\n        if (typeof v === \"bigint\") {\r\n            return new NativeBigInt(v);\r\n        }\r\n        return v;\r\n    }\r\n    // Pre-define numbers in range [-999,999]\r\n    for (var i = 0; i < 1000; i++) {\r\n        Integer[i] = parseValue(i);\r\n        if (i > 0) Integer[-i] = parseValue(-i);\r\n    }\r\n    // Backwards compatibility\r\n    Integer.one = Integer[1];\r\n    Integer.zero = Integer[0];\r\n    Integer.minusOne = Integer[-1];\r\n    Integer.max = max;\r\n    Integer.min = min;\r\n    Integer.gcd = gcd;\r\n    Integer.lcm = lcm;\r\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt; };\r\n    Integer.randBetween = randBetween;\r\n\r\n    Integer.fromArray = function (digits, base, isNegative) {\r\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\r\n    };\r\n\r\n    return Integer;\r\n})();\r\n\r\n// Node.js check\r\nif (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\r\n    module.exports = bigInt;\r\n}\r\n\r\n//amd check\r\nif (typeof define === \"function\" && define.amd) {\r\n    define( function () {\r\n        return bigInt;\r\n    });\r\n}\r\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n"],"sourceRoot":""}